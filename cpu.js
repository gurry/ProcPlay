// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// TODO: " u s e   s t r i c t ";

try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
} else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  Module['printErr'] = printErr;

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WEB) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }

  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...

  Module['load'] = importScripts;

} else {
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['printErr']) {
  Module['printErr'] = function(){};
}
if (!Module['print']) {
  Module['print'] = Module['printErr'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ [^}]* }>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  bitshift64: function (low, high, op, bits) {
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case 'shl':
          return [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
        case 'ashr':
          return [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
        case 'lshr':
          return [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
      }
    } else if (bits == 32) {
      switch (op) {
        case 'shl':
          return [0, low];
        case 'ashr':
          return [high, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high, 0];
      }
    } else { // bits > 32
      switch (op) {
        case 'shl':
          return [0, low << (bits - 32)];
        case 'ashr':
          return [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high >>>  (bits - 32) , 0];
      }
    }
    abort('unknown bitshift64 op: ' + [value, op, bits]);
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type[type.length-1] == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      assert(type.fields.length === struct.length, 'Number of named fields must match the type for ' + typeName);
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP += size;assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP += size;STATICTOP = ((((STATICTOP)+3)>>2)<<2); return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = false; // Used in checking for thrown exceptions.

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Adding
//
//         __attribute__((used))
//
//       to the function definition will prevent that.
//
// Note: Closure optimizations will minify function names, making
//       functions no longer callable. If you run closure (on by default
//       in -O2 and above), you should export the functions you will call
//       by calling emcc with something like
//
//         -s EXPORTED_FUNCTIONS='["_func1","_func2"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number' or 'string' (use 'number' for any C pointer).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType.
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    return value;
  }
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
Module["ccall"] = ccall;

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  // TODO: optimize this, eval the whole function once instead of going through ccall each time
  return function() {
    return ccall(ident, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP[ptr]=value; break;
      case 'i8': HEAP[ptr]=value; break;
      case 'i16': HEAP[ptr]=value; break;
      case 'i32': HEAP[ptr]=value; break;
      case 'i64': HEAP[ptr]=value; break;
      case 'float': HEAP[ptr]=value; break;
      case 'double': HEAP[ptr]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP[ptr];
      case 'i8': return HEAP[ptr];
      case 'i16': return HEAP[ptr];
      case 'i32': return HEAP[ptr];
      case 'i64': return HEAP[ptr];
      case 'float': return HEAP[ptr];
      case 'double': return HEAP[ptr];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

// Allocates memory for some data and initializes it properly.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;

function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));

  if (zeroinit) {
      _memset(ret, 0, size);
      return ret;
  }
  
  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');


    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  var nullByte = String.fromCharCode(0);
  while (1) {
    t = String.fromCharCode(HEAP[ptr+i]);
    if (nullTerminated && t == nullByte) { break; } else {}
    ret += t;
    i += 1;
    if (!nullTerminated && i == length) { break; }
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var FUNCTION_TABLE; // XXX: In theory the indexes here can be equal to pointers to stacked or malloced memory. Such comparisons should
                    //      be false, but can turn out true. We should probably set the top bit to prevent such issues.

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 10485760;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
  // Make sure that our HEAP is implemented as a flat array.
  HEAP = []; // Hinting at the size with |new Array(TOTAL_MEMORY)| should help in theory but makes v8 much slower
  for (var i = 0; i < FAST_MEMORY; i++) {
    HEAP[i] = 0; // XXX We do *not* use {{| makeSetValue(0, 'i', 0, 'null') |}} here, since this is done just to optimize runtime speed
  }

var base = intArrayFromString('(null)'); // So printing %s of NULL gives '(null)'
                                         // Also this ensures we leave 0 as an invalid address, 'NULL'
STATICTOP = base.length;
for (var i = 0; i < base.length; i++) {
  HEAP[i]=base[i]
}

Module['HEAP'] = HEAP;

STACK_ROOT = STACKTOP = Runtime.alignMemory(STATICTOP);
STACK_MAX = STACK_ROOT + TOTAL_STACK;


STATICTOP = alignMemoryPage(STACK_MAX);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}


// Copies a list of num items on the HEAP into a
// a normal JavaScript array of numbers
function Array_copy(ptr, num) {
  return HEAP.slice(ptr, ptr+num);
}
Module['Array_copy'] = Array_copy;


function String_len(ptr) {
  var i = 0;
  while (HEAP[ptr+i]) i++; // Note: should be |!= 0|, technically. But this helps catch bugs with undefineds
  return i;
}
Module['String_len'] = String_len;

// Copies a C-style string, terminated by a zero, from the HEAP into
// a normal JavaScript array of numbers
function String_copy(ptr, addZero) {
  var len = String_len(ptr);
  if (addZero) len++;
  var ret = Array_copy(ptr, len);
  if (addZero) ret[len-1] = 0;
  return ret;
}
Module['String_copy'] = String_copy;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull) {
  var ret = [];
  var t;
  var i = 0;
  while (i < stringy.length) {
    var chr = stringy.charCodeAt(i);
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + stringy[i] + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(chr);
    i = i + 1;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var i = 0;
  while (i < string.length) {
    var chr = string.charCodeAt(i);
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + string[i] + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    HEAP[buffer+i]=chr
    i = i + 1;
  }
  if (!dontAddNull) {
    HEAP[buffer+i]=0
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

var STRING_TABLE = [];

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in Module.preRun
// or PRE_RUN_ADDITIONS (used by emcc to add file preloading).
var runDependencies = 0;
function addRunDependency() {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
function removeRunDependency() {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) run();
}

// Preloading

var preloadedImages = {}; // maps url to image data

// === Body ===




function _Sfx86OpcodeExec_aaaseries($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $al;
      var $nal;
      var $al1;
      var $nal2;
      var $ah;
      var $al3;
      var $ah4;
      var $al5;
      var $ah6;
      var $al7;
      var $x;
      var $ah8;
      var $al9;
      var $x10;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==39;
      if ($6) { __label__ = 2; break; } else { __label__ = 22; break; }
    case 2: 
      var $8=$3;
      var $9=(($8+4)|0);
      var $10=(($9)|0);
      var $11=(($10)|0);
      var $12=$11;
      var $13=(($12)|0);
      var $14=HEAP[$13];
      $al=$14;
      var $15=$al;
      var $16=(($15)&255);
      var $17=$16 & 15;
      var $18=(($17)|0) > 9;
      if ($18) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $20=$3;
      var $21=(($20+4)|0);
      var $22=(($21+96)|0);
      var $23=$22;
      var $24=HEAP[$23];
      var $25=$24 & 16;
      var $26=(($25)|0)!=0;
      if ($26) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $28=$al;
      var $29=(($28)&255);
      var $30=$29 & 15;
      var $31=(($30+6)|0);
      var $32=(($31) & 255);
      $nal=$32;
      var $33=$al;
      var $34=(($33)&255);
      var $35=(($34+6)|0);
      var $36=(($35) & 255);
      $al=$36;
      var $37=$nal;
      var $38=(($37)&255);
      var $39=(($38)|0) >= 16;
      if ($39) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $41=$3;
      var $42=(($41+4)|0);
      var $43=(($42+96)|0);
      var $44=$43;
      var $45=HEAP[$44];
      var $46=$45 | 1;
      HEAP[$44]=$46;
      __label__ = 6; break;
    case 6: 
      var $48=$3;
      var $49=(($48+4)|0);
      var $50=(($49+96)|0);
      var $51=$50;
      var $52=HEAP[$51];
      var $53=$52 | 16;
      HEAP[$51]=$53;
      __label__ = 8; break;
    case 7: 
      var $55=$3;
      var $56=(($55+4)|0);
      var $57=(($56+96)|0);
      var $58=$57;
      var $59=HEAP[$58];
      var $60=$59 & -17;
      HEAP[$58]=$60;
      __label__ = 8; break;
    case 8: 
      var $62=$al;
      var $63=(($62)&255);
      var $64=$63 & 240;
      var $65=(($64)|0) > 144;
      if ($65) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $67=$3;
      var $68=(($67+4)|0);
      var $69=(($68+96)|0);
      var $70=$69;
      var $71=HEAP[$70];
      var $72=$71 & 1;
      var $73=(($72)|0)!=0;
      if ($73) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $75=$al;
      var $76=(($75)&255);
      var $77=(($76+96)|0);
      var $78=(($77) & 255);
      $al=$78;
      var $79=$3;
      var $80=(($79+4)|0);
      var $81=(($80+96)|0);
      var $82=$81;
      var $83=HEAP[$82];
      var $84=$83 | 1;
      HEAP[$82]=$84;
      __label__ = 12; break;
    case 11: 
      var $86=$3;
      var $87=(($86+4)|0);
      var $88=(($87+96)|0);
      var $89=$88;
      var $90=HEAP[$89];
      var $91=$90 & -2;
      HEAP[$89]=$91;
      __label__ = 12; break;
    case 12: 
      var $93=$3;
      var $94=(($93+4)|0);
      var $95=(($94+96)|0);
      var $96=$95;
      var $97=HEAP[$96];
      var $98=$97 & -2049;
      HEAP[$96]=$98;
      var $99=$al;
      var $100=(($99)&255);
      var $101=$100 & 128;
      var $102=(($101)|0)!=0;
      if ($102) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $104=$3;
      var $105=(($104+4)|0);
      var $106=(($105+96)|0);
      var $107=$106;
      var $108=HEAP[$107];
      var $109=$108 | 128;
      HEAP[$107]=$109;
      __label__ = 15; break;
    case 14: 
      var $111=$3;
      var $112=(($111+4)|0);
      var $113=(($112+96)|0);
      var $114=$113;
      var $115=HEAP[$114];
      var $116=$115 & -129;
      HEAP[$114]=$116;
      __label__ = 15; break;
    case 15: 
      var $118=$al;
      var $119=(($118 << 24) >> 24)!=0;
      if ($119) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $121=$3;
      var $122=(($121+4)|0);
      var $123=(($122+96)|0);
      var $124=$123;
      var $125=HEAP[$124];
      var $126=$125 | 64;
      HEAP[$124]=$126;
      __label__ = 18; break;
    case 17: 
      var $128=$3;
      var $129=(($128+4)|0);
      var $130=(($129+96)|0);
      var $131=$130;
      var $132=HEAP[$131];
      var $133=$132 & -65;
      HEAP[$131]=$133;
      __label__ = 18; break;
    case 18: 
      var $135=$al;
      var $136=_softx86_parity8($135);
      var $137=(($136)|0)!=0;
      if ($137) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $139=$3;
      var $140=(($139+4)|0);
      var $141=(($140+96)|0);
      var $142=$141;
      var $143=HEAP[$142];
      var $144=$143 | 4;
      HEAP[$142]=$144;
      __label__ = 21; break;
    case 20: 
      var $146=$3;
      var $147=(($146+4)|0);
      var $148=(($147+96)|0);
      var $149=$148;
      var $150=HEAP[$149];
      var $151=$150 & -5;
      HEAP[$149]=$151;
      __label__ = 21; break;
    case 21: 
      var $153=$al;
      var $154=$3;
      var $155=(($154+4)|0);
      var $156=(($155)|0);
      var $157=(($156)|0);
      var $158=$157;
      var $159=(($158)|0);
      HEAP[$159]=$153;
      $1=1;
      __label__ = 81; break;
    case 22: 
      var $161=$2;
      var $162=(($161)&255);
      var $163=(($162)|0)==47;
      if ($163) { __label__ = 23; break; } else { __label__ = 43; break; }
    case 23: 
      var $165=$3;
      var $166=(($165+4)|0);
      var $167=(($166)|0);
      var $168=(($167)|0);
      var $169=$168;
      var $170=(($169)|0);
      var $171=HEAP[$170];
      $al1=$171;
      var $172=$al1;
      var $173=(($172)&255);
      var $174=$173 & 15;
      var $175=(($174)|0) > 9;
      if ($175) { __label__ = 25; break; } else { __label__ = 24; break; }
    case 24: 
      var $177=$3;
      var $178=(($177+4)|0);
      var $179=(($178+96)|0);
      var $180=$179;
      var $181=HEAP[$180];
      var $182=$181 & 16;
      var $183=(($182)|0)!=0;
      if ($183) { __label__ = 25; break; } else { __label__ = 28; break; }
    case 25: 
      var $185=$al1;
      var $186=(($185)&255);
      var $187=$186 & 15;
      var $188=(($187-6)|0);
      $nal2=$188;
      var $189=$al1;
      var $190=(($189)&255);
      var $191=(($190-6)|0);
      var $192=(($191) & 255);
      $al1=$192;
      var $193=$nal2;
      var $194=(($193)|0) < 0;
      if ($194) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $196=$3;
      var $197=(($196+4)|0);
      var $198=(($197+96)|0);
      var $199=$198;
      var $200=HEAP[$199];
      var $201=$200 | 1;
      HEAP[$199]=$201;
      __label__ = 27; break;
    case 27: 
      var $203=$3;
      var $204=(($203+4)|0);
      var $205=(($204+96)|0);
      var $206=$205;
      var $207=HEAP[$206];
      var $208=$207 | 16;
      HEAP[$206]=$208;
      __label__ = 29; break;
    case 28: 
      var $210=$3;
      var $211=(($210+4)|0);
      var $212=(($211+96)|0);
      var $213=$212;
      var $214=HEAP[$213];
      var $215=$214 & -17;
      HEAP[$213]=$215;
      __label__ = 29; break;
    case 29: 
      var $217=$al1;
      var $218=(($217)&255);
      var $219=(($218)|0) > 159;
      if ($219) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      var $221=$3;
      var $222=(($221+4)|0);
      var $223=(($222+96)|0);
      var $224=$223;
      var $225=HEAP[$224];
      var $226=$225 & 1;
      var $227=(($226)|0)!=0;
      if ($227) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $229=$al1;
      var $230=(($229)&255);
      var $231=(($230-96)|0);
      var $232=(($231) & 255);
      $al1=$232;
      var $233=$3;
      var $234=(($233+4)|0);
      var $235=(($234+96)|0);
      var $236=$235;
      var $237=HEAP[$236];
      var $238=$237 | 1;
      HEAP[$236]=$238;
      __label__ = 33; break;
    case 32: 
      var $240=$3;
      var $241=(($240+4)|0);
      var $242=(($241+96)|0);
      var $243=$242;
      var $244=HEAP[$243];
      var $245=$244 & -2;
      HEAP[$243]=$245;
      __label__ = 33; break;
    case 33: 
      var $247=$3;
      var $248=(($247+4)|0);
      var $249=(($248+96)|0);
      var $250=$249;
      var $251=HEAP[$250];
      var $252=$251 & -2049;
      HEAP[$250]=$252;
      var $253=$al1;
      var $254=(($253)&255);
      var $255=$254 & 128;
      var $256=(($255)|0)!=0;
      if ($256) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $258=$3;
      var $259=(($258+4)|0);
      var $260=(($259+96)|0);
      var $261=$260;
      var $262=HEAP[$261];
      var $263=$262 | 128;
      HEAP[$261]=$263;
      __label__ = 36; break;
    case 35: 
      var $265=$3;
      var $266=(($265+4)|0);
      var $267=(($266+96)|0);
      var $268=$267;
      var $269=HEAP[$268];
      var $270=$269 & -129;
      HEAP[$268]=$270;
      __label__ = 36; break;
    case 36: 
      var $272=$al1;
      var $273=(($272 << 24) >> 24)!=0;
      if ($273) { __label__ = 38; break; } else { __label__ = 37; break; }
    case 37: 
      var $275=$3;
      var $276=(($275+4)|0);
      var $277=(($276+96)|0);
      var $278=$277;
      var $279=HEAP[$278];
      var $280=$279 | 64;
      HEAP[$278]=$280;
      __label__ = 39; break;
    case 38: 
      var $282=$3;
      var $283=(($282+4)|0);
      var $284=(($283+96)|0);
      var $285=$284;
      var $286=HEAP[$285];
      var $287=$286 & -65;
      HEAP[$285]=$287;
      __label__ = 39; break;
    case 39: 
      var $289=$al1;
      var $290=_softx86_parity8($289);
      var $291=(($290)|0)!=0;
      if ($291) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $293=$3;
      var $294=(($293+4)|0);
      var $295=(($294+96)|0);
      var $296=$295;
      var $297=HEAP[$296];
      var $298=$297 | 4;
      HEAP[$296]=$298;
      __label__ = 42; break;
    case 41: 
      var $300=$3;
      var $301=(($300+4)|0);
      var $302=(($301+96)|0);
      var $303=$302;
      var $304=HEAP[$303];
      var $305=$304 & -5;
      HEAP[$303]=$305;
      __label__ = 42; break;
    case 42: 
      var $307=$al1;
      var $308=$3;
      var $309=(($308+4)|0);
      var $310=(($309)|0);
      var $311=(($310)|0);
      var $312=$311;
      var $313=(($312)|0);
      HEAP[$313]=$307;
      $1=1;
      __label__ = 81; break;
    case 43: 
      var $315=$2;
      var $316=(($315)&255);
      var $317=(($316)|0)==55;
      if ($317) { __label__ = 44; break; } else { __label__ = 49; break; }
    case 44: 
      var $319=$3;
      var $320=(($319+4)|0);
      var $321=(($320)|0);
      var $322=(($321)|0);
      var $323=$322;
      var $324=(($323)|0);
      var $325=HEAP[$324];
      $al3=$325;
      var $326=$3;
      var $327=(($326+4)|0);
      var $328=(($327)|0);
      var $329=(($328)|0);
      var $330=$329;
      var $331=(($330+1)|0);
      var $332=HEAP[$331];
      $ah=$332;
      var $333=$al3;
      var $334=(($333)&255);
      var $335=$334 & 15;
      var $336=(($335)|0) > 9;
      if ($336) { __label__ = 46; break; } else { __label__ = 45; break; }
    case 45: 
      var $338=$3;
      var $339=(($338+4)|0);
      var $340=(($339+96)|0);
      var $341=$340;
      var $342=HEAP[$341];
      var $343=$342 & 16;
      var $344=(($343)|0)!=0;
      if ($344) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $346=$al3;
      var $347=(($346)&255);
      var $348=(($347+6)|0);
      var $349=(($348) & 255);
      $al3=$349;
      var $350=$ah;
      var $351=(($350+1)&255);
      $ah=$351;
      var $352=$3;
      var $353=(($352+4)|0);
      var $354=(($353+96)|0);
      var $355=$354;
      var $356=HEAP[$355];
      var $357=$356 | 17;
      HEAP[$355]=$357;
      __label__ = 48; break;
    case 47: 
      var $359=$3;
      var $360=(($359+4)|0);
      var $361=(($360+96)|0);
      var $362=$361;
      var $363=HEAP[$362];
      var $364=$363 & -18;
      HEAP[$362]=$364;
      __label__ = 48; break;
    case 48: 
      var $366=$ah;
      var $367=$3;
      var $368=(($367+4)|0);
      var $369=(($368)|0);
      var $370=(($369)|0);
      var $371=$370;
      var $372=(($371+1)|0);
      HEAP[$372]=$366;
      var $373=$al3;
      var $374=(($373)&255);
      var $375=$374 & 15;
      var $376=(($375) & 255);
      var $377=$3;
      var $378=(($377+4)|0);
      var $379=(($378)|0);
      var $380=(($379)|0);
      var $381=$380;
      var $382=(($381)|0);
      HEAP[$382]=$376;
      var $383=$3;
      var $384=(($383+4)|0);
      var $385=(($384+96)|0);
      var $386=$385;
      var $387=HEAP[$386];
      var $388=$387 & -129;
      HEAP[$386]=$388;
      var $389=$3;
      var $390=(($389+4)|0);
      var $391=(($390+96)|0);
      var $392=$391;
      var $393=HEAP[$392];
      var $394=$393 & -65;
      HEAP[$392]=$394;
      var $395=$3;
      var $396=(($395+4)|0);
      var $397=(($396+96)|0);
      var $398=$397;
      var $399=HEAP[$398];
      var $400=$399 & -5;
      HEAP[$398]=$400;
      var $401=$3;
      var $402=(($401+4)|0);
      var $403=(($402+96)|0);
      var $404=$403;
      var $405=HEAP[$404];
      var $406=$405 & -2049;
      HEAP[$404]=$406;
      $1=1;
      __label__ = 81; break;
    case 49: 
      var $408=$2;
      var $409=(($408)&255);
      var $410=(($409)|0)==63;
      if ($410) { __label__ = 50; break; } else { __label__ = 55; break; }
    case 50: 
      var $412=$3;
      var $413=(($412+4)|0);
      var $414=(($413)|0);
      var $415=(($414)|0);
      var $416=$415;
      var $417=(($416)|0);
      var $418=HEAP[$417];
      $al5=$418;
      var $419=$3;
      var $420=(($419+4)|0);
      var $421=(($420)|0);
      var $422=(($421)|0);
      var $423=$422;
      var $424=(($423+1)|0);
      var $425=HEAP[$424];
      $ah4=$425;
      var $426=$al5;
      var $427=(($426)&255);
      var $428=$427 & 15;
      var $429=(($428)|0) > 9;
      if ($429) { __label__ = 52; break; } else { __label__ = 51; break; }
    case 51: 
      var $431=$3;
      var $432=(($431+4)|0);
      var $433=(($432+96)|0);
      var $434=$433;
      var $435=HEAP[$434];
      var $436=$435 & 16;
      var $437=(($436)|0)!=0;
      if ($437) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $439=$al5;
      var $440=(($439)&255);
      var $441=(($440-6)|0);
      var $442=(($441) & 255);
      $al5=$442;
      var $443=$ah4;
      var $444=(($443-1)&255);
      $ah4=$444;
      var $445=$3;
      var $446=(($445+4)|0);
      var $447=(($446+96)|0);
      var $448=$447;
      var $449=HEAP[$448];
      var $450=$449 | 17;
      HEAP[$448]=$450;
      __label__ = 54; break;
    case 53: 
      var $452=$3;
      var $453=(($452+4)|0);
      var $454=(($453+96)|0);
      var $455=$454;
      var $456=HEAP[$455];
      var $457=$456 & -18;
      HEAP[$455]=$457;
      __label__ = 54; break;
    case 54: 
      var $459=$ah4;
      var $460=$3;
      var $461=(($460+4)|0);
      var $462=(($461)|0);
      var $463=(($462)|0);
      var $464=$463;
      var $465=(($464+1)|0);
      HEAP[$465]=$459;
      var $466=$al5;
      var $467=(($466)&255);
      var $468=$467 & 15;
      var $469=(($468) & 255);
      var $470=$3;
      var $471=(($470+4)|0);
      var $472=(($471)|0);
      var $473=(($472)|0);
      var $474=$473;
      var $475=(($474)|0);
      HEAP[$475]=$469;
      var $476=$3;
      var $477=(($476+4)|0);
      var $478=(($477+96)|0);
      var $479=$478;
      var $480=HEAP[$479];
      var $481=$480 & -129;
      HEAP[$479]=$481;
      var $482=$3;
      var $483=(($482+4)|0);
      var $484=(($483+96)|0);
      var $485=$484;
      var $486=HEAP[$485];
      var $487=$486 & -65;
      HEAP[$485]=$487;
      var $488=$3;
      var $489=(($488+4)|0);
      var $490=(($489+96)|0);
      var $491=$490;
      var $492=HEAP[$491];
      var $493=$492 & -5;
      HEAP[$491]=$493;
      var $494=$3;
      var $495=(($494+4)|0);
      var $496=(($495+96)|0);
      var $497=$496;
      var $498=HEAP[$497];
      var $499=$498 & -2049;
      HEAP[$497]=$499;
      $1=1;
      __label__ = 81; break;
    case 55: 
      var $501=$2;
      var $502=(($501)&255);
      var $503=(($502)|0)==212;
      if ($503) { __label__ = 56; break; } else { __label__ = 69; break; }
    case 56: 
      var $505=$3;
      var $506=_softx86_fetch_exec_byte($505);
      $x=$506;
      var $507=$3;
      var $508=(($507+4)|0);
      var $509=(($508)|0);
      var $510=(($509)|0);
      var $511=$510;
      var $512=(($511)|0);
      var $513=HEAP[$512];
      $al7=$513;
      var $514=$x;
      var $515=(($514)&255);
      var $516=(($515)|0)==0;
      if ($516) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      __label__ = 59; break;
    case 58: 
      var $519=$al7;
      var $520=(($519)&255);
      var $521=$x;
      var $522=(($521)&255);
      var $523=(($520)|0)%(($522)|0);
      var $524=(($523) & 255);
      $al7=$524;
      var $525=$al7;
      var $526=(($525)&255);
      var $527=$x;
      var $528=(($527)&255);
      var $529=(((($526)|0)/(($528)|0))|0);
      var $530=(($529) & 255);
      $ah6=$530;
      __label__ = 59; break;
    case 59: 
      var $532=$ah6;
      var $533=$3;
      var $534=(($533+4)|0);
      var $535=(($534)|0);
      var $536=(($535)|0);
      var $537=$536;
      var $538=(($537+1)|0);
      HEAP[$538]=$532;
      var $539=$al7;
      var $540=$3;
      var $541=(($540+4)|0);
      var $542=(($541)|0);
      var $543=(($542)|0);
      var $544=$543;
      var $545=(($544)|0);
      HEAP[$545]=$539;
      var $546=$al7;
      var $547=(($546)&255);
      var $548=$547 & 128;
      var $549=(($548)|0)!=0;
      if ($549) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      var $551=$3;
      var $552=(($551+4)|0);
      var $553=(($552+96)|0);
      var $554=$553;
      var $555=HEAP[$554];
      var $556=$555 | 128;
      HEAP[$554]=$556;
      __label__ = 62; break;
    case 61: 
      var $558=$3;
      var $559=(($558+4)|0);
      var $560=(($559+96)|0);
      var $561=$560;
      var $562=HEAP[$561];
      var $563=$562 & -129;
      HEAP[$561]=$563;
      __label__ = 62; break;
    case 62: 
      var $565=$al7;
      var $566=(($565 << 24) >> 24)!=0;
      if ($566) { __label__ = 64; break; } else { __label__ = 63; break; }
    case 63: 
      var $568=$3;
      var $569=(($568+4)|0);
      var $570=(($569+96)|0);
      var $571=$570;
      var $572=HEAP[$571];
      var $573=$572 | 64;
      HEAP[$571]=$573;
      __label__ = 65; break;
    case 64: 
      var $575=$3;
      var $576=(($575+4)|0);
      var $577=(($576+96)|0);
      var $578=$577;
      var $579=HEAP[$578];
      var $580=$579 & -65;
      HEAP[$578]=$580;
      __label__ = 65; break;
    case 65: 
      var $582=$al7;
      var $583=_softx86_parity8($582);
      var $584=(($583)|0)!=0;
      if ($584) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $586=$3;
      var $587=(($586+4)|0);
      var $588=(($587+96)|0);
      var $589=$588;
      var $590=HEAP[$589];
      var $591=$590 | 4;
      HEAP[$589]=$591;
      __label__ = 68; break;
    case 67: 
      var $593=$3;
      var $594=(($593+4)|0);
      var $595=(($594+96)|0);
      var $596=$595;
      var $597=HEAP[$596];
      var $598=$597 & -5;
      HEAP[$596]=$598;
      __label__ = 68; break;
    case 68: 
      var $600=$3;
      var $601=(($600+4)|0);
      var $602=(($601+96)|0);
      var $603=$602;
      var $604=HEAP[$603];
      var $605=$604 & -2049;
      HEAP[$603]=$605;
      var $606=$3;
      var $607=(($606+4)|0);
      var $608=(($607+96)|0);
      var $609=$608;
      var $610=HEAP[$609];
      var $611=$610 & -17;
      HEAP[$609]=$611;
      var $612=$3;
      var $613=(($612+4)|0);
      var $614=(($613+96)|0);
      var $615=$614;
      var $616=HEAP[$615];
      var $617=$616 & -2;
      HEAP[$615]=$617;
      $1=1;
      __label__ = 81; break;
    case 69: 
      var $619=$2;
      var $620=(($619)&255);
      var $621=(($620)|0)==213;
      if ($621) { __label__ = 70; break; } else { __label__ = 80; break; }
    case 70: 
      var $623=$3;
      var $624=_softx86_fetch_exec_byte($623);
      $x10=$624;
      var $625=$3;
      var $626=(($625+4)|0);
      var $627=(($626)|0);
      var $628=(($627)|0);
      var $629=$628;
      var $630=(($629)|0);
      var $631=HEAP[$630];
      $al9=$631;
      var $632=$3;
      var $633=(($632+4)|0);
      var $634=(($633)|0);
      var $635=(($634)|0);
      var $636=$635;
      var $637=(($636+1)|0);
      var $638=HEAP[$637];
      $ah8=$638;
      var $639=$al9;
      var $640=(($639)&255);
      var $641=$ah8;
      var $642=(($641)&255);
      var $643=$x10;
      var $644=(($643)&255);
      var $645=(($642*$644)|0);
      var $646=(($640+$645)|0);
      var $647=$646 & 255;
      var $648=(($647) & 255);
      $al9=$648;
      $ah8=0;
      var $649=$ah8;
      var $650=$3;
      var $651=(($650+4)|0);
      var $652=(($651)|0);
      var $653=(($652)|0);
      var $654=$653;
      var $655=(($654+1)|0);
      HEAP[$655]=$649;
      var $656=$al9;
      var $657=$3;
      var $658=(($657+4)|0);
      var $659=(($658)|0);
      var $660=(($659)|0);
      var $661=$660;
      var $662=(($661)|0);
      HEAP[$662]=$656;
      var $663=$al9;
      var $664=(($663)&255);
      var $665=$664 & 128;
      var $666=(($665)|0)!=0;
      if ($666) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $668=$3;
      var $669=(($668+4)|0);
      var $670=(($669+96)|0);
      var $671=$670;
      var $672=HEAP[$671];
      var $673=$672 | 128;
      HEAP[$671]=$673;
      __label__ = 73; break;
    case 72: 
      var $675=$3;
      var $676=(($675+4)|0);
      var $677=(($676+96)|0);
      var $678=$677;
      var $679=HEAP[$678];
      var $680=$679 & -129;
      HEAP[$678]=$680;
      __label__ = 73; break;
    case 73: 
      var $682=$al9;
      var $683=(($682 << 24) >> 24)!=0;
      if ($683) { __label__ = 75; break; } else { __label__ = 74; break; }
    case 74: 
      var $685=$3;
      var $686=(($685+4)|0);
      var $687=(($686+96)|0);
      var $688=$687;
      var $689=HEAP[$688];
      var $690=$689 | 64;
      HEAP[$688]=$690;
      __label__ = 76; break;
    case 75: 
      var $692=$3;
      var $693=(($692+4)|0);
      var $694=(($693+96)|0);
      var $695=$694;
      var $696=HEAP[$695];
      var $697=$696 & -65;
      HEAP[$695]=$697;
      __label__ = 76; break;
    case 76: 
      var $699=$al9;
      var $700=_softx86_parity8($699);
      var $701=(($700)|0)!=0;
      if ($701) { __label__ = 77; break; } else { __label__ = 78; break; }
    case 77: 
      var $703=$3;
      var $704=(($703+4)|0);
      var $705=(($704+96)|0);
      var $706=$705;
      var $707=HEAP[$706];
      var $708=$707 | 4;
      HEAP[$706]=$708;
      __label__ = 79; break;
    case 78: 
      var $710=$3;
      var $711=(($710+4)|0);
      var $712=(($711+96)|0);
      var $713=$712;
      var $714=HEAP[$713];
      var $715=$714 & -5;
      HEAP[$713]=$715;
      __label__ = 79; break;
    case 79: 
      var $717=$3;
      var $718=(($717+4)|0);
      var $719=(($718+96)|0);
      var $720=$719;
      var $721=HEAP[$720];
      var $722=$721 & -2049;
      HEAP[$720]=$722;
      var $723=$3;
      var $724=(($723+4)|0);
      var $725=(($724+96)|0);
      var $726=$725;
      var $727=HEAP[$726];
      var $728=$727 & -17;
      HEAP[$726]=$728;
      var $729=$3;
      var $730=(($729+4)|0);
      var $731=(($730+96)|0);
      var $732=$731;
      var $733=HEAP[$732];
      var $734=$733 & -2;
      HEAP[$732]=$734;
      $1=1;
      __label__ = 81; break;
    case 80: 
      $1=0;
      __label__ = 81; break;
    case 81: 
      var $737=$1;
      ;
      return $737;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_aaaseries["X"]=1;

function _Sfx86OpcodeDec_aaaseries($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==39;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$4;
      var $10=_strcpy($9, ((STRING_TABLE.__str)|0));
      $1=1;
      __label__ = 20; break;
    case 3: 
      var $12=$2;
      var $13=(($12)&255);
      var $14=(($13)|0)==47;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$4;
      var $17=_strcpy($16, ((STRING_TABLE.__str1)|0));
      $1=1;
      __label__ = 20; break;
    case 5: 
      var $19=$2;
      var $20=(($19)&255);
      var $21=(($20)|0)==55;
      if ($21) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $23=$4;
      var $24=_strcpy($23, ((STRING_TABLE.__str2)|0));
      $1=1;
      __label__ = 20; break;
    case 7: 
      var $26=$2;
      var $27=(($26)&255);
      var $28=(($27)|0)==63;
      if ($28) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $30=$4;
      var $31=_strcpy($30, ((STRING_TABLE.__str3)|0));
      $1=1;
      __label__ = 20; break;
    case 9: 
      var $33=$2;
      var $34=(($33)&255);
      var $35=(($34)|0)==212;
      if ($35) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: 
      var $37=$3;
      var $38=_softx86_fetch_dec_byte($37);
      $x=$38;
      var $39=$x;
      var $40=(($39)&255);
      var $41=(($40)|0)==10;
      if ($41) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $43=$4;
      var $44=_strcpy($43, ((STRING_TABLE.__str4)|0));
      __label__ = 13; break;
    case 12: 
      var $46=$4;
      var $47=$x;
      var $48=(($47)&255);
      var $49=_sprintf($46, ((STRING_TABLE.__str5)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$48,tempInt));
      __label__ = 13; break;
    case 13: 
      $1=1;
      __label__ = 20; break;
    case 14: 
      var $52=$2;
      var $53=(($52)&255);
      var $54=(($53)|0)==213;
      if ($54) { __label__ = 15; break; } else { __label__ = 19; break; }
    case 15: 
      var $56=$3;
      var $57=_softx86_fetch_dec_byte($56);
      $x=$57;
      var $58=$x;
      var $59=(($58)&255);
      var $60=(($59)|0)==10;
      if ($60) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $62=$4;
      var $63=_strcpy($62, ((STRING_TABLE.__str6)|0));
      __label__ = 18; break;
    case 17: 
      var $65=$4;
      var $66=$x;
      var $67=(($66)&255);
      var $68=_sprintf($65, ((STRING_TABLE.__str7)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$67,tempInt));
      __label__ = 18; break;
    case 18: 
      $1=1;
      __label__ = 20; break;
    case 19: 
      $1=0;
      __label__ = 20; break;
    case 20: 
      var $72=$1;
      ;
      return $72;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_aaaseries["X"]=1;

function _op_add8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$3;
      var $7=(($6)&255);
      var $8=(($5+$7)|0);
      var $9=(($8) & 255);
      $ret=$9;
      var $10=$ret;
      var $11=(($10)&255);
      var $12=$2;
      var $13=(($12)&255);
      var $14=(($11)|0) < (($13)|0);
      if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $16=$1;
      var $17=(($16+4)|0);
      var $18=(($17+96)|0);
      var $19=$18;
      var $20=HEAP[$19];
      var $21=$20 | 2049;
      HEAP[$19]=$21;
      __label__ = 4; break;
    case 3: 
      var $23=$1;
      var $24=(($23+4)|0);
      var $25=(($24+96)|0);
      var $26=$25;
      var $27=HEAP[$26];
      var $28=$27 & -2050;
      HEAP[$26]=$28;
      __label__ = 4; break;
    case 4: 
      var $30=$ret;
      var $31=(($30)&255);
      var $32=$31 & 128;
      var $33=(($32)|0)!=0;
      if ($33) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $35=$1;
      var $36=(($35+4)|0);
      var $37=(($36+96)|0);
      var $38=$37;
      var $39=HEAP[$38];
      var $40=$39 | 128;
      HEAP[$38]=$40;
      __label__ = 7; break;
    case 6: 
      var $42=$1;
      var $43=(($42+4)|0);
      var $44=(($43+96)|0);
      var $45=$44;
      var $46=HEAP[$45];
      var $47=$46 & -129;
      HEAP[$45]=$47;
      __label__ = 7; break;
    case 7: 
      var $49=$ret;
      var $50=(($49 << 24) >> 24)!=0;
      if ($50) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 | 64;
      HEAP[$55]=$57;
      __label__ = 10; break;
    case 9: 
      var $59=$1;
      var $60=(($59+4)|0);
      var $61=(($60+96)|0);
      var $62=$61;
      var $63=HEAP[$62];
      var $64=$63 & -65;
      HEAP[$62]=$64;
      __label__ = 10; break;
    case 10: 
      var $66=$3;
      var $67=(($66)&255);
      var $68=$67 & 15;
      var $69=$2;
      var $70=(($69)&255);
      var $71=$70 & 15;
      var $72=(($68+$71)|0);
      var $73=(($72)|0) >= 16;
      if ($73) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $75=$1;
      var $76=(($75+4)|0);
      var $77=(($76+96)|0);
      var $78=$77;
      var $79=HEAP[$78];
      var $80=$79 | 16;
      HEAP[$78]=$80;
      __label__ = 13; break;
    case 12: 
      var $82=$1;
      var $83=(($82+4)|0);
      var $84=(($83+96)|0);
      var $85=$84;
      var $86=HEAP[$85];
      var $87=$86 & -17;
      HEAP[$85]=$87;
      __label__ = 13; break;
    case 13: 
      var $89=$ret;
      var $90=_softx86_parity8($89);
      var $91=(($90)|0)!=0;
      if ($91) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $93=$1;
      var $94=(($93+4)|0);
      var $95=(($94+96)|0);
      var $96=$95;
      var $97=HEAP[$96];
      var $98=$97 | 4;
      HEAP[$96]=$98;
      __label__ = 16; break;
    case 15: 
      var $100=$1;
      var $101=(($100+4)|0);
      var $102=(($101+96)|0);
      var $103=$102;
      var $104=HEAP[$103];
      var $105=$104 & -5;
      HEAP[$103]=$105;
      __label__ = 16; break;
    case 16: 
      var $107=$ret;
      ;
      return $107;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_add8["X"]=1;

function _op_add16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=(($4)&65535);
      var $6=$3;
      var $7=(($6)&65535);
      var $8=(($5+$7)|0);
      var $9=(($8) & 65535);
      $ret=$9;
      var $10=$ret;
      var $11=(($10)&65535);
      var $12=$2;
      var $13=(($12)&65535);
      var $14=(($11)|0) < (($13)|0);
      if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $16=$1;
      var $17=(($16+4)|0);
      var $18=(($17+96)|0);
      var $19=$18;
      var $20=HEAP[$19];
      var $21=$20 | 2049;
      HEAP[$19]=$21;
      __label__ = 4; break;
    case 3: 
      var $23=$1;
      var $24=(($23+4)|0);
      var $25=(($24+96)|0);
      var $26=$25;
      var $27=HEAP[$26];
      var $28=$27 & -2050;
      HEAP[$26]=$28;
      __label__ = 4; break;
    case 4: 
      var $30=$ret;
      var $31=(($30)&65535);
      var $32=$31 & 32768;
      var $33=(($32)|0)!=0;
      if ($33) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $35=$1;
      var $36=(($35+4)|0);
      var $37=(($36+96)|0);
      var $38=$37;
      var $39=HEAP[$38];
      var $40=$39 | 128;
      HEAP[$38]=$40;
      __label__ = 7; break;
    case 6: 
      var $42=$1;
      var $43=(($42+4)|0);
      var $44=(($43+96)|0);
      var $45=$44;
      var $46=HEAP[$45];
      var $47=$46 & -129;
      HEAP[$45]=$47;
      __label__ = 7; break;
    case 7: 
      var $49=$ret;
      var $50=(($49 << 16) >> 16)!=0;
      if ($50) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 | 64;
      HEAP[$55]=$57;
      __label__ = 10; break;
    case 9: 
      var $59=$1;
      var $60=(($59+4)|0);
      var $61=(($60+96)|0);
      var $62=$61;
      var $63=HEAP[$62];
      var $64=$63 & -65;
      HEAP[$62]=$64;
      __label__ = 10; break;
    case 10: 
      var $66=$3;
      var $67=(($66)&65535);
      var $68=$67 & 15;
      var $69=$2;
      var $70=(($69)&65535);
      var $71=$70 & 15;
      var $72=(($68+$71)|0);
      var $73=(($72)|0) >= 16;
      if ($73) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $75=$1;
      var $76=(($75+4)|0);
      var $77=(($76+96)|0);
      var $78=$77;
      var $79=HEAP[$78];
      var $80=$79 | 16;
      HEAP[$78]=$80;
      __label__ = 13; break;
    case 12: 
      var $82=$1;
      var $83=(($82+4)|0);
      var $84=(($83+96)|0);
      var $85=$84;
      var $86=HEAP[$85];
      var $87=$86 & -17;
      HEAP[$85]=$87;
      __label__ = 13; break;
    case 13: 
      var $89=$ret;
      var $90=_softx86_parity16($89);
      var $91=(($90)|0)!=0;
      if ($91) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $93=$1;
      var $94=(($93+4)|0);
      var $95=(($94+96)|0);
      var $96=$95;
      var $97=HEAP[$96];
      var $98=$97 | 4;
      HEAP[$96]=$98;
      __label__ = 16; break;
    case 15: 
      var $100=$1;
      var $101=(($100+4)|0);
      var $102=(($101+96)|0);
      var $103=$102;
      var $104=HEAP[$103];
      var $105=$104 & -5;
      HEAP[$103]=$105;
      __label__ = 16; break;
    case 16: 
      var $107=$ret;
      ;
      return $107;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_add16["X"]=1;

function _op_add32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=$3;
      var $6=(($4+$5)|0);
      $ret=$6;
      var $7=$ret;
      var $8=$2;
      var $9=(($7)>>>0) < (($8)>>>0);
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$1;
      var $12=(($11+4)|0);
      var $13=(($12+96)|0);
      var $14=$13;
      var $15=HEAP[$14];
      var $16=$15 | 2049;
      HEAP[$14]=$16;
      __label__ = 4; break;
    case 3: 
      var $18=$1;
      var $19=(($18+4)|0);
      var $20=(($19+96)|0);
      var $21=$20;
      var $22=HEAP[$21];
      var $23=$22 & -2050;
      HEAP[$21]=$23;
      __label__ = 4; break;
    case 4: 
      var $25=$ret;
      var $26=$25 & -2147483648;
      var $27=(($26)|0)!=0;
      if ($27) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $29=$1;
      var $30=(($29+4)|0);
      var $31=(($30+96)|0);
      var $32=$31;
      var $33=HEAP[$32];
      var $34=$33 | 128;
      HEAP[$32]=$34;
      __label__ = 7; break;
    case 6: 
      var $36=$1;
      var $37=(($36+4)|0);
      var $38=(($37+96)|0);
      var $39=$38;
      var $40=HEAP[$39];
      var $41=$40 & -129;
      HEAP[$39]=$41;
      __label__ = 7; break;
    case 7: 
      var $43=$ret;
      var $44=(($43)|0)!=0;
      if ($44) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $46=$1;
      var $47=(($46+4)|0);
      var $48=(($47+96)|0);
      var $49=$48;
      var $50=HEAP[$49];
      var $51=$50 | 64;
      HEAP[$49]=$51;
      __label__ = 10; break;
    case 9: 
      var $53=$1;
      var $54=(($53+4)|0);
      var $55=(($54+96)|0);
      var $56=$55;
      var $57=HEAP[$56];
      var $58=$57 & -65;
      HEAP[$56]=$58;
      __label__ = 10; break;
    case 10: 
      var $60=$3;
      var $61=$60 & 15;
      var $62=$2;
      var $63=$62 & 15;
      var $64=(($61+$63)|0);
      var $65=(($64)>>>0) >= 16;
      if ($65) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $67=$1;
      var $68=(($67+4)|0);
      var $69=(($68+96)|0);
      var $70=$69;
      var $71=HEAP[$70];
      var $72=$71 | 16;
      HEAP[$70]=$72;
      __label__ = 13; break;
    case 12: 
      var $74=$1;
      var $75=(($74+4)|0);
      var $76=(($75+96)|0);
      var $77=$76;
      var $78=HEAP[$77];
      var $79=$78 & -17;
      HEAP[$77]=$79;
      __label__ = 13; break;
    case 13: 
      var $81=$ret;
      var $82=(($81) & 65535);
      var $83=_softx86_parity16($82);
      var $84=(($83)|0)!=0;
      if ($84) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $86=$1;
      var $87=(($86+4)|0);
      var $88=(($87+96)|0);
      var $89=$88;
      var $90=HEAP[$89];
      var $91=$90 | 4;
      HEAP[$89]=$91;
      __label__ = 16; break;
    case 15: 
      var $93=$1;
      var $94=(($93+4)|0);
      var $95=(($94+96)|0);
      var $96=$95;
      var $97=HEAP[$96];
      var $98=$97 & -5;
      HEAP[$96]=$98;
      __label__ = 16; break;
    case 16: 
      var $100=$ret;
      ;
      return $100;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_add32["X"]=1;

function _op_adc8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      var $carry;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$1;
      var $5=(($4+4)|0);
      var $6=(($5+96)|0);
      var $7=$6;
      var $8=HEAP[$7];
      var $9=$8 & 1;
      var $10=(($9) & 255);
      var $11=(($10)&255);
      var $12=(($11)|0)!=0;
      var $13=$12 ? 1 : 0;
      var $14=(($13) & 255);
      $carry=$14;
      var $15=$carry;
      var $16=(($15)&255);
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $19=$3;
      var $20=(($19)&255);
      var $21=(($20)|0)==255;
      if ($21) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $23=$3;
      $ret=$23;
      var $24=$1;
      var $25=(($24+4)|0);
      var $26=(($25+96)|0);
      var $27=$26;
      var $28=HEAP[$27];
      var $29=$28 | 2049;
      HEAP[$27]=$29;
      __label__ = 8; break;
    case 4: 
      var $31=$2;
      var $32=(($31)&255);
      var $33=$3;
      var $34=(($33)&255);
      var $35=(($32+$34)|0);
      var $36=$carry;
      var $37=(($36)&255);
      var $38=(($35+$37)|0);
      var $39=(($38) & 255);
      $ret=$39;
      var $40=$ret;
      var $41=(($40)&255);
      var $42=$2;
      var $43=(($42)&255);
      var $44=(($41)|0) < (($43)|0);
      if ($44) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $46=$1;
      var $47=(($46+4)|0);
      var $48=(($47+96)|0);
      var $49=$48;
      var $50=HEAP[$49];
      var $51=$50 | 2049;
      HEAP[$49]=$51;
      __label__ = 7; break;
    case 6: 
      var $53=$1;
      var $54=(($53+4)|0);
      var $55=(($54+96)|0);
      var $56=$55;
      var $57=HEAP[$56];
      var $58=$57 & -2050;
      HEAP[$56]=$58;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $61=$ret;
      var $62=(($61)&255);
      var $63=$62 & 128;
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $66=$1;
      var $67=(($66+4)|0);
      var $68=(($67+96)|0);
      var $69=$68;
      var $70=HEAP[$69];
      var $71=$70 | 128;
      HEAP[$69]=$71;
      __label__ = 11; break;
    case 10: 
      var $73=$1;
      var $74=(($73+4)|0);
      var $75=(($74+96)|0);
      var $76=$75;
      var $77=HEAP[$76];
      var $78=$77 & -129;
      HEAP[$76]=$78;
      __label__ = 11; break;
    case 11: 
      var $80=$ret;
      var $81=(($80 << 24) >> 24)!=0;
      if ($81) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $83=$1;
      var $84=(($83+4)|0);
      var $85=(($84+96)|0);
      var $86=$85;
      var $87=HEAP[$86];
      var $88=$87 | 64;
      HEAP[$86]=$88;
      __label__ = 14; break;
    case 13: 
      var $90=$1;
      var $91=(($90+4)|0);
      var $92=(($91+96)|0);
      var $93=$92;
      var $94=HEAP[$93];
      var $95=$94 & -65;
      HEAP[$93]=$95;
      __label__ = 14; break;
    case 14: 
      var $97=$3;
      var $98=(($97)&255);
      var $99=$98 & 15;
      var $100=$2;
      var $101=(($100)&255);
      var $102=$101 & 15;
      var $103=(($99+$102)|0);
      var $104=(($103)|0) >= 16;
      if ($104) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $106=$1;
      var $107=(($106+4)|0);
      var $108=(($107+96)|0);
      var $109=$108;
      var $110=HEAP[$109];
      var $111=$110 | 16;
      HEAP[$109]=$111;
      __label__ = 17; break;
    case 16: 
      var $113=$1;
      var $114=(($113+4)|0);
      var $115=(($114+96)|0);
      var $116=$115;
      var $117=HEAP[$116];
      var $118=$117 & -17;
      HEAP[$116]=$118;
      __label__ = 17; break;
    case 17: 
      var $120=$ret;
      var $121=_softx86_parity8($120);
      var $122=(($121)|0)!=0;
      if ($122) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $124=$1;
      var $125=(($124+4)|0);
      var $126=(($125+96)|0);
      var $127=$126;
      var $128=HEAP[$127];
      var $129=$128 | 4;
      HEAP[$127]=$129;
      __label__ = 20; break;
    case 19: 
      var $131=$1;
      var $132=(($131+4)|0);
      var $133=(($132+96)|0);
      var $134=$133;
      var $135=HEAP[$134];
      var $136=$135 & -5;
      HEAP[$134]=$136;
      __label__ = 20; break;
    case 20: 
      var $138=$ret;
      ;
      return $138;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_adc8["X"]=1;

function _op_adc16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      var $carry;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$1;
      var $5=(($4+4)|0);
      var $6=(($5+96)|0);
      var $7=$6;
      var $8=HEAP[$7];
      var $9=$8 & 1;
      var $10=(($9) & 255);
      var $11=(($10)&255);
      var $12=(($11)|0)!=0;
      var $13=$12 ? 1 : 0;
      var $14=(($13) & 65535);
      $carry=$14;
      var $15=$carry;
      var $16=(($15)&65535);
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $19=$3;
      var $20=(($19)&65535);
      var $21=(($20)|0)==65535;
      if ($21) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $23=$3;
      $ret=$23;
      var $24=$1;
      var $25=(($24+4)|0);
      var $26=(($25+96)|0);
      var $27=$26;
      var $28=HEAP[$27];
      var $29=$28 | 2049;
      HEAP[$27]=$29;
      __label__ = 8; break;
    case 4: 
      var $31=$2;
      var $32=(($31)&65535);
      var $33=$3;
      var $34=(($33)&65535);
      var $35=(($32+$34)|0);
      var $36=$carry;
      var $37=(($36)&65535);
      var $38=(($35+$37)|0);
      var $39=(($38) & 65535);
      $ret=$39;
      var $40=$ret;
      var $41=(($40)&65535);
      var $42=$2;
      var $43=(($42)&65535);
      var $44=(($41)|0) < (($43)|0);
      if ($44) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $46=$1;
      var $47=(($46+4)|0);
      var $48=(($47+96)|0);
      var $49=$48;
      var $50=HEAP[$49];
      var $51=$50 | 2049;
      HEAP[$49]=$51;
      __label__ = 7; break;
    case 6: 
      var $53=$1;
      var $54=(($53+4)|0);
      var $55=(($54+96)|0);
      var $56=$55;
      var $57=HEAP[$56];
      var $58=$57 & -2050;
      HEAP[$56]=$58;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $61=$ret;
      var $62=(($61)&65535);
      var $63=$62 & 32768;
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $66=$1;
      var $67=(($66+4)|0);
      var $68=(($67+96)|0);
      var $69=$68;
      var $70=HEAP[$69];
      var $71=$70 | 128;
      HEAP[$69]=$71;
      __label__ = 11; break;
    case 10: 
      var $73=$1;
      var $74=(($73+4)|0);
      var $75=(($74+96)|0);
      var $76=$75;
      var $77=HEAP[$76];
      var $78=$77 & -129;
      HEAP[$76]=$78;
      __label__ = 11; break;
    case 11: 
      var $80=$ret;
      var $81=(($80 << 16) >> 16)!=0;
      if ($81) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $83=$1;
      var $84=(($83+4)|0);
      var $85=(($84+96)|0);
      var $86=$85;
      var $87=HEAP[$86];
      var $88=$87 | 64;
      HEAP[$86]=$88;
      __label__ = 14; break;
    case 13: 
      var $90=$1;
      var $91=(($90+4)|0);
      var $92=(($91+96)|0);
      var $93=$92;
      var $94=HEAP[$93];
      var $95=$94 & -65;
      HEAP[$93]=$95;
      __label__ = 14; break;
    case 14: 
      var $97=$3;
      var $98=(($97)&65535);
      var $99=$98 & 15;
      var $100=$2;
      var $101=(($100)&65535);
      var $102=$101 & 15;
      var $103=(($99+$102)|0);
      var $104=(($103)|0) >= 16;
      if ($104) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $106=$1;
      var $107=(($106+4)|0);
      var $108=(($107+96)|0);
      var $109=$108;
      var $110=HEAP[$109];
      var $111=$110 | 16;
      HEAP[$109]=$111;
      __label__ = 17; break;
    case 16: 
      var $113=$1;
      var $114=(($113+4)|0);
      var $115=(($114+96)|0);
      var $116=$115;
      var $117=HEAP[$116];
      var $118=$117 & -17;
      HEAP[$116]=$118;
      __label__ = 17; break;
    case 17: 
      var $120=$ret;
      var $121=_softx86_parity16($120);
      var $122=(($121)|0)!=0;
      if ($122) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $124=$1;
      var $125=(($124+4)|0);
      var $126=(($125+96)|0);
      var $127=$126;
      var $128=HEAP[$127];
      var $129=$128 | 4;
      HEAP[$127]=$129;
      __label__ = 20; break;
    case 19: 
      var $131=$1;
      var $132=(($131+4)|0);
      var $133=(($132+96)|0);
      var $134=$133;
      var $135=HEAP[$134];
      var $136=$135 & -5;
      HEAP[$134]=$136;
      __label__ = 20; break;
    case 20: 
      var $138=$ret;
      ;
      return $138;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_adc16["X"]=1;

function _op_adc32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      var $carry;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$1;
      var $5=(($4+4)|0);
      var $6=(($5+96)|0);
      var $7=$6;
      var $8=HEAP[$7];
      var $9=$8 & 1;
      var $10=(($9) & 255);
      var $11=(($10)&255);
      var $12=(($11)|0)!=0;
      var $13=$12 ? 1 : 0;
      $carry=$13;
      var $14=$carry;
      var $15=(($14)|0)!=0;
      if ($15) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $17=$3;
      var $18=(($17)|0)==-1;
      if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $20=$3;
      $ret=$20;
      var $21=$1;
      var $22=(($21+4)|0);
      var $23=(($22+96)|0);
      var $24=$23;
      var $25=HEAP[$24];
      var $26=$25 | 2049;
      HEAP[$24]=$26;
      __label__ = 8; break;
    case 4: 
      var $28=$2;
      var $29=$3;
      var $30=(($28+$29)|0);
      var $31=$carry;
      var $32=(($30+$31)|0);
      $ret=$32;
      var $33=$ret;
      var $34=$2;
      var $35=(($33)>>>0) < (($34)>>>0);
      if ($35) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $37=$1;
      var $38=(($37+4)|0);
      var $39=(($38+96)|0);
      var $40=$39;
      var $41=HEAP[$40];
      var $42=$41 | 2049;
      HEAP[$40]=$42;
      __label__ = 7; break;
    case 6: 
      var $44=$1;
      var $45=(($44+4)|0);
      var $46=(($45+96)|0);
      var $47=$46;
      var $48=HEAP[$47];
      var $49=$48 & -2050;
      HEAP[$47]=$49;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $52=$ret;
      var $53=$52 & -2147483648;
      var $54=(($53)|0)!=0;
      if ($54) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $56=$1;
      var $57=(($56+4)|0);
      var $58=(($57+96)|0);
      var $59=$58;
      var $60=HEAP[$59];
      var $61=$60 | 128;
      HEAP[$59]=$61;
      __label__ = 11; break;
    case 10: 
      var $63=$1;
      var $64=(($63+4)|0);
      var $65=(($64+96)|0);
      var $66=$65;
      var $67=HEAP[$66];
      var $68=$67 & -129;
      HEAP[$66]=$68;
      __label__ = 11; break;
    case 11: 
      var $70=$ret;
      var $71=(($70)|0)!=0;
      if ($71) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $73=$1;
      var $74=(($73+4)|0);
      var $75=(($74+96)|0);
      var $76=$75;
      var $77=HEAP[$76];
      var $78=$77 | 64;
      HEAP[$76]=$78;
      __label__ = 14; break;
    case 13: 
      var $80=$1;
      var $81=(($80+4)|0);
      var $82=(($81+96)|0);
      var $83=$82;
      var $84=HEAP[$83];
      var $85=$84 & -65;
      HEAP[$83]=$85;
      __label__ = 14; break;
    case 14: 
      var $87=$3;
      var $88=$87 & 15;
      var $89=$2;
      var $90=$89 & 15;
      var $91=(($88+$90)|0);
      var $92=(($91)>>>0) >= 16;
      if ($92) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $94=$1;
      var $95=(($94+4)|0);
      var $96=(($95+96)|0);
      var $97=$96;
      var $98=HEAP[$97];
      var $99=$98 | 16;
      HEAP[$97]=$99;
      __label__ = 17; break;
    case 16: 
      var $101=$1;
      var $102=(($101+4)|0);
      var $103=(($102+96)|0);
      var $104=$103;
      var $105=HEAP[$104];
      var $106=$105 & -17;
      HEAP[$104]=$106;
      __label__ = 17; break;
    case 17: 
      var $108=$ret;
      var $109=(($108) & 255);
      var $110=_softx86_parity8($109);
      var $111=(($110)|0)!=0;
      if ($111) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $113=$1;
      var $114=(($113+4)|0);
      var $115=(($114+96)|0);
      var $116=$115;
      var $117=HEAP[$116];
      var $118=$117 | 4;
      HEAP[$116]=$118;
      __label__ = 20; break;
    case 19: 
      var $120=$1;
      var $121=(($120+4)|0);
      var $122=(($121+96)|0);
      var $123=$122;
      var $124=HEAP[$123];
      var $125=$124 & -5;
      HEAP[$123]=$125;
      __label__ = 20; break;
    case 20: 
      var $127=$ret;
      ;
      return $127;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_adc32["X"]=1;

function _op_sub8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$3;
      var $7=(($6)&255);
      var $8=(($5-$7)|0);
      var $9=(($8) & 255);
      $ret=$9;
      var $10=$ret;
      var $11=(($10)&255);
      var $12=$2;
      var $13=(($12)&255);
      var $14=(($11)|0) > (($13)|0);
      if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $16=$1;
      var $17=(($16+4)|0);
      var $18=(($17+96)|0);
      var $19=$18;
      var $20=HEAP[$19];
      var $21=$20 | 2049;
      HEAP[$19]=$21;
      __label__ = 4; break;
    case 3: 
      var $23=$1;
      var $24=(($23+4)|0);
      var $25=(($24+96)|0);
      var $26=$25;
      var $27=HEAP[$26];
      var $28=$27 & -2050;
      HEAP[$26]=$28;
      __label__ = 4; break;
    case 4: 
      var $30=$ret;
      var $31=(($30)&255);
      var $32=$31 & 128;
      var $33=(($32)|0)!=0;
      if ($33) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $35=$1;
      var $36=(($35+4)|0);
      var $37=(($36+96)|0);
      var $38=$37;
      var $39=HEAP[$38];
      var $40=$39 | 128;
      HEAP[$38]=$40;
      __label__ = 7; break;
    case 6: 
      var $42=$1;
      var $43=(($42+4)|0);
      var $44=(($43+96)|0);
      var $45=$44;
      var $46=HEAP[$45];
      var $47=$46 & -129;
      HEAP[$45]=$47;
      __label__ = 7; break;
    case 7: 
      var $49=$ret;
      var $50=(($49 << 24) >> 24)!=0;
      if ($50) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 | 64;
      HEAP[$55]=$57;
      __label__ = 10; break;
    case 9: 
      var $59=$1;
      var $60=(($59+4)|0);
      var $61=(($60+96)|0);
      var $62=$61;
      var $63=HEAP[$62];
      var $64=$63 & -65;
      HEAP[$62]=$64;
      __label__ = 10; break;
    case 10: 
      var $66=$3;
      var $67=(($66)&255);
      var $68=$67 & 15;
      var $69=$2;
      var $70=(($69)&255);
      var $71=$70 & 15;
      var $72=(($68)|0) > (($71)|0);
      if ($72) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $74=$1;
      var $75=(($74+4)|0);
      var $76=(($75+96)|0);
      var $77=$76;
      var $78=HEAP[$77];
      var $79=$78 | 16;
      HEAP[$77]=$79;
      __label__ = 13; break;
    case 12: 
      var $81=$1;
      var $82=(($81+4)|0);
      var $83=(($82+96)|0);
      var $84=$83;
      var $85=HEAP[$84];
      var $86=$85 & -17;
      HEAP[$84]=$86;
      __label__ = 13; break;
    case 13: 
      var $88=$ret;
      var $89=_softx86_parity8($88);
      var $90=(($89)|0)!=0;
      if ($90) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $92=$1;
      var $93=(($92+4)|0);
      var $94=(($93+96)|0);
      var $95=$94;
      var $96=HEAP[$95];
      var $97=$96 | 4;
      HEAP[$95]=$97;
      __label__ = 16; break;
    case 15: 
      var $99=$1;
      var $100=(($99+4)|0);
      var $101=(($100+96)|0);
      var $102=$101;
      var $103=HEAP[$102];
      var $104=$103 & -5;
      HEAP[$102]=$104;
      __label__ = 16; break;
    case 16: 
      var $106=$ret;
      ;
      return $106;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_sub8["X"]=1;

function _op_sub16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=(($4)&65535);
      var $6=$3;
      var $7=(($6)&65535);
      var $8=(($5-$7)|0);
      var $9=(($8) & 65535);
      $ret=$9;
      var $10=$ret;
      var $11=(($10)&65535);
      var $12=$2;
      var $13=(($12)&65535);
      var $14=(($11)|0) > (($13)|0);
      if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $16=$1;
      var $17=(($16+4)|0);
      var $18=(($17+96)|0);
      var $19=$18;
      var $20=HEAP[$19];
      var $21=$20 | 2049;
      HEAP[$19]=$21;
      __label__ = 4; break;
    case 3: 
      var $23=$1;
      var $24=(($23+4)|0);
      var $25=(($24+96)|0);
      var $26=$25;
      var $27=HEAP[$26];
      var $28=$27 & -2050;
      HEAP[$26]=$28;
      __label__ = 4; break;
    case 4: 
      var $30=$ret;
      var $31=(($30)&65535);
      var $32=$31 & 32768;
      var $33=(($32)|0)!=0;
      if ($33) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $35=$1;
      var $36=(($35+4)|0);
      var $37=(($36+96)|0);
      var $38=$37;
      var $39=HEAP[$38];
      var $40=$39 | 128;
      HEAP[$38]=$40;
      __label__ = 7; break;
    case 6: 
      var $42=$1;
      var $43=(($42+4)|0);
      var $44=(($43+96)|0);
      var $45=$44;
      var $46=HEAP[$45];
      var $47=$46 & -129;
      HEAP[$45]=$47;
      __label__ = 7; break;
    case 7: 
      var $49=$ret;
      var $50=(($49 << 16) >> 16)!=0;
      if ($50) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 | 64;
      HEAP[$55]=$57;
      __label__ = 10; break;
    case 9: 
      var $59=$1;
      var $60=(($59+4)|0);
      var $61=(($60+96)|0);
      var $62=$61;
      var $63=HEAP[$62];
      var $64=$63 & -65;
      HEAP[$62]=$64;
      __label__ = 10; break;
    case 10: 
      var $66=$3;
      var $67=(($66)&65535);
      var $68=$67 & 15;
      var $69=$2;
      var $70=(($69)&65535);
      var $71=$70 & 15;
      var $72=(($68)|0) > (($71)|0);
      if ($72) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $74=$1;
      var $75=(($74+4)|0);
      var $76=(($75+96)|0);
      var $77=$76;
      var $78=HEAP[$77];
      var $79=$78 | 16;
      HEAP[$77]=$79;
      __label__ = 13; break;
    case 12: 
      var $81=$1;
      var $82=(($81+4)|0);
      var $83=(($82+96)|0);
      var $84=$83;
      var $85=HEAP[$84];
      var $86=$85 & -17;
      HEAP[$84]=$86;
      __label__ = 13; break;
    case 13: 
      var $88=$ret;
      var $89=_softx86_parity16($88);
      var $90=(($89)|0)!=0;
      if ($90) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $92=$1;
      var $93=(($92+4)|0);
      var $94=(($93+96)|0);
      var $95=$94;
      var $96=HEAP[$95];
      var $97=$96 | 4;
      HEAP[$95]=$97;
      __label__ = 16; break;
    case 15: 
      var $99=$1;
      var $100=(($99+4)|0);
      var $101=(($100+96)|0);
      var $102=$101;
      var $103=HEAP[$102];
      var $104=$103 & -5;
      HEAP[$102]=$104;
      __label__ = 16; break;
    case 16: 
      var $106=$ret;
      ;
      return $106;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_sub16["X"]=1;

function _op_sub32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=$3;
      var $6=(($4-$5)|0);
      $ret=$6;
      var $7=$ret;
      var $8=$2;
      var $9=(($7)>>>0) > (($8)>>>0);
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$1;
      var $12=(($11+4)|0);
      var $13=(($12+96)|0);
      var $14=$13;
      var $15=HEAP[$14];
      var $16=$15 | 2049;
      HEAP[$14]=$16;
      __label__ = 4; break;
    case 3: 
      var $18=$1;
      var $19=(($18+4)|0);
      var $20=(($19+96)|0);
      var $21=$20;
      var $22=HEAP[$21];
      var $23=$22 & -2050;
      HEAP[$21]=$23;
      __label__ = 4; break;
    case 4: 
      var $25=$ret;
      var $26=$25 & -2147483648;
      var $27=(($26)|0)!=0;
      if ($27) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $29=$1;
      var $30=(($29+4)|0);
      var $31=(($30+96)|0);
      var $32=$31;
      var $33=HEAP[$32];
      var $34=$33 | 128;
      HEAP[$32]=$34;
      __label__ = 7; break;
    case 6: 
      var $36=$1;
      var $37=(($36+4)|0);
      var $38=(($37+96)|0);
      var $39=$38;
      var $40=HEAP[$39];
      var $41=$40 & -129;
      HEAP[$39]=$41;
      __label__ = 7; break;
    case 7: 
      var $43=$ret;
      var $44=(($43)|0)!=0;
      if ($44) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $46=$1;
      var $47=(($46+4)|0);
      var $48=(($47+96)|0);
      var $49=$48;
      var $50=HEAP[$49];
      var $51=$50 | 64;
      HEAP[$49]=$51;
      __label__ = 10; break;
    case 9: 
      var $53=$1;
      var $54=(($53+4)|0);
      var $55=(($54+96)|0);
      var $56=$55;
      var $57=HEAP[$56];
      var $58=$57 & -65;
      HEAP[$56]=$58;
      __label__ = 10; break;
    case 10: 
      var $60=$3;
      var $61=$60 & 15;
      var $62=$2;
      var $63=$62 & 15;
      var $64=(($61)>>>0) > (($63)>>>0);
      if ($64) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $66=$1;
      var $67=(($66+4)|0);
      var $68=(($67+96)|0);
      var $69=$68;
      var $70=HEAP[$69];
      var $71=$70 | 16;
      HEAP[$69]=$71;
      __label__ = 13; break;
    case 12: 
      var $73=$1;
      var $74=(($73+4)|0);
      var $75=(($74+96)|0);
      var $76=$75;
      var $77=HEAP[$76];
      var $78=$77 & -17;
      HEAP[$76]=$78;
      __label__ = 13; break;
    case 13: 
      var $80=$ret;
      var $81=(($80) & 255);
      var $82=_softx86_parity8($81);
      var $83=(($82)|0)!=0;
      if ($83) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $85=$1;
      var $86=(($85+4)|0);
      var $87=(($86+96)|0);
      var $88=$87;
      var $89=HEAP[$88];
      var $90=$89 | 4;
      HEAP[$88]=$90;
      __label__ = 16; break;
    case 15: 
      var $92=$1;
      var $93=(($92+4)|0);
      var $94=(($93+96)|0);
      var $95=$94;
      var $96=HEAP[$95];
      var $97=$96 & -5;
      HEAP[$95]=$97;
      __label__ = 16; break;
    case 16: 
      var $99=$ret;
      ;
      return $99;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_sub32["X"]=1;

function _op_sbb8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      var $carry;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$1;
      var $5=(($4+4)|0);
      var $6=(($5+96)|0);
      var $7=$6;
      var $8=HEAP[$7];
      var $9=$8 & 1;
      var $10=(($9) & 255);
      var $11=(($10)&255);
      var $12=(($11)|0)!=0;
      var $13=$12 ? 1 : 0;
      var $14=(($13) & 255);
      $carry=$14;
      var $15=$carry;
      var $16=(($15)&255);
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $19=$3;
      var $20=(($19)&255);
      var $21=(($20)|0)==255;
      if ($21) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $23=$3;
      $ret=$23;
      var $24=$1;
      var $25=(($24+4)|0);
      var $26=(($25+96)|0);
      var $27=$26;
      var $28=HEAP[$27];
      var $29=$28 | 2049;
      HEAP[$27]=$29;
      __label__ = 8; break;
    case 4: 
      var $31=$2;
      var $32=(($31)&255);
      var $33=$3;
      var $34=(($33)&255);
      var $35=$carry;
      var $36=(($35)&255);
      var $37=(($34+$36)|0);
      var $38=(($32-$37)|0);
      var $39=(($38) & 255);
      $ret=$39;
      var $40=$ret;
      var $41=(($40)&255);
      var $42=$2;
      var $43=(($42)&255);
      var $44=(($41)|0) > (($43)|0);
      if ($44) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $46=$1;
      var $47=(($46+4)|0);
      var $48=(($47+96)|0);
      var $49=$48;
      var $50=HEAP[$49];
      var $51=$50 | 2049;
      HEAP[$49]=$51;
      __label__ = 7; break;
    case 6: 
      var $53=$1;
      var $54=(($53+4)|0);
      var $55=(($54+96)|0);
      var $56=$55;
      var $57=HEAP[$56];
      var $58=$57 & -2050;
      HEAP[$56]=$58;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $61=$ret;
      var $62=(($61)&255);
      var $63=$62 & 128;
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $66=$1;
      var $67=(($66+4)|0);
      var $68=(($67+96)|0);
      var $69=$68;
      var $70=HEAP[$69];
      var $71=$70 | 128;
      HEAP[$69]=$71;
      __label__ = 11; break;
    case 10: 
      var $73=$1;
      var $74=(($73+4)|0);
      var $75=(($74+96)|0);
      var $76=$75;
      var $77=HEAP[$76];
      var $78=$77 & -129;
      HEAP[$76]=$78;
      __label__ = 11; break;
    case 11: 
      var $80=$ret;
      var $81=(($80 << 24) >> 24)!=0;
      if ($81) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $83=$1;
      var $84=(($83+4)|0);
      var $85=(($84+96)|0);
      var $86=$85;
      var $87=HEAP[$86];
      var $88=$87 | 64;
      HEAP[$86]=$88;
      __label__ = 14; break;
    case 13: 
      var $90=$1;
      var $91=(($90+4)|0);
      var $92=(($91+96)|0);
      var $93=$92;
      var $94=HEAP[$93];
      var $95=$94 & -65;
      HEAP[$93]=$95;
      __label__ = 14; break;
    case 14: 
      var $97=$3;
      var $98=(($97)&255);
      var $99=$98 & 15;
      var $100=$2;
      var $101=(($100)&255);
      var $102=$101 & 15;
      var $103=(($99)|0) > (($102)|0);
      if ($103) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $105=$1;
      var $106=(($105+4)|0);
      var $107=(($106+96)|0);
      var $108=$107;
      var $109=HEAP[$108];
      var $110=$109 | 16;
      HEAP[$108]=$110;
      __label__ = 17; break;
    case 16: 
      var $112=$1;
      var $113=(($112+4)|0);
      var $114=(($113+96)|0);
      var $115=$114;
      var $116=HEAP[$115];
      var $117=$116 & -17;
      HEAP[$115]=$117;
      __label__ = 17; break;
    case 17: 
      var $119=$ret;
      var $120=_softx86_parity8($119);
      var $121=(($120)|0)!=0;
      if ($121) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $123=$1;
      var $124=(($123+4)|0);
      var $125=(($124+96)|0);
      var $126=$125;
      var $127=HEAP[$126];
      var $128=$127 | 4;
      HEAP[$126]=$128;
      __label__ = 20; break;
    case 19: 
      var $130=$1;
      var $131=(($130+4)|0);
      var $132=(($131+96)|0);
      var $133=$132;
      var $134=HEAP[$133];
      var $135=$134 & -5;
      HEAP[$133]=$135;
      __label__ = 20; break;
    case 20: 
      var $137=$ret;
      ;
      return $137;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_sbb8["X"]=1;

function _op_sbb16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      var $carry;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$1;
      var $5=(($4+4)|0);
      var $6=(($5+96)|0);
      var $7=$6;
      var $8=HEAP[$7];
      var $9=$8 & 1;
      var $10=(($9) & 255);
      var $11=(($10)&255);
      var $12=(($11)|0)!=0;
      var $13=$12 ? 1 : 0;
      var $14=(($13) & 65535);
      $carry=$14;
      var $15=$carry;
      var $16=(($15)&65535);
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $19=$3;
      var $20=(($19)&65535);
      var $21=(($20)|0)==65535;
      if ($21) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $23=$3;
      $ret=$23;
      var $24=$1;
      var $25=(($24+4)|0);
      var $26=(($25+96)|0);
      var $27=$26;
      var $28=HEAP[$27];
      var $29=$28 | 2049;
      HEAP[$27]=$29;
      __label__ = 8; break;
    case 4: 
      var $31=$2;
      var $32=(($31)&65535);
      var $33=$3;
      var $34=(($33)&65535);
      var $35=$carry;
      var $36=(($35)&65535);
      var $37=(($34+$36)|0);
      var $38=(($32-$37)|0);
      var $39=(($38) & 65535);
      $ret=$39;
      var $40=$ret;
      var $41=(($40)&65535);
      var $42=$2;
      var $43=(($42)&65535);
      var $44=(($41)|0) > (($43)|0);
      if ($44) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $46=$1;
      var $47=(($46+4)|0);
      var $48=(($47+96)|0);
      var $49=$48;
      var $50=HEAP[$49];
      var $51=$50 | 2049;
      HEAP[$49]=$51;
      __label__ = 7; break;
    case 6: 
      var $53=$1;
      var $54=(($53+4)|0);
      var $55=(($54+96)|0);
      var $56=$55;
      var $57=HEAP[$56];
      var $58=$57 & -2050;
      HEAP[$56]=$58;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $61=$ret;
      var $62=(($61)&65535);
      var $63=$62 & 32768;
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $66=$1;
      var $67=(($66+4)|0);
      var $68=(($67+96)|0);
      var $69=$68;
      var $70=HEAP[$69];
      var $71=$70 | 128;
      HEAP[$69]=$71;
      __label__ = 11; break;
    case 10: 
      var $73=$1;
      var $74=(($73+4)|0);
      var $75=(($74+96)|0);
      var $76=$75;
      var $77=HEAP[$76];
      var $78=$77 & -129;
      HEAP[$76]=$78;
      __label__ = 11; break;
    case 11: 
      var $80=$ret;
      var $81=(($80 << 16) >> 16)!=0;
      if ($81) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $83=$1;
      var $84=(($83+4)|0);
      var $85=(($84+96)|0);
      var $86=$85;
      var $87=HEAP[$86];
      var $88=$87 | 64;
      HEAP[$86]=$88;
      __label__ = 14; break;
    case 13: 
      var $90=$1;
      var $91=(($90+4)|0);
      var $92=(($91+96)|0);
      var $93=$92;
      var $94=HEAP[$93];
      var $95=$94 & -65;
      HEAP[$93]=$95;
      __label__ = 14; break;
    case 14: 
      var $97=$3;
      var $98=(($97)&65535);
      var $99=$98 & 15;
      var $100=$2;
      var $101=(($100)&65535);
      var $102=$101 & 15;
      var $103=(($99)|0) > (($102)|0);
      if ($103) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $105=$1;
      var $106=(($105+4)|0);
      var $107=(($106+96)|0);
      var $108=$107;
      var $109=HEAP[$108];
      var $110=$109 | 16;
      HEAP[$108]=$110;
      __label__ = 17; break;
    case 16: 
      var $112=$1;
      var $113=(($112+4)|0);
      var $114=(($113+96)|0);
      var $115=$114;
      var $116=HEAP[$115];
      var $117=$116 & -17;
      HEAP[$115]=$117;
      __label__ = 17; break;
    case 17: 
      var $119=$ret;
      var $120=_softx86_parity16($119);
      var $121=(($120)|0)!=0;
      if ($121) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $123=$1;
      var $124=(($123+4)|0);
      var $125=(($124+96)|0);
      var $126=$125;
      var $127=HEAP[$126];
      var $128=$127 | 4;
      HEAP[$126]=$128;
      __label__ = 20; break;
    case 19: 
      var $130=$1;
      var $131=(($130+4)|0);
      var $132=(($131+96)|0);
      var $133=$132;
      var $134=HEAP[$133];
      var $135=$134 & -5;
      HEAP[$133]=$135;
      __label__ = 20; break;
    case 20: 
      var $137=$ret;
      ;
      return $137;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_sbb16["X"]=1;

function _op_sbb32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      var $carry;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$1;
      var $5=(($4+4)|0);
      var $6=(($5+96)|0);
      var $7=$6;
      var $8=HEAP[$7];
      var $9=$8 & 1;
      var $10=(($9) & 255);
      var $11=(($10)&255);
      var $12=(($11)|0)!=0;
      var $13=$12 ? 1 : 0;
      $carry=$13;
      var $14=$carry;
      var $15=(($14)|0)!=0;
      if ($15) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $17=$3;
      var $18=(($17)|0)==-1;
      if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $20=$3;
      $ret=$20;
      var $21=$1;
      var $22=(($21+4)|0);
      var $23=(($22+96)|0);
      var $24=$23;
      var $25=HEAP[$24];
      var $26=$25 | 2049;
      HEAP[$24]=$26;
      __label__ = 8; break;
    case 4: 
      var $28=$2;
      var $29=$3;
      var $30=$carry;
      var $31=(($29+$30)|0);
      var $32=(($28-$31)|0);
      $ret=$32;
      var $33=$ret;
      var $34=$2;
      var $35=(($33)>>>0) > (($34)>>>0);
      if ($35) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $37=$1;
      var $38=(($37+4)|0);
      var $39=(($38+96)|0);
      var $40=$39;
      var $41=HEAP[$40];
      var $42=$41 | 2049;
      HEAP[$40]=$42;
      __label__ = 7; break;
    case 6: 
      var $44=$1;
      var $45=(($44+4)|0);
      var $46=(($45+96)|0);
      var $47=$46;
      var $48=HEAP[$47];
      var $49=$48 & -2050;
      HEAP[$47]=$49;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $52=$ret;
      var $53=$52 & -2147483648;
      var $54=(($53)|0)!=0;
      if ($54) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $56=$1;
      var $57=(($56+4)|0);
      var $58=(($57+96)|0);
      var $59=$58;
      var $60=HEAP[$59];
      var $61=$60 | 128;
      HEAP[$59]=$61;
      __label__ = 11; break;
    case 10: 
      var $63=$1;
      var $64=(($63+4)|0);
      var $65=(($64+96)|0);
      var $66=$65;
      var $67=HEAP[$66];
      var $68=$67 & -129;
      HEAP[$66]=$68;
      __label__ = 11; break;
    case 11: 
      var $70=$ret;
      var $71=(($70)|0)!=0;
      if ($71) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $73=$1;
      var $74=(($73+4)|0);
      var $75=(($74+96)|0);
      var $76=$75;
      var $77=HEAP[$76];
      var $78=$77 | 64;
      HEAP[$76]=$78;
      __label__ = 14; break;
    case 13: 
      var $80=$1;
      var $81=(($80+4)|0);
      var $82=(($81+96)|0);
      var $83=$82;
      var $84=HEAP[$83];
      var $85=$84 & -65;
      HEAP[$83]=$85;
      __label__ = 14; break;
    case 14: 
      var $87=$3;
      var $88=$87 & 15;
      var $89=$2;
      var $90=$89 & 15;
      var $91=(($88)>>>0) > (($90)>>>0);
      if ($91) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $93=$1;
      var $94=(($93+4)|0);
      var $95=(($94+96)|0);
      var $96=$95;
      var $97=HEAP[$96];
      var $98=$97 | 16;
      HEAP[$96]=$98;
      __label__ = 17; break;
    case 16: 
      var $100=$1;
      var $101=(($100+4)|0);
      var $102=(($101+96)|0);
      var $103=$102;
      var $104=HEAP[$103];
      var $105=$104 & -17;
      HEAP[$103]=$105;
      __label__ = 17; break;
    case 17: 
      var $107=$ret;
      var $108=(($107) & 255);
      var $109=_softx86_parity8($108);
      var $110=(($109)|0)!=0;
      if ($110) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $112=$1;
      var $113=(($112+4)|0);
      var $114=(($113+96)|0);
      var $115=$114;
      var $116=HEAP[$115];
      var $117=$116 | 4;
      HEAP[$115]=$117;
      __label__ = 20; break;
    case 19: 
      var $119=$1;
      var $120=(($119+4)|0);
      var $121=(($120+96)|0);
      var $122=$121;
      var $123=HEAP[$122];
      var $124=$123 & -5;
      HEAP[$122]=$124;
      __label__ = 20; break;
    case 20: 
      var $126=$ret;
      ;
      return $126;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_sbb32["X"]=1;

function _Sfx86OpcodeExec_add($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 252;
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$2;
      var $14=(($13)&255);
      var $15=$14 & 2;
      var $16=$15 >> 1;
      var $17=(($16) & 255);
      $opswap=$17;
      var $18=$3;
      var $19=_softx86_fetch_exec_byte($18);
      $x=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 6;
      var $23=(($22) & 255);
      $mod=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 >> 3;
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $reg=$28;
      var $29=$x;
      var $30=(($29)&255);
      var $31=$30 & 7;
      var $32=(($31) & 255);
      $rm=$32;
      var $33=$3;
      var $34=$w16;
      var $35=$mod;
      var $36=$reg;
      var $37=$rm;
      var $38=$opswap;
      _sx86_exec_full_modregrm_rw($33, $34, 0, $35, $36, $37, $38, 2, 4, 6);
      $1=1;
      __label__ = 8; break;
    case 3: 
      var $40=$2;
      var $41=(($40)&255);
      var $42=(($41)|0)==4;
      if ($42) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $44=$3;
      var $45=_softx86_fetch_exec_byte($44);
      $x1=$45;
      var $46=$3;
      var $47=$3;
      var $48=(($47+4)|0);
      var $49=(($48)|0);
      var $50=(($49)|0);
      var $51=$50;
      var $52=(($51)|0);
      var $53=HEAP[$52];
      var $54=$x1;
      var $55=_op_add8($46, $53, $54);
      $x1=$55;
      var $56=$x1;
      var $57=$3;
      var $58=(($57+4)|0);
      var $59=(($58)|0);
      var $60=(($59)|0);
      var $61=$60;
      var $62=(($61)|0);
      HEAP[$62]=$56;
      $1=1;
      __label__ = 8; break;
    case 5: 
      var $64=$2;
      var $65=(($64)&255);
      var $66=(($65)|0)==5;
      if ($66) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $68=$3;
      var $69=_softx86_fetch_exec_byte($68);
      var $70=(($69)&255);
      $x2=$70;
      var $71=$3;
      var $72=_softx86_fetch_exec_byte($71);
      var $73=(($72)&255);
      var $74=$73 << 8;
      var $75=$x2;
      var $76=(($75)&65535);
      var $77=$76 | $74;
      var $78=(($77) & 65535);
      $x2=$78;
      var $79=$3;
      var $80=$3;
      var $81=(($80+4)|0);
      var $82=(($81)|0);
      var $83=(($82)|0);
      var $84=$83;
      var $85=(($84)|0);
      var $86=HEAP[$85];
      var $87=$x2;
      var $88=_op_add16($79, $86, $87);
      $x2=$88;
      var $89=$x2;
      var $90=$3;
      var $91=(($90+4)|0);
      var $92=(($91)|0);
      var $93=(($92)|0);
      var $94=$93;
      var $95=(($94)|0);
      HEAP[$95]=$89;
      $1=1;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $98=$1;
      ;
      return $98;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_add["X"]=1;

function _Sfx86OpcodeDec_add($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 252;
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$2;
      var $15=(($14)&255);
      var $16=$15 & 2;
      var $17=$16 >> 1;
      var $18=(($17) & 255);
      $opswap=$18;
      var $19=$3;
      var $20=_softx86_fetch_dec_byte($19);
      $x=$20;
      var $21=$x;
      var $22=(($21)&255);
      var $23=$22 >> 6;
      var $24=(($23) & 255);
      $mod=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 >> 3;
      var $28=$27 & 7;
      var $29=(($28) & 255);
      $reg=$29;
      var $30=$x;
      var $31=(($30)&255);
      var $32=$31 & 7;
      var $33=(($32) & 255);
      $rm=$33;
      var $34=$3;
      var $35=$w16;
      var $36=$mod;
      var $37=$reg;
      var $38=$rm;
      _sx86_dec_full_modregrm($34, $35, 0, $36, $37, $38, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $39=$opswap;
      var $40=(($39 << 24) >> 24)!=0;
      if ($40) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $42=$4;
      var $43=_sprintf($42, ((STRING_TABLE.__str8)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      __label__ = 5; break;
    case 4: 
      var $45=$4;
      var $46=_sprintf($45, ((STRING_TABLE.__str8)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=((_op2_tmp)|0),tempInt));
      __label__ = 5; break;
    case 5: 
      $1=1;
      __label__ = 11; break;
    case 6: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=(($50)|0)==4;
      if ($51) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $53=$3;
      var $54=_softx86_fetch_dec_byte($53);
      $x1=$54;
      var $55=$4;
      var $56=$x1;
      var $57=(($56)&255);
      var $58=_sprintf($55, ((STRING_TABLE.__str19)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$57,tempInt));
      $1=1;
      __label__ = 11; break;
    case 8: 
      var $60=$2;
      var $61=(($60)&255);
      var $62=(($61)|0)==5;
      if ($62) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $64=$3;
      var $65=_softx86_fetch_dec_byte($64);
      var $66=(($65)&255);
      $x2=$66;
      var $67=$3;
      var $68=_softx86_fetch_dec_byte($67);
      var $69=(($68)&255);
      var $70=$69 << 8;
      var $71=$x2;
      var $72=(($71)&65535);
      var $73=$72 | $70;
      var $74=(($73) & 65535);
      $x2=$74;
      var $75=$4;
      var $76=$x2;
      var $77=(($76)&65535);
      var $78=_sprintf($75, ((STRING_TABLE.__str210)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$77,tempInt));
      $1=1;
      __label__ = 11; break;
    case 10: 
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $81=$1;
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_add["X"]=1;

function _Sfx86OpcodeExec_adc($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 252;
      var $7=(($6)|0)==16;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$2;
      var $14=(($13)&255);
      var $15=$14 & 2;
      var $16=$15 >> 1;
      var $17=(($16) & 255);
      $opswap=$17;
      var $18=$3;
      var $19=_softx86_fetch_exec_byte($18);
      $x=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 6;
      var $23=(($22) & 255);
      $mod=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 >> 3;
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $reg=$28;
      var $29=$x;
      var $30=(($29)&255);
      var $31=$30 & 7;
      var $32=(($31) & 255);
      $rm=$32;
      var $33=$3;
      var $34=$w16;
      var $35=$mod;
      var $36=$reg;
      var $37=$rm;
      var $38=$opswap;
      _sx86_exec_full_modregrm_rw($33, $34, 0, $35, $36, $37, $38, 8, 10, 12);
      $1=1;
      __label__ = 8; break;
    case 3: 
      var $40=$2;
      var $41=(($40)&255);
      var $42=(($41)|0)==20;
      if ($42) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $44=$3;
      var $45=_softx86_fetch_exec_byte($44);
      $x1=$45;
      var $46=$3;
      var $47=$3;
      var $48=(($47+4)|0);
      var $49=(($48)|0);
      var $50=(($49)|0);
      var $51=$50;
      var $52=(($51)|0);
      var $53=HEAP[$52];
      var $54=$x1;
      var $55=_op_adc8($46, $53, $54);
      $x1=$55;
      var $56=$x1;
      var $57=$3;
      var $58=(($57+4)|0);
      var $59=(($58)|0);
      var $60=(($59)|0);
      var $61=$60;
      var $62=(($61)|0);
      HEAP[$62]=$56;
      $1=1;
      __label__ = 8; break;
    case 5: 
      var $64=$2;
      var $65=(($64)&255);
      var $66=(($65)|0)==21;
      if ($66) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $68=$3;
      var $69=_softx86_fetch_exec_byte($68);
      var $70=(($69)&255);
      $x2=$70;
      var $71=$3;
      var $72=_softx86_fetch_exec_byte($71);
      var $73=(($72)&255);
      var $74=$73 << 8;
      var $75=$x2;
      var $76=(($75)&65535);
      var $77=$76 | $74;
      var $78=(($77) & 65535);
      $x2=$78;
      var $79=$3;
      var $80=$3;
      var $81=(($80+4)|0);
      var $82=(($81)|0);
      var $83=(($82)|0);
      var $84=$83;
      var $85=(($84)|0);
      var $86=HEAP[$85];
      var $87=$x2;
      var $88=_op_adc16($79, $86, $87);
      $x2=$88;
      var $89=$x2;
      var $90=$3;
      var $91=(($90+4)|0);
      var $92=(($91)|0);
      var $93=(($92)|0);
      var $94=$93;
      var $95=(($94)|0);
      HEAP[$95]=$89;
      $1=1;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $98=$1;
      ;
      return $98;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_adc["X"]=1;

function _Sfx86OpcodeDec_adc($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 252;
      var $8=(($7)|0)==16;
      if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$2;
      var $15=(($14)&255);
      var $16=$15 & 2;
      var $17=$16 >> 1;
      var $18=(($17) & 255);
      $opswap=$18;
      var $19=$3;
      var $20=_softx86_fetch_dec_byte($19);
      $x=$20;
      var $21=$x;
      var $22=(($21)&255);
      var $23=$22 >> 6;
      var $24=(($23) & 255);
      $mod=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 >> 3;
      var $28=$27 & 7;
      var $29=(($28) & 255);
      $reg=$29;
      var $30=$x;
      var $31=(($30)&255);
      var $32=$31 & 7;
      var $33=(($32) & 255);
      $rm=$33;
      var $34=$3;
      var $35=$w16;
      var $36=$mod;
      var $37=$reg;
      var $38=$rm;
      _sx86_dec_full_modregrm($34, $35, 0, $36, $37, $38, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $39=$opswap;
      var $40=(($39 << 24) >> 24)!=0;
      if ($40) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $42=$4;
      var $43=_sprintf($42, ((STRING_TABLE.__str311)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      __label__ = 5; break;
    case 4: 
      var $45=$4;
      var $46=_sprintf($45, ((STRING_TABLE.__str311)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=((_op2_tmp)|0),tempInt));
      __label__ = 5; break;
    case 5: 
      $1=1;
      __label__ = 11; break;
    case 6: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=(($50)|0)==20;
      if ($51) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $53=$3;
      var $54=_softx86_fetch_dec_byte($53);
      $x1=$54;
      var $55=$4;
      var $56=$x1;
      var $57=(($56)&255);
      var $58=_sprintf($55, ((STRING_TABLE.__str412)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$57,tempInt));
      $1=1;
      __label__ = 11; break;
    case 8: 
      var $60=$2;
      var $61=(($60)&255);
      var $62=(($61)|0)==21;
      if ($62) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $64=$3;
      var $65=_softx86_fetch_dec_byte($64);
      var $66=(($65)&255);
      $x2=$66;
      var $67=$3;
      var $68=_softx86_fetch_dec_byte($67);
      var $69=(($68)&255);
      var $70=$69 << 8;
      var $71=$x2;
      var $72=(($71)&65535);
      var $73=$72 | $70;
      var $74=(($73) & 65535);
      $x2=$74;
      var $75=$4;
      var $76=$x2;
      var $77=(($76)&65535);
      var $78=_sprintf($75, ((STRING_TABLE.__str513)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$77,tempInt));
      $1=1;
      __label__ = 11; break;
    case 10: 
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $81=$1;
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_adc["X"]=1;

function _Sfx86OpcodeExec_cxex($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==152;
      if ($6) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $8=$3;
      var $9=(($8+4)|0);
      var $10=(($9)|0);
      var $11=(($10)|0);
      var $12=$11;
      var $13=(($12)|0);
      var $14=HEAP[$13];
      var $15=(($14)&255);
      var $16=$15 & 128;
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $19=$3;
      var $20=(($19+4)|0);
      var $21=(($20)|0);
      var $22=(($21)|0);
      var $23=$22;
      var $24=(($23)|0);
      var $25=HEAP[$24];
      var $26=(($25)&65535);
      var $27=$26 | 65280;
      var $28=(($27) & 65535);
      HEAP[$24]=$28;
      __label__ = 5; break;
    case 4: 
      var $30=$3;
      var $31=(($30+4)|0);
      var $32=(($31)|0);
      var $33=(($32)|0);
      var $34=$33;
      var $35=(($34+1)|0);
      HEAP[$35]=0;
      __label__ = 5; break;
    case 5: 
      $1=1;
      __label__ = 12; break;
    case 6: 
      var $38=$2;
      var $39=(($38)&255);
      var $40=(($39)|0)==153;
      if ($40) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $42=$3;
      var $43=(($42+4)|0);
      var $44=(($43)|0);
      var $45=(($44)|0);
      var $46=$45;
      var $47=(($46)|0);
      var $48=HEAP[$47];
      var $49=(($48)&65535);
      var $50=$49 & 32768;
      var $51=(($50)|0)!=0;
      if ($51) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $53=$3;
      var $54=(($53+4)|0);
      var $55=(($54)|0);
      var $56=(($55+8)|0);
      var $57=$56;
      var $58=(($57)|0);
      HEAP[$58]=-1;
      __label__ = 10; break;
    case 9: 
      var $60=$3;
      var $61=(($60+4)|0);
      var $62=(($61)|0);
      var $63=(($62+8)|0);
      var $64=$63;
      var $65=(($64)|0);
      HEAP[$65]=0;
      __label__ = 10; break;
    case 10: 
      $1=1;
      __label__ = 12; break;
    case 11: 
      $1=0;
      __label__ = 12; break;
    case 12: 
      var $69=$1;
      ;
      return $69;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_cxex["X"]=1;

function _Sfx86OpcodeExec_sub($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 252;
      var $7=(($6)|0)==40;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$2;
      var $14=(($13)&255);
      var $15=$14 & 2;
      var $16=$15 >> 1;
      var $17=(($16) & 255);
      $opswap=$17;
      var $18=$3;
      var $19=_softx86_fetch_exec_byte($18);
      $x=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 6;
      var $23=(($22) & 255);
      $mod=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 >> 3;
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $reg=$28;
      var $29=$x;
      var $30=(($29)&255);
      var $31=$30 & 7;
      var $32=(($31) & 255);
      $rm=$32;
      var $33=$3;
      var $34=$w16;
      var $35=$mod;
      var $36=$reg;
      var $37=$rm;
      var $38=$opswap;
      _sx86_exec_full_modregrm_rw($33, $34, 0, $35, $36, $37, $38, 14, 16, 18);
      $1=1;
      __label__ = 8; break;
    case 3: 
      var $40=$2;
      var $41=(($40)&255);
      var $42=(($41)|0)==44;
      if ($42) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $44=$3;
      var $45=_softx86_fetch_exec_byte($44);
      $x1=$45;
      var $46=$3;
      var $47=$3;
      var $48=(($47+4)|0);
      var $49=(($48)|0);
      var $50=(($49)|0);
      var $51=$50;
      var $52=(($51)|0);
      var $53=HEAP[$52];
      var $54=$x1;
      var $55=_op_sub8($46, $53, $54);
      $x1=$55;
      var $56=$x1;
      var $57=$3;
      var $58=(($57+4)|0);
      var $59=(($58)|0);
      var $60=(($59)|0);
      var $61=$60;
      var $62=(($61)|0);
      HEAP[$62]=$56;
      $1=1;
      __label__ = 8; break;
    case 5: 
      var $64=$2;
      var $65=(($64)&255);
      var $66=(($65)|0)==45;
      if ($66) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $68=$3;
      var $69=_softx86_fetch_exec_byte($68);
      var $70=(($69)&255);
      $x2=$70;
      var $71=$3;
      var $72=_softx86_fetch_exec_byte($71);
      var $73=(($72)&255);
      var $74=$73 << 8;
      var $75=$x2;
      var $76=(($75)&65535);
      var $77=$76 | $74;
      var $78=(($77) & 65535);
      $x2=$78;
      var $79=$3;
      var $80=$3;
      var $81=(($80+4)|0);
      var $82=(($81)|0);
      var $83=(($82)|0);
      var $84=$83;
      var $85=(($84)|0);
      var $86=HEAP[$85];
      var $87=$x2;
      var $88=_op_sub16($79, $86, $87);
      $x2=$88;
      var $89=$x2;
      var $90=$3;
      var $91=(($90+4)|0);
      var $92=(($91)|0);
      var $93=(($92)|0);
      var $94=$93;
      var $95=(($94)|0);
      HEAP[$95]=$89;
      $1=1;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $98=$1;
      ;
      return $98;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_sub["X"]=1;

function _Sfx86OpcodeDec_sub($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 252;
      var $8=(($7)|0)==40;
      if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$2;
      var $15=(($14)&255);
      var $16=$15 & 2;
      var $17=$16 >> 1;
      var $18=(($17) & 255);
      $opswap=$18;
      var $19=$3;
      var $20=_softx86_fetch_dec_byte($19);
      $x=$20;
      var $21=$x;
      var $22=(($21)&255);
      var $23=$22 >> 6;
      var $24=(($23) & 255);
      $mod=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 >> 3;
      var $28=$27 & 7;
      var $29=(($28) & 255);
      $reg=$29;
      var $30=$x;
      var $31=(($30)&255);
      var $32=$31 & 7;
      var $33=(($32) & 255);
      $rm=$33;
      var $34=$3;
      var $35=$w16;
      var $36=$mod;
      var $37=$reg;
      var $38=$rm;
      _sx86_dec_full_modregrm($34, $35, 0, $36, $37, $38, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $39=$opswap;
      var $40=(($39 << 24) >> 24)!=0;
      if ($40) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $42=$4;
      var $43=_sprintf($42, ((STRING_TABLE.__str614)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      __label__ = 5; break;
    case 4: 
      var $45=$4;
      var $46=_sprintf($45, ((STRING_TABLE.__str614)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=((_op2_tmp)|0),tempInt));
      __label__ = 5; break;
    case 5: 
      $1=1;
      __label__ = 11; break;
    case 6: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=(($50)|0)==44;
      if ($51) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $53=$3;
      var $54=_softx86_fetch_dec_byte($53);
      $x1=$54;
      var $55=$4;
      var $56=$x1;
      var $57=(($56)&255);
      var $58=_sprintf($55, ((STRING_TABLE.__str715)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$57,tempInt));
      $1=1;
      __label__ = 11; break;
    case 8: 
      var $60=$2;
      var $61=(($60)&255);
      var $62=(($61)|0)==45;
      if ($62) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $64=$3;
      var $65=_softx86_fetch_dec_byte($64);
      var $66=(($65)&255);
      $x2=$66;
      var $67=$3;
      var $68=_softx86_fetch_dec_byte($67);
      var $69=(($68)&255);
      var $70=$69 << 8;
      var $71=$x2;
      var $72=(($71)&65535);
      var $73=$72 | $70;
      var $74=(($73) & 65535);
      $x2=$74;
      var $75=$4;
      var $76=$x2;
      var $77=(($76)&65535);
      var $78=_sprintf($75, ((STRING_TABLE.__str816)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$77,tempInt));
      $1=1;
      __label__ = 11; break;
    case 10: 
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $81=$1;
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_sub["X"]=1;

function _Sfx86OpcodeExec_sbb($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 252;
      var $7=(($6)|0)==24;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$2;
      var $14=(($13)&255);
      var $15=$14 & 2;
      var $16=$15 >> 1;
      var $17=(($16) & 255);
      $opswap=$17;
      var $18=$3;
      var $19=_softx86_fetch_exec_byte($18);
      $x=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 6;
      var $23=(($22) & 255);
      $mod=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 >> 3;
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $reg=$28;
      var $29=$x;
      var $30=(($29)&255);
      var $31=$30 & 7;
      var $32=(($31) & 255);
      $rm=$32;
      var $33=$3;
      var $34=$w16;
      var $35=$mod;
      var $36=$reg;
      var $37=$rm;
      var $38=$opswap;
      _sx86_exec_full_modregrm_rw($33, $34, 0, $35, $36, $37, $38, 20, 22, 24);
      $1=1;
      __label__ = 8; break;
    case 3: 
      var $40=$2;
      var $41=(($40)&255);
      var $42=(($41)|0)==28;
      if ($42) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $44=$3;
      var $45=_softx86_fetch_exec_byte($44);
      $x1=$45;
      var $46=$3;
      var $47=$3;
      var $48=(($47+4)|0);
      var $49=(($48)|0);
      var $50=(($49)|0);
      var $51=$50;
      var $52=(($51)|0);
      var $53=HEAP[$52];
      var $54=$x1;
      var $55=_op_sbb8($46, $53, $54);
      $x1=$55;
      var $56=$x1;
      var $57=$3;
      var $58=(($57+4)|0);
      var $59=(($58)|0);
      var $60=(($59)|0);
      var $61=$60;
      var $62=(($61)|0);
      HEAP[$62]=$56;
      $1=1;
      __label__ = 8; break;
    case 5: 
      var $64=$2;
      var $65=(($64)&255);
      var $66=(($65)|0)==29;
      if ($66) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $68=$3;
      var $69=_softx86_fetch_exec_byte($68);
      var $70=(($69)&255);
      $x2=$70;
      var $71=$3;
      var $72=_softx86_fetch_exec_byte($71);
      var $73=(($72)&255);
      var $74=$73 << 8;
      var $75=$x2;
      var $76=(($75)&65535);
      var $77=$76 | $74;
      var $78=(($77) & 65535);
      $x2=$78;
      var $79=$3;
      var $80=$3;
      var $81=(($80+4)|0);
      var $82=(($81)|0);
      var $83=(($82)|0);
      var $84=$83;
      var $85=(($84)|0);
      var $86=HEAP[$85];
      var $87=$x2;
      var $88=_op_sbb16($79, $86, $87);
      $x2=$88;
      var $89=$x2;
      var $90=$3;
      var $91=(($90+4)|0);
      var $92=(($91)|0);
      var $93=(($92)|0);
      var $94=$93;
      var $95=(($94)|0);
      HEAP[$95]=$89;
      $1=1;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $98=$1;
      ;
      return $98;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_sbb["X"]=1;

function _Sfx86OpcodeDec_sbb($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 252;
      var $8=(($7)|0)==24;
      if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$2;
      var $15=(($14)&255);
      var $16=$15 & 2;
      var $17=$16 >> 1;
      var $18=(($17) & 255);
      $opswap=$18;
      var $19=$3;
      var $20=_softx86_fetch_dec_byte($19);
      $x=$20;
      var $21=$x;
      var $22=(($21)&255);
      var $23=$22 >> 6;
      var $24=(($23) & 255);
      $mod=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 >> 3;
      var $28=$27 & 7;
      var $29=(($28) & 255);
      $reg=$29;
      var $30=$x;
      var $31=(($30)&255);
      var $32=$31 & 7;
      var $33=(($32) & 255);
      $rm=$33;
      var $34=$3;
      var $35=$w16;
      var $36=$mod;
      var $37=$reg;
      var $38=$rm;
      _sx86_dec_full_modregrm($34, $35, 0, $36, $37, $38, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $39=$opswap;
      var $40=(($39 << 24) >> 24)!=0;
      if ($40) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $42=$4;
      var $43=_sprintf($42, ((STRING_TABLE.__str9)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      __label__ = 5; break;
    case 4: 
      var $45=$4;
      var $46=_sprintf($45, ((STRING_TABLE.__str9)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=((_op2_tmp)|0),tempInt));
      __label__ = 5; break;
    case 5: 
      $1=1;
      __label__ = 11; break;
    case 6: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=(($50)|0)==28;
      if ($51) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $53=$3;
      var $54=_softx86_fetch_dec_byte($53);
      $x1=$54;
      var $55=$4;
      var $56=$x1;
      var $57=(($56)&255);
      var $58=_sprintf($55, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$57,tempInt));
      $1=1;
      __label__ = 11; break;
    case 8: 
      var $60=$2;
      var $61=(($60)&255);
      var $62=(($61)|0)==29;
      if ($62) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $64=$3;
      var $65=_softx86_fetch_dec_byte($64);
      var $66=(($65)&255);
      $x2=$66;
      var $67=$3;
      var $68=_softx86_fetch_dec_byte($67);
      var $69=(($68)&255);
      var $70=$69 << 8;
      var $71=$x2;
      var $72=(($71)&65535);
      var $73=$72 | $70;
      var $74=(($73) & 65535);
      $x2=$74;
      var $75=$4;
      var $76=$x2;
      var $77=(($76)&65535);
      var $78=_sprintf($75, ((STRING_TABLE.__str11)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$77,tempInt));
      $1=1;
      __label__ = 11; break;
    case 10: 
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $81=$1;
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_sbb["X"]=1;

function _Sfx86OpcodeExec_cmp($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 252;
      var $7=(($6)|0)==56;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$2;
      var $14=(($13)&255);
      var $15=$14 & 2;
      var $16=$15 >> 1;
      var $17=(($16) & 255);
      $opswap=$17;
      var $18=$3;
      var $19=_softx86_fetch_exec_byte($18);
      $x=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 6;
      var $23=(($22) & 255);
      $mod=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 >> 3;
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $reg=$28;
      var $29=$x;
      var $30=(($29)&255);
      var $31=$30 & 7;
      var $32=(($31) & 255);
      $rm=$32;
      var $33=$3;
      var $34=$w16;
      var $35=$mod;
      var $36=$reg;
      var $37=$rm;
      var $38=$opswap;
      _sx86_exec_full_modregrm_ro($33, $34, 0, $35, $36, $37, $38, 14, 16, 18);
      $1=1;
      __label__ = 8; break;
    case 3: 
      var $40=$2;
      var $41=(($40)&255);
      var $42=(($41)|0)==60;
      if ($42) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $44=$3;
      var $45=_softx86_fetch_exec_byte($44);
      $x1=$45;
      var $46=$3;
      var $47=$3;
      var $48=(($47+4)|0);
      var $49=(($48)|0);
      var $50=(($49)|0);
      var $51=$50;
      var $52=(($51)|0);
      var $53=HEAP[$52];
      var $54=$x1;
      var $55=_op_sub8($46, $53, $54);
      $1=1;
      __label__ = 8; break;
    case 5: 
      var $57=$2;
      var $58=(($57)&255);
      var $59=(($58)|0)==61;
      if ($59) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $61=$3;
      var $62=_softx86_fetch_exec_byte($61);
      var $63=(($62)&255);
      $x2=$63;
      var $64=$3;
      var $65=_softx86_fetch_exec_byte($64);
      var $66=(($65)&255);
      var $67=$66 << 8;
      var $68=$x2;
      var $69=(($68)&65535);
      var $70=$69 | $67;
      var $71=(($70) & 65535);
      $x2=$71;
      var $72=$3;
      var $73=$3;
      var $74=(($73+4)|0);
      var $75=(($74)|0);
      var $76=(($75)|0);
      var $77=$76;
      var $78=(($77)|0);
      var $79=HEAP[$78];
      var $80=$x2;
      var $81=_op_sub16($72, $79, $80);
      $1=1;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $84=$1;
      ;
      return $84;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_cmp["X"]=1;

function _Sfx86OpcodeDec_cmp($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 252;
      var $8=(($7)|0)==56;
      if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$2;
      var $15=(($14)&255);
      var $16=$15 & 2;
      var $17=$16 >> 1;
      var $18=(($17) & 255);
      $opswap=$18;
      var $19=$3;
      var $20=_softx86_fetch_dec_byte($19);
      $x=$20;
      var $21=$x;
      var $22=(($21)&255);
      var $23=$22 >> 6;
      var $24=(($23) & 255);
      $mod=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 >> 3;
      var $28=$27 & 7;
      var $29=(($28) & 255);
      $reg=$29;
      var $30=$x;
      var $31=(($30)&255);
      var $32=$31 & 7;
      var $33=(($32) & 255);
      $rm=$33;
      var $34=$3;
      var $35=$w16;
      var $36=$mod;
      var $37=$reg;
      var $38=$rm;
      _sx86_dec_full_modregrm($34, $35, 0, $36, $37, $38, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $39=$opswap;
      var $40=(($39 << 24) >> 24)!=0;
      if ($40) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $42=$4;
      var $43=_sprintf($42, ((STRING_TABLE.__str12)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      __label__ = 5; break;
    case 4: 
      var $45=$4;
      var $46=_sprintf($45, ((STRING_TABLE.__str12)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=((_op2_tmp)|0),tempInt));
      __label__ = 5; break;
    case 5: 
      $1=1;
      __label__ = 11; break;
    case 6: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=(($50)|0)==60;
      if ($51) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $53=$3;
      var $54=_softx86_fetch_dec_byte($53);
      $x1=$54;
      var $55=$4;
      var $56=$x1;
      var $57=(($56)&255);
      var $58=_sprintf($55, ((STRING_TABLE.__str13)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$57,tempInt));
      $1=1;
      __label__ = 11; break;
    case 8: 
      var $60=$2;
      var $61=(($60)&255);
      var $62=(($61)|0)==61;
      if ($62) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $64=$3;
      var $65=_softx86_fetch_dec_byte($64);
      var $66=(($65)&255);
      $x2=$66;
      var $67=$3;
      var $68=_softx86_fetch_dec_byte($67);
      var $69=(($68)&255);
      var $70=$69 << 8;
      var $71=$x2;
      var $72=(($71)&65535);
      var $73=$72 | $70;
      var $74=(($73) & 65535);
      $x2=$74;
      var $75=$4;
      var $76=$x2;
      var $77=(($76)&65535);
      var $78=_sprintf($75, ((STRING_TABLE.__str14)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$77,tempInt));
      $1=1;
      __label__ = 11; break;
    case 10: 
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $81=$1;
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_cmp["X"]=1;

function _Sfx86OpcodeDec_cxex($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==152;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$4;
      var $10=_strcpy($9, ((STRING_TABLE.__str17)|0));
      $1=1;
      __label__ = 6; break;
    case 3: 
      var $12=$2;
      var $13=(($12)&255);
      var $14=(($13)|0)==153;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$4;
      var $17=_strcpy($16, ((STRING_TABLE.__str118)|0));
      $1=1;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $20=$1;
      ;
      return $20;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeExec_default($opcode, $ctx) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$opcode;
  $2=$ctx;
  ;
  return 0;
}


function _Sfx86OpcodeExec_nop($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)!=144;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      $1=1;
      __label__ = 4; break;
    case 4: 
      var $10=$1;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeExec_lock($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==240;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=2;
      __label__ = 4; break;
    case 3: 
      $1=0;
      __label__ = 4; break;
    case 4: 
      var $10=$1;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeExec_clx($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==245;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$3;
      var $9=(($8+4)|0);
      var $10=(($9+96)|0);
      var $11=$10;
      var $12=HEAP[$11];
      var $13=$12 ^ 1;
      HEAP[$11]=$13;
      $1=1;
      __label__ = 16; break;
    case 3: 
      var $15=$2;
      var $16=(($15)&255);
      var $17=(($16)|0)==248;
      if ($17) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $19=$3;
      var $20=(($19+4)|0);
      var $21=(($20+96)|0);
      var $22=$21;
      var $23=HEAP[$22];
      var $24=$23 & -2;
      HEAP[$22]=$24;
      $1=1;
      __label__ = 16; break;
    case 5: 
      var $26=$2;
      var $27=(($26)&255);
      var $28=(($27)|0)==249;
      if ($28) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $30=$3;
      var $31=(($30+4)|0);
      var $32=(($31+96)|0);
      var $33=$32;
      var $34=HEAP[$33];
      var $35=$34 | 1;
      HEAP[$33]=$35;
      $1=1;
      __label__ = 16; break;
    case 7: 
      var $37=$2;
      var $38=(($37)&255);
      var $39=(($38)|0)==250;
      if ($39) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $41=$3;
      var $42=(($41+4)|0);
      var $43=(($42+96)|0);
      var $44=$43;
      var $45=HEAP[$44];
      var $46=$45 & -513;
      HEAP[$44]=$46;
      $1=1;
      __label__ = 16; break;
    case 9: 
      var $48=$2;
      var $49=(($48)&255);
      var $50=(($49)|0)==251;
      if ($50) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $52=$3;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 | 512;
      HEAP[$55]=$57;
      $1=1;
      __label__ = 16; break;
    case 11: 
      var $59=$2;
      var $60=(($59)&255);
      var $61=(($60)|0)==252;
      if ($61) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $63=$3;
      var $64=(($63+4)|0);
      var $65=(($64+96)|0);
      var $66=$65;
      var $67=HEAP[$66];
      var $68=$67 & -1025;
      HEAP[$66]=$68;
      $1=1;
      __label__ = 16; break;
    case 13: 
      var $70=$2;
      var $71=(($70)&255);
      var $72=(($71)|0)==253;
      if ($72) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $74=$3;
      var $75=(($74+4)|0);
      var $76=(($75+96)|0);
      var $77=$76;
      var $78=HEAP[$77];
      var $79=$78 | 1024;
      HEAP[$77]=$79;
      $1=1;
      __label__ = 16; break;
    case 15: 
      $1=0;
      __label__ = 16; break;
    case 16: 
      var $82=$1;
      ;
      return $82;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_clx["X"]=1;

function _Sfx86OpcodeExec_duhhh($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==155;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=1;
      __label__ = 9; break;
    case 3: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=(($10)|0)==244;
      if ($11) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $13=$3;
      var $14=(($13+4)|0);
      var $15=(($14+120)|0);
      var $16=HEAP[$15];
      var $17=(($16)&255);
      var $18=(($17)|0)!=0;
      if ($18) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $20=$3;
      var $21=(($20+4)|0);
      var $22=(($21+122)|0);
      var $23=HEAP[$22];
      var $24=(($23)&255);
      var $25=(($24)|0)!=0;
      if ($25) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=1;
      __label__ = 9; break;
    case 7: 
      $1=3;
      __label__ = 9; break;
    case 8: 
      $1=0;
      __label__ = 9; break;
    case 9: 
      var $30=$1;
      ;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeDec_default($opcode, $ctx, $buf) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$opcode;
  $2=$ctx;
  $3=$buf;
  var $4=$3;
  var $5=(($4)|0);
  HEAP[$5]=0;
  ;
  return 0;
}


function _Sfx86OpcodeExec_segover($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==38;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$3;
      var $9=(($8+236)|0);
      HEAP[$9]=1;
      var $10=$3;
      var $11=(($10+4)|0);
      var $12=(($11+32)|0);
      var $13=(($12)|0);
      var $14=(($13)|0);
      var $15=HEAP[$14];
      var $16=$3;
      var $17=(($16+238)|0);
      HEAP[$17]=$15;
      $1=2;
      __label__ = 10; break;
    case 3: 
      var $19=$2;
      var $20=(($19)&255);
      var $21=(($20)|0)==46;
      if ($21) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $23=$3;
      var $24=(($23+236)|0);
      HEAP[$24]=1;
      var $25=$3;
      var $26=(($25+4)|0);
      var $27=(($26+32)|0);
      var $28=(($27+8)|0);
      var $29=(($28)|0);
      var $30=HEAP[$29];
      var $31=$3;
      var $32=(($31+238)|0);
      HEAP[$32]=$30;
      $1=2;
      __label__ = 10; break;
    case 5: 
      var $34=$2;
      var $35=(($34)&255);
      var $36=(($35)|0)==54;
      if ($36) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $38=$3;
      var $39=(($38+236)|0);
      HEAP[$39]=1;
      var $40=$3;
      var $41=(($40+4)|0);
      var $42=(($41+32)|0);
      var $43=(($42+16)|0);
      var $44=(($43)|0);
      var $45=HEAP[$44];
      var $46=$3;
      var $47=(($46+238)|0);
      HEAP[$47]=$45;
      $1=2;
      __label__ = 10; break;
    case 7: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=(($50)|0)==62;
      if ($51) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $53=$3;
      var $54=(($53+236)|0);
      HEAP[$54]=1;
      var $55=$3;
      var $56=(($55+4)|0);
      var $57=(($56+32)|0);
      var $58=(($57+24)|0);
      var $59=(($58)|0);
      var $60=HEAP[$59];
      var $61=$3;
      var $62=(($61+238)|0);
      HEAP[$62]=$60;
      $1=2;
      __label__ = 10; break;
    case 9: 
      $1=0;
      __label__ = 10; break;
    case 10: 
      var $65=$1;
      ;
      return $65;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_segover["X"]=1;

function _Sfx86OpcodeExec_repetition($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$opcode;
      $3=$ctx;
      var $4=$3;
      var $5=(($4+240)|0);
      var $6=HEAP[$5];
      var $7=(($6)&255);
      var $8=(($7)|0) > 0;
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=0;
      __label__ = 8; break;
    case 3: 
      var $11=$2;
      var $12=(($11)&255);
      var $13=(($12)|0)==243;
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $15=$3;
      var $16=(($15+240)|0);
      HEAP[$16]=2;
      $1=2;
      __label__ = 8; break;
    case 5: 
      var $18=$2;
      var $19=(($18)&255);
      var $20=(($19)|0)==242;
      if ($20) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $22=$3;
      var $23=(($22+240)|0);
      HEAP[$23]=1;
      $1=2;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $26=$1;
      ;
      return $26;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeDec_clx($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==245;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$4;
      var $10=_strcpy($9, ((STRING_TABLE.__str20)|0));
      $1=1;
      __label__ = 16; break;
    case 3: 
      var $12=$2;
      var $13=(($12)&255);
      var $14=(($13)|0)==248;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$4;
      var $17=_strcpy($16, ((STRING_TABLE.__str121)|0));
      $1=1;
      __label__ = 16; break;
    case 5: 
      var $19=$2;
      var $20=(($19)&255);
      var $21=(($20)|0)==249;
      if ($21) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $23=$4;
      var $24=_strcpy($23, ((STRING_TABLE.__str222)|0));
      $1=1;
      __label__ = 16; break;
    case 7: 
      var $26=$2;
      var $27=(($26)&255);
      var $28=(($27)|0)==250;
      if ($28) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $30=$4;
      var $31=_strcpy($30, ((STRING_TABLE.__str323)|0));
      $1=1;
      __label__ = 16; break;
    case 9: 
      var $33=$2;
      var $34=(($33)&255);
      var $35=(($34)|0)==251;
      if ($35) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $37=$4;
      var $38=_strcpy($37, ((STRING_TABLE.__str424)|0));
      $1=1;
      __label__ = 16; break;
    case 11: 
      var $40=$2;
      var $41=(($40)&255);
      var $42=(($41)|0)==252;
      if ($42) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $44=$4;
      var $45=_strcpy($44, ((STRING_TABLE.__str525)|0));
      $1=1;
      __label__ = 16; break;
    case 13: 
      var $47=$2;
      var $48=(($47)&255);
      var $49=(($48)|0)==253;
      if ($49) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $51=$4;
      var $52=_strcpy($51, ((STRING_TABLE.__str626)|0));
      $1=1;
      __label__ = 16; break;
    case 15: 
      $1=0;
      __label__ = 16; break;
    case 16: 
      var $55=$1;
      ;
      return $55;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_clx["X"]=1;

function _Sfx86OpcodeDec_duhhh($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==155;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$4;
      var $10=_strcpy($9, ((STRING_TABLE.__str27)|0));
      $1=1;
      __label__ = 6; break;
    case 3: 
      var $12=$2;
      var $13=(($12)&255);
      var $14=(($13)|0)==244;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$4;
      var $17=_strcpy($16, ((STRING_TABLE.__str128)|0));
      $1=1;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $20=$1;
      ;
      return $20;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeDec_nop($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)!=144;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      var $10=$4;
      var $11=_strcpy($10, ((STRING_TABLE.__str36)|0));
      $1=1;
      __label__ = 4; break;
    case 4: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeDec_segover($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==38;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$4;
      var $10=_strcpy($9, ((STRING_TABLE.__str53)|0));
      $1=2;
      __label__ = 10; break;
    case 3: 
      var $12=$2;
      var $13=(($12)&255);
      var $14=(($13)|0)==46;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$4;
      var $17=_strcpy($16, ((STRING_TABLE.__str154)|0));
      $1=2;
      __label__ = 10; break;
    case 5: 
      var $19=$2;
      var $20=(($19)&255);
      var $21=(($20)|0)==54;
      if ($21) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $23=$4;
      var $24=_strcpy($23, ((STRING_TABLE.__str255)|0));
      $1=2;
      __label__ = 10; break;
    case 7: 
      var $26=$2;
      var $27=(($26)&255);
      var $28=(($27)|0)==62;
      if ($28) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $30=$4;
      var $31=_strcpy($30, ((STRING_TABLE.__str356)|0));
      $1=2;
      __label__ = 10; break;
    case 9: 
      $1=0;
      __label__ = 10; break;
    case 10: 
      var $34=$1;
      ;
      return $34;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeDec_repetition($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==243;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$4;
      var $10=_strcpy($9, ((STRING_TABLE.__str457)|0));
      $1=2;
      __label__ = 6; break;
    case 3: 
      var $12=$2;
      var $13=(($12)&255);
      var $14=(($13)|0)==242;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$4;
      var $17=_strcpy($16, ((STRING_TABLE.__str558)|0));
      $1=2;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $20=$1;
      ;
      return $20;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeDec_lock($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==240;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$4;
      var $10=_strcpy($9, ((STRING_TABLE.__str659)|0));
      $1=2;
      __label__ = 4; break;
    case 3: 
      $1=0;
      __label__ = 4; break;
    case 4: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeExec_returns($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $seg;
      var $ofs;
      var $flg;
      var $popeye;
      var $popeye1;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==194;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$3;
      var $9=_softx86_fetch_exec_byte($8);
      var $10=(($9)&255);
      $popeye=$10;
      var $11=$3;
      var $12=_softx86_fetch_exec_byte($11);
      var $13=(($12)&255);
      var $14=$13 << 8;
      var $15=$popeye;
      var $16=(($15)&65535);
      var $17=$16 | $14;
      var $18=(($17) & 65535);
      $popeye=$18;
      var $19=$3;
      var $20=_softx86_stack_popw($19);
      $ofs=$20;
      var $21=$3;
      var $22=$ofs;
      var $23=(($22)&65535);
      var $24=_softx86_set_near_instruction_ptr($21, $23);
      var $25=$3;
      var $26=$popeye;
      var $27=(($26)&65535);
      _softx86_stack_discard_n($25, $27);
      $1=1;
      __label__ = 12; break;
    case 3: 
      var $29=$2;
      var $30=(($29)&255);
      var $31=(($30)|0)==195;
      if ($31) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $33=$3;
      var $34=_softx86_stack_popw($33);
      $ofs=$34;
      var $35=$3;
      var $36=$ofs;
      var $37=(($36)&65535);
      var $38=_softx86_set_near_instruction_ptr($35, $37);
      $1=1;
      __label__ = 12; break;
    case 5: 
      var $40=$2;
      var $41=(($40)&255);
      var $42=(($41)|0)==202;
      if ($42) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $44=$3;
      var $45=_softx86_fetch_exec_byte($44);
      var $46=(($45)&255);
      $popeye1=$46;
      var $47=$3;
      var $48=_softx86_fetch_exec_byte($47);
      var $49=(($48)&255);
      var $50=$49 << 8;
      var $51=$popeye1;
      var $52=(($51)&65535);
      var $53=$52 | $50;
      var $54=(($53) & 65535);
      $popeye1=$54;
      var $55=$3;
      var $56=_softx86_stack_popw($55);
      $ofs=$56;
      var $57=$3;
      var $58=_softx86_stack_popw($57);
      $seg=$58;
      var $59=$3;
      var $60=$seg;
      var $61=(($60)&65535);
      var $62=$ofs;
      var $63=(($62)&65535);
      var $64=_softx86_set_instruction_ptr($59, $61, $63);
      var $65=$3;
      var $66=$popeye1;
      var $67=(($66)&65535);
      _softx86_stack_discard_n($65, $67);
      $1=1;
      __label__ = 12; break;
    case 7: 
      var $69=$2;
      var $70=(($69)&255);
      var $71=(($70)|0)==203;
      if ($71) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $73=$3;
      var $74=_softx86_stack_popw($73);
      $ofs=$74;
      var $75=$3;
      var $76=_softx86_stack_popw($75);
      $seg=$76;
      var $77=$3;
      var $78=$seg;
      var $79=(($78)&65535);
      var $80=$ofs;
      var $81=(($80)&65535);
      var $82=_softx86_set_instruction_ptr($77, $79, $81);
      $1=1;
      __label__ = 12; break;
    case 9: 
      var $84=$2;
      var $85=(($84)&255);
      var $86=(($85)|0)==207;
      if ($86) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $88=$3;
      var $89=_softx86_stack_popw($88);
      $ofs=$89;
      var $90=$3;
      var $91=_softx86_stack_popw($90);
      $seg=$91;
      var $92=$3;
      var $93=_softx86_stack_popw($92);
      $flg=$93;
      var $94=$3;
      var $95=$seg;
      var $96=(($95)&65535);
      var $97=$ofs;
      var $98=(($97)&65535);
      var $99=_softx86_set_instruction_ptr($94, $96, $98);
      var $100=$flg;
      var $101=(($100)&65535);
      var $102=$3;
      var $103=(($102+4)|0);
      var $104=(($103+96)|0);
      var $105=$104;
      HEAP[$105]=$101;
      $1=1;
      __label__ = 12; break;
    case 11: 
      $1=0;
      __label__ = 12; break;
    case 12: 
      var $108=$1;
      ;
      return $108;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_returns["X"]=1;

function _Sfx86OpcodeDec_returns($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $popeye;
      var $popeye1;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==194;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$3;
      var $10=_softx86_fetch_dec_byte($9);
      var $11=(($10)&255);
      $popeye=$11;
      var $12=$3;
      var $13=_softx86_fetch_dec_byte($12);
      var $14=(($13)&255);
      var $15=$14 << 8;
      var $16=$popeye;
      var $17=(($16)&65535);
      var $18=$17 | $15;
      var $19=(($18) & 65535);
      $popeye=$19;
      var $20=$4;
      var $21=$popeye;
      var $22=(($21)&65535);
      var $23=_sprintf($20, ((STRING_TABLE.__str72)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$22,tempInt));
      $1=1;
      __label__ = 12; break;
    case 3: 
      var $25=$2;
      var $26=(($25)&255);
      var $27=(($26)|0)==195;
      if ($27) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $29=$4;
      var $30=_strcpy($29, ((STRING_TABLE.__str173)|0));
      $1=1;
      __label__ = 12; break;
    case 5: 
      var $32=$2;
      var $33=(($32)&255);
      var $34=(($33)|0)==202;
      if ($34) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $36=$3;
      var $37=_softx86_fetch_dec_byte($36);
      var $38=(($37)&255);
      $popeye1=$38;
      var $39=$3;
      var $40=_softx86_fetch_dec_byte($39);
      var $41=(($40)&255);
      var $42=$41 << 8;
      var $43=$popeye1;
      var $44=(($43)&65535);
      var $45=$44 | $42;
      var $46=(($45) & 65535);
      $popeye1=$46;
      var $47=$4;
      var $48=$popeye1;
      var $49=(($48)&65535);
      var $50=_sprintf($47, ((STRING_TABLE.__str274)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$49,tempInt));
      $1=1;
      __label__ = 12; break;
    case 7: 
      var $52=$2;
      var $53=(($52)&255);
      var $54=(($53)|0)==203;
      if ($54) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $56=$4;
      var $57=_strcpy($56, ((STRING_TABLE.__str375)|0));
      $1=1;
      __label__ = 12; break;
    case 9: 
      var $59=$2;
      var $60=(($59)&255);
      var $61=(($60)|0)==207;
      if ($61) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $63=$4;
      var $64=_strcpy($63, ((STRING_TABLE.__str476)|0));
      $1=1;
      __label__ = 12; break;
    case 11: 
      $1=0;
      __label__ = 12; break;
    case 12: 
      var $67=$1;
      ;
      return $67;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_returns["X"]=1;

function _Sfx86OpcodeExec_ahf($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==158;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$3;
      var $9=(($8+4)|0);
      var $10=(($9+96)|0);
      var $11=$10;
      var $12=(($11)|0);
      var $13=HEAP[$12];
      var $14=(($13)&255);
      var $15=$14 & -214;
      var $16=(($15) & 255);
      HEAP[$12]=$16;
      var $17=$3;
      var $18=(($17+4)|0);
      var $19=(($18)|0);
      var $20=(($19)|0);
      var $21=$20;
      var $22=(($21+1)|0);
      var $23=HEAP[$22];
      var $24=(($23)&255);
      var $25=$24 & 213;
      var $26=$3;
      var $27=(($26+4)|0);
      var $28=(($27+96)|0);
      var $29=$28;
      var $30=(($29)|0);
      var $31=HEAP[$30];
      var $32=(($31)&255);
      var $33=$32 | $25;
      var $34=(($33) & 255);
      HEAP[$30]=$34;
      $1=1;
      __label__ = 6; break;
    case 3: 
      var $36=$2;
      var $37=(($36)&255);
      var $38=(($37)|0)==159;
      if ($38) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $40=$3;
      var $41=(($40+4)|0);
      var $42=(($41+96)|0);
      var $43=$42;
      var $44=(($43)|0);
      var $45=HEAP[$44];
      var $46=$3;
      var $47=(($46+4)|0);
      var $48=(($47)|0);
      var $49=(($48)|0);
      var $50=$49;
      var $51=(($50+1)|0);
      HEAP[$51]=$45;
      $1=1;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $54=$1;
      ;
      return $54;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_ahf["X"]=1;

function _Sfx86OpcodeExec_enterleave($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $Size;
      var $FrameTemp;
      var $NestingLevel;
      var $i;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==200;
      if ($6) { __label__ = 2; break; } else { __label__ = 10; break; }
    case 2: 
      var $8=$3;
      var $9=(($8+200)|0);
      var $10=HEAP[$9];
      var $11=(($10)|0) >= 1;
      if ($11) { __label__ = 3; break; } else { __label__ = 10; break; }
    case 3: 
      var $13=$3;
      var $14=_softx86_fetch_exec_byte($13);
      var $15=(($14)&255);
      $Size=$15;
      var $16=$3;
      var $17=_softx86_fetch_exec_byte($16);
      var $18=(($17)&255);
      var $19=$18 << 8;
      var $20=$Size;
      var $21=(($20)&65535);
      var $22=$21 | $19;
      var $23=(($22) & 65535);
      $Size=$23;
      var $24=$3;
      var $25=_softx86_fetch_exec_byte($24);
      var $26=(($25)&255);
      var $27=$26 & 31;
      var $28=(($27) & 255);
      $NestingLevel=$28;
      var $29=$3;
      var $30=$3;
      var $31=(($30+4)|0);
      var $32=(($31)|0);
      var $33=(($32+20)|0);
      var $34=$33;
      var $35=(($34)|0);
      var $36=HEAP[$35];
      _softx86_stack_pushw($29, $36);
      var $37=$3;
      var $38=(($37+4)|0);
      var $39=(($38)|0);
      var $40=(($39+16)|0);
      var $41=$40;
      var $42=(($41)|0);
      var $43=HEAP[$42];
      $FrameTemp=$43;
      var $44=$NestingLevel;
      var $45=(($44)&255);
      var $46=(($45)|0) > 0;
      if ($46) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      $i=1;
      __label__ = 5; break;
    case 5: 
      var $49=$i;
      var $50=$NestingLevel;
      var $51=(($50)&255);
      var $52=(($49)|0) < (($51)|0);
      if ($52) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $54=$3;
      var $55=(($54+4)|0);
      var $56=(($55)|0);
      var $57=(($56+20)|0);
      var $58=$57;
      var $59=(($58)|0);
      var $60=HEAP[$59];
      var $61=(($60)&65535);
      var $62=(($61-2)|0);
      var $63=(($62) & 65535);
      HEAP[$59]=$63;
      var $64=$3;
      var $65=$3;
      var $66=(($65+4)|0);
      var $67=(($66)|0);
      var $68=(($67+20)|0);
      var $69=$68;
      var $70=(($69)|0);
      var $71=HEAP[$70];
      _softx86_stack_pushw($64, $71);
      __label__ = 7; break;
    case 7: 
      var $73=$i;
      var $74=(($73+1)|0);
      $i=$74;
      __label__ = 5; break;
    case 8: 
      var $76=$3;
      var $77=$FrameTemp;
      _softx86_stack_pushw($76, $77);
      __label__ = 9; break;
    case 9: 
      var $79=$FrameTemp;
      var $80=$3;
      var $81=(($80+4)|0);
      var $82=(($81)|0);
      var $83=(($82+20)|0);
      var $84=$83;
      var $85=(($84)|0);
      HEAP[$85]=$79;
      var $86=$3;
      var $87=$3;
      var $88=(($87+4)|0);
      var $89=(($88+32)|0);
      var $90=(($89+16)|0);
      var $91=(($90)|0);
      var $92=HEAP[$91];
      var $93=(($92)&65535);
      var $94=$3;
      var $95=(($94+4)|0);
      var $96=(($95)|0);
      var $97=(($96+20)|0);
      var $98=$97;
      var $99=(($98)|0);
      var $100=HEAP[$99];
      var $101=(($100)&65535);
      var $102=$Size;
      var $103=(($102)&65535);
      var $104=(($101-$103)|0);
      var $105=_softx86_set_stack_ptr($86, $93, $104);
      $1=1;
      __label__ = 14; break;
    case 10: 
      var $107=$2;
      var $108=(($107)&255);
      var $109=(($108)|0)==201;
      if ($109) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $111=$3;
      var $112=(($111+200)|0);
      var $113=HEAP[$112];
      var $114=(($113)|0) >= 1;
      if ($114) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $116=$3;
      var $117=$3;
      var $118=(($117+4)|0);
      var $119=(($118+32)|0);
      var $120=(($119+16)|0);
      var $121=(($120)|0);
      var $122=HEAP[$121];
      var $123=(($122)&65535);
      var $124=$3;
      var $125=(($124+4)|0);
      var $126=(($125)|0);
      var $127=(($126+20)|0);
      var $128=$127;
      var $129=(($128)|0);
      var $130=HEAP[$129];
      var $131=(($130)&65535);
      var $132=_softx86_set_stack_ptr($116, $123, $131);
      var $133=$3;
      var $134=_softx86_stack_popw($133);
      var $135=$3;
      var $136=(($135+4)|0);
      var $137=(($136)|0);
      var $138=(($137+20)|0);
      var $139=$138;
      var $140=(($139)|0);
      HEAP[$140]=$134;
      $1=1;
      __label__ = 14; break;
    case 13: 
      $1=0;
      __label__ = 14; break;
    case 14: 
      var $143=$1;
      ;
      return $143;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_enterleave["X"]=1;

function _Sfx86OpcodeDec_enterleave($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $popeye;
      var $imm;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==200;
      if ($7) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $9=$3;
      var $10=(($9+200)|0);
      var $11=HEAP[$10];
      var $12=(($11)|0) >= 1;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$3;
      var $15=_softx86_fetch_dec_byte($14);
      var $16=(($15)&255);
      $popeye=$16;
      var $17=$3;
      var $18=_softx86_fetch_dec_byte($17);
      var $19=(($18)&255);
      var $20=$19 << 8;
      var $21=$popeye;
      var $22=(($21)&65535);
      var $23=$22 | $20;
      var $24=(($23) & 65535);
      $popeye=$24;
      var $25=$3;
      var $26=_softx86_fetch_dec_byte($25);
      $imm=$26;
      var $27=$4;
      var $28=$popeye;
      var $29=(($28)&65535);
      var $30=$imm;
      var $31=(($30)&255);
      var $32=_sprintf($27, ((STRING_TABLE.__str577)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$29,HEAP[tempInt+4]=$31,tempInt));
      $1=1;
      __label__ = 8; break;
    case 4: 
      var $34=$2;
      var $35=(($34)&255);
      var $36=(($35)|0)==201;
      if ($36) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $38=$3;
      var $39=(($38+200)|0);
      var $40=HEAP[$39];
      var $41=(($40)|0) >= 1;
      if ($41) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $43=$4;
      var $44=_strcpy($43, ((STRING_TABLE.__str678)|0));
      $1=1;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $47=$1;
      ;
      return $47;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_enterleave["X"]=1;

function _Sfx86OpcodeExec_pop($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $val;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0) >= 88;
      if ($6) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $8=$2;
      var $9=(($8)&255);
      var $10=(($9)|0) <= 95;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $12=$3;
      var $13=_softx86_stack_popw($12);
      $val=$13;
      var $14=$val;
      var $15=$2;
      var $16=(($15)&255);
      var $17=(($16-88)|0);
      var $18=$3;
      var $19=(($18+4)|0);
      var $20=(($19)|0);
      var $21=(($20+($17<<2))|0);
      var $22=$21;
      var $23=(($22)|0);
      HEAP[$23]=$14;
      $1=1;
      __label__ = 16; break;
    case 4: 
      var $25=$2;
      var $26=(($25)&255);
      var $27=(($26)|0)==31;
      if ($27) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $29=$3;
      var $30=_softx86_stack_popw($29);
      $val=$30;
      var $31=$3;
      var $32=$val;
      var $33=(($32)&65535);
      var $34=_softx86_setsegval($31, 3, $33);
      $1=1;
      __label__ = 16; break;
    case 6: 
      var $36=$2;
      var $37=(($36)&255);
      var $38=(($37)|0)==7;
      if ($38) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $40=$3;
      var $41=_softx86_stack_popw($40);
      $val=$41;
      var $42=$3;
      var $43=$val;
      var $44=(($43)&65535);
      var $45=_softx86_setsegval($42, 0, $44);
      $1=1;
      __label__ = 16; break;
    case 8: 
      var $47=$2;
      var $48=(($47)&255);
      var $49=(($48)|0)==23;
      if ($49) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $51=$3;
      var $52=_softx86_stack_popw($51);
      $val=$52;
      var $53=$3;
      var $54=$val;
      var $55=(($54)&65535);
      var $56=_softx86_setsegval($53, 2, $55);
      $1=1;
      __label__ = 16; break;
    case 10: 
      var $58=$2;
      var $59=(($58)&255);
      var $60=(($59)|0)==15;
      if ($60) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $62=$3;
      var $63=(($62+200)|0);
      var $64=HEAP[$63];
      var $65=(($64)|0) <= 1;
      if ($65) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $67=$3;
      var $68=_softx86_stack_popw($67);
      $val=$68;
      var $69=$3;
      var $70=$val;
      var $71=(($70)&65535);
      var $72=_softx86_setsegval($69, 1, $71);
      $1=1;
      __label__ = 16; break;
    case 13: 
      var $74=$2;
      var $75=(($74)&255);
      var $76=(($75)|0)==157;
      if ($76) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $78=$3;
      var $79=_softx86_stack_popw($78);
      var $80=$3;
      var $81=(($80+4)|0);
      var $82=(($81+96)|0);
      var $83=$82;
      var $84=(($83)|0);
      HEAP[$84]=$79;
      $1=1;
      __label__ = 16; break;
    case 15: 
      $1=0;
      __label__ = 16; break;
    case 16: 
      var $87=$1;
      ;
      return $87;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_pop["X"]=1;

function _Sfx86OpcodeDec_pop($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0) >= 88;
      if ($7) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=(($10)|0) <= 95;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$4;
      var $14=$2;
      var $15=(($14)&255);
      var $16=(($15-88)|0);
      var $17=((_sx86_regs16+($16<<2))|0);
      var $18=HEAP[$17];
      var $19=_sprintf($13, ((STRING_TABLE.__str87)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$18,tempInt));
      $1=1;
      __label__ = 16; break;
    case 4: 
      var $21=$2;
      var $22=(($21)&255);
      var $23=(($22)|0)==31;
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $25=$4;
      var $26=_strcpy($25, ((STRING_TABLE.__str188)|0));
      $1=1;
      __label__ = 16; break;
    case 6: 
      var $28=$2;
      var $29=(($28)&255);
      var $30=(($29)|0)==7;
      if ($30) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $32=$4;
      var $33=_strcpy($32, ((STRING_TABLE.__str289)|0));
      $1=1;
      __label__ = 16; break;
    case 8: 
      var $35=$2;
      var $36=(($35)&255);
      var $37=(($36)|0)==23;
      if ($37) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $39=$4;
      var $40=_strcpy($39, ((STRING_TABLE.__str390)|0));
      $1=1;
      __label__ = 16; break;
    case 10: 
      var $42=$2;
      var $43=(($42)&255);
      var $44=(($43)|0)==15;
      if ($44) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $46=$3;
      var $47=(($46+200)|0);
      var $48=HEAP[$47];
      var $49=(($48)|0) <= 1;
      if ($49) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $51=$4;
      var $52=_strcpy($51, ((STRING_TABLE.__str491)|0));
      $1=1;
      __label__ = 16; break;
    case 13: 
      var $54=$2;
      var $55=(($54)&255);
      var $56=(($55)|0)==157;
      if ($56) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $58=$4;
      var $59=_strcpy($58, ((STRING_TABLE.__str592)|0));
      $1=1;
      __label__ = 16; break;
    case 15: 
      $1=0;
      __label__ = 16; break;
    case 16: 
      var $62=$1;
      ;
      return $62;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_pop["X"]=1;

function _Sfx86OpcodeExec_push($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $val;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0) >= 80;
      if ($6) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: 
      var $8=$2;
      var $9=(($8)&255);
      var $10=(($9)|0) <= 87;
      if ($10) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $12=$2;
      var $13=(($12)&255);
      var $14=(($13)|0)==84;
      if ($14) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $16=$3;
      var $17=(($16+180)|0);
      var $18=(($17+1)|0);
      var $19=HEAP[$18];
      var $20=(($19)&255);
      var $21=(($20)|0)!=0;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $23=$2;
      var $24=(($23)&255);
      var $25=(($24-80)|0);
      var $26=$3;
      var $27=(($26+4)|0);
      var $28=(($27)|0);
      var $29=(($28+($25<<2))|0);
      var $30=$29;
      var $31=(($30)|0);
      var $32=HEAP[$31];
      var $33=(($32)&65535);
      var $34=(($33-2)|0);
      var $35=(($34) & 65535);
      $val=$35;
      __label__ = 7; break;
    case 6: 
      var $37=$2;
      var $38=(($37)&255);
      var $39=(($38-80)|0);
      var $40=$3;
      var $41=(($40+4)|0);
      var $42=(($41)|0);
      var $43=(($42+($39<<2))|0);
      var $44=$43;
      var $45=(($44)|0);
      var $46=HEAP[$45];
      $val=$46;
      __label__ = 7; break;
    case 7: 
      var $48=$3;
      var $49=$val;
      _softx86_stack_pushw($48, $49);
      $1=1;
      __label__ = 19; break;
    case 8: 
      var $51=$2;
      var $52=(($51)&255);
      var $53=(($52)|0)==30;
      if ($53) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $55=$3;
      var $56=$3;
      var $57=(($56+4)|0);
      var $58=(($57+32)|0);
      var $59=(($58+24)|0);
      var $60=(($59)|0);
      var $61=HEAP[$60];
      _softx86_stack_pushw($55, $61);
      $1=1;
      __label__ = 19; break;
    case 10: 
      var $63=$2;
      var $64=(($63)&255);
      var $65=(($64)|0)==6;
      if ($65) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $67=$3;
      var $68=$3;
      var $69=(($68+4)|0);
      var $70=(($69+32)|0);
      var $71=(($70)|0);
      var $72=(($71)|0);
      var $73=HEAP[$72];
      _softx86_stack_pushw($67, $73);
      $1=1;
      __label__ = 19; break;
    case 12: 
      var $75=$2;
      var $76=(($75)&255);
      var $77=(($76)|0)==22;
      if ($77) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $79=$3;
      var $80=$3;
      var $81=(($80+4)|0);
      var $82=(($81+32)|0);
      var $83=(($82+16)|0);
      var $84=(($83)|0);
      var $85=HEAP[$84];
      _softx86_stack_pushw($79, $85);
      $1=1;
      __label__ = 19; break;
    case 14: 
      var $87=$2;
      var $88=(($87)&255);
      var $89=(($88)|0)==14;
      if ($89) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $91=$3;
      var $92=$3;
      var $93=(($92+4)|0);
      var $94=(($93+32)|0);
      var $95=(($94+8)|0);
      var $96=(($95)|0);
      var $97=HEAP[$96];
      _softx86_stack_pushw($91, $97);
      $1=1;
      __label__ = 19; break;
    case 16: 
      var $99=$2;
      var $100=(($99)&255);
      var $101=(($100)|0)==156;
      if ($101) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $103=$3;
      var $104=$3;
      var $105=(($104+4)|0);
      var $106=(($105+96)|0);
      var $107=$106;
      var $108=(($107)|0);
      var $109=HEAP[$108];
      _softx86_stack_pushw($103, $109);
      $1=1;
      __label__ = 19; break;
    case 18: 
      $1=0;
      __label__ = 19; break;
    case 19: 
      var $112=$1;
      ;
      return $112;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_push["X"]=1;

function _Sfx86OpcodeDec_push($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0) >= 80;
      if ($7) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=(($10)|0) <= 87;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$4;
      var $14=$2;
      var $15=(($14)&255);
      var $16=(($15-80)|0);
      var $17=((_sx86_regs16+($16<<2))|0);
      var $18=HEAP[$17];
      var $19=_sprintf($13, ((STRING_TABLE.__str693)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$18,tempInt));
      $1=1;
      __label__ = 15; break;
    case 4: 
      var $21=$2;
      var $22=(($21)&255);
      var $23=(($22)|0)==30;
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $25=$4;
      var $26=_strcpy($25, ((STRING_TABLE.__str794)|0));
      $1=1;
      __label__ = 15; break;
    case 6: 
      var $28=$2;
      var $29=(($28)&255);
      var $30=(($29)|0)==6;
      if ($30) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $32=$4;
      var $33=_strcpy($32, ((STRING_TABLE.__str895)|0));
      $1=1;
      __label__ = 15; break;
    case 8: 
      var $35=$2;
      var $36=(($35)&255);
      var $37=(($36)|0)==22;
      if ($37) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $39=$4;
      var $40=_strcpy($39, ((STRING_TABLE.__str996)|0));
      $1=1;
      __label__ = 15; break;
    case 10: 
      var $42=$2;
      var $43=(($42)&255);
      var $44=(($43)|0)==14;
      if ($44) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $46=$4;
      var $47=_strcpy($46, ((STRING_TABLE.__str1097)|0));
      $1=1;
      __label__ = 15; break;
    case 12: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=(($50)|0)==156;
      if ($51) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $53=$4;
      var $54=_strcpy($53, ((STRING_TABLE.__str1198)|0));
      $1=1;
      __label__ = 15; break;
    case 14: 
      $1=0;
      __label__ = 15; break;
    case 15: 
      var $57=$1;
      ;
      return $57;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_push["X"]=1;

function _Sfx86OpcodeDec_ahf($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==158;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$4;
      var $10=_strcpy($9, ((STRING_TABLE.__str1299)|0));
      $1=1;
      __label__ = 6; break;
    case 3: 
      var $12=$2;
      var $13=(($12)&255);
      var $14=(($13)|0)==159;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$4;
      var $17=_strcpy($16, ((STRING_TABLE.__str13100)|0));
      $1=1;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $20=$1;
      ;
      return $20;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_step_def_on_hw_int($_ctx, $i) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$_ctx;
  $2=$i;
  ;
  return;
}


function _softx86_step_def_on_hw_int_ack($_ctx, $i) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$_ctx;
  $2=$i;
  ;
  return;
}


function _softx86_step_def_on_sw_int($_ctx, $i) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$_ctx;
  $2=$i;
  ;
  return;
}


function _softx86_step_def_on_idle_cycle($_ctx) {
  ;
  var __label__;

  var $1;
  $1=$_ctx;
  ;
  return;
}


function _softx86_step_def_on_nmi_int($_ctx) {
  ;
  var __label__;

  var $1;
  $1=$_ctx;
  ;
  return;
}


function _softx86_step_def_on_nmi_int_ack($_ctx) {
  ;
  var __label__;

  var $1;
  $1=$_ctx;
  ;
  return;
}


function _softx86_step_def_on_fpu_opcode_dec($_ctx86, $_ctx87, $opcode, $buf) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$_ctx86;
  $2=$_ctx87;
  $3=$opcode;
  $4=$buf;
  ;
  return 0;
}


function _softx86_step_def_on_fpu_opcode_exec($_ctx86, $_ctx87, $opcode) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$_ctx86;
  $2=$_ctx87;
  $3=$opcode;
  ;
  return 0;
}


function _softx86_step_def_on_reset($_ctx) {
  ;
  var __label__;

  var $1;
  $1=$_ctx;
  ;
  return;
}


function _softx86_getversion($major, $minor, $subminor) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$major;
      $3=$minor;
      $4=$subminor;
      var $5=$3;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $8=$2;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$4;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      $1=0;
      __label__ = 6; break;
    case 5: 
      var $15=$2;
      HEAP[$15]=0;
      var $16=$3;
      HEAP[$16]=0;
      var $17=$4;
      HEAP[$17]=29;
      $1=1;
      __label__ = 6; break;
    case 6: 
      var $19=$1;
      ;
      return $19;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_free($ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $2=$ctx;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      $1=1;
      __label__ = 4; break;
    case 4: 
      var $8=$1;
      ;
      return $8;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_step_def_on_write_io($_ctx, $address, $buf, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ctx;
      $1=$_ctx;
      $2=$address;
      $3=$buf;
      $4=$size;
      var $5=$1;
      var $6=$5;
      $ctx=$6;
      var $7=$ctx;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $10=$3;
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$4;
      var $14=(($13)|0) < 1;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_step_def_on_write_memory($_ctx, $address, $buf, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ctx;
      $1=$_ctx;
      $2=$address;
      $3=$buf;
      $4=$size;
      var $5=$1;
      var $6=$5;
      $ctx=$6;
      var $7=$ctx;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $10=$3;
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$4;
      var $14=(($13)|0) < 1;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_setsegval($ctx, $sreg_id, $x) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$ctx;
      $3=$sreg_id;
      $4=$x;
      var $5=$3;
      var $6=(($5)|0) > 7;
      if ($6) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $8=$3;
      var $9=(($8)|0) < 0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 5; break;
    case 4: 
      var $12=$4;
      var $13=(($12) & 65535);
      var $14=$3;
      var $15=$2;
      var $16=(($15+4)|0);
      var $17=(($16+32)|0);
      var $18=(($17+($14<<3))|0);
      var $19=(($18)|0);
      HEAP[$19]=$13;
      var $20=$4;
      var $21=$20 << 4;
      var $22=$3;
      var $23=$2;
      var $24=(($23+4)|0);
      var $25=(($24+32)|0);
      var $26=(($25+($22<<3))|0);
      var $27=(($26+4)|0);
      HEAP[$27]=$21;
      $1=1;
      __label__ = 5; break;
    case 5: 
      var $29=$1;
      ;
      return $29;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeExec_pusha($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $temp_sp;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==96;
      if ($6) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $8=$3;
      var $9=(($8+200)|0);
      var $10=HEAP[$9];
      var $11=(($10)|0) >= 2;
      if ($11) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $13=$3;
      var $14=(($13+4)|0);
      var $15=(($14)|0);
      var $16=(($15+16)|0);
      var $17=$16;
      var $18=(($17)|0);
      var $19=HEAP[$18];
      $temp_sp=$19;
      var $20=$3;
      var $21=$3;
      var $22=(($21+4)|0);
      var $23=(($22)|0);
      var $24=(($23)|0);
      var $25=$24;
      var $26=(($25)|0);
      var $27=HEAP[$26];
      _softx86_stack_pushw($20, $27);
      var $28=$3;
      var $29=$3;
      var $30=(($29+4)|0);
      var $31=(($30)|0);
      var $32=(($31+4)|0);
      var $33=$32;
      var $34=(($33)|0);
      var $35=HEAP[$34];
      _softx86_stack_pushw($28, $35);
      var $36=$3;
      var $37=$3;
      var $38=(($37+4)|0);
      var $39=(($38)|0);
      var $40=(($39+8)|0);
      var $41=$40;
      var $42=(($41)|0);
      var $43=HEAP[$42];
      _softx86_stack_pushw($36, $43);
      var $44=$3;
      var $45=$3;
      var $46=(($45+4)|0);
      var $47=(($46)|0);
      var $48=(($47+12)|0);
      var $49=$48;
      var $50=(($49)|0);
      var $51=HEAP[$50];
      _softx86_stack_pushw($44, $51);
      var $52=$3;
      var $53=(($52+180)|0);
      var $54=(($53+1)|0);
      var $55=HEAP[$54];
      var $56=(($55 << 24) >> 24)!=0;
      if ($56) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $58=$3;
      var $59=$3;
      var $60=(($59+4)|0);
      var $61=(($60)|0);
      var $62=(($61+16)|0);
      var $63=$62;
      var $64=(($63)|0);
      var $65=HEAP[$64];
      _softx86_stack_pushw($58, $65);
      __label__ = 6; break;
    case 5: 
      var $67=$3;
      var $68=$temp_sp;
      _softx86_stack_pushw($67, $68);
      __label__ = 6; break;
    case 6: 
      var $70=$3;
      var $71=$3;
      var $72=(($71+4)|0);
      var $73=(($72)|0);
      var $74=(($73+20)|0);
      var $75=$74;
      var $76=(($75)|0);
      var $77=HEAP[$76];
      _softx86_stack_pushw($70, $77);
      var $78=$3;
      var $79=$3;
      var $80=(($79+4)|0);
      var $81=(($80)|0);
      var $82=(($81+24)|0);
      var $83=$82;
      var $84=(($83)|0);
      var $85=HEAP[$84];
      _softx86_stack_pushw($78, $85);
      var $86=$3;
      var $87=$3;
      var $88=(($87+4)|0);
      var $89=(($88)|0);
      var $90=(($89+28)|0);
      var $91=$90;
      var $92=(($91)|0);
      var $93=HEAP[$92];
      _softx86_stack_pushw($86, $93);
      $1=1;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $96=$1;
      ;
      return $96;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_pusha["X"]=1;

function _Sfx86OpcodeDec_pusha($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==96;
      if ($7) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $9=$3;
      var $10=(($9+200)|0);
      var $11=HEAP[$10];
      var $12=(($11)|0) >= 2;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$4;
      var $15=_strcpy($14, ((STRING_TABLE.__str14101)|0));
      $1=1;
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $18=$1;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeExec_popa($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==97;
      if ($6) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $8=$3;
      var $9=(($8+200)|0);
      var $10=HEAP[$9];
      var $11=(($10)|0) >= 2;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$3;
      var $14=_softx86_stack_popw($13);
      var $15=$3;
      var $16=(($15+4)|0);
      var $17=(($16)|0);
      var $18=(($17+28)|0);
      var $19=$18;
      var $20=(($19)|0);
      HEAP[$20]=$14;
      var $21=$3;
      var $22=_softx86_stack_popw($21);
      var $23=$3;
      var $24=(($23+4)|0);
      var $25=(($24)|0);
      var $26=(($25+24)|0);
      var $27=$26;
      var $28=(($27)|0);
      HEAP[$28]=$22;
      var $29=$3;
      var $30=_softx86_stack_popw($29);
      var $31=$3;
      var $32=(($31+4)|0);
      var $33=(($32)|0);
      var $34=(($33+20)|0);
      var $35=$34;
      var $36=(($35)|0);
      HEAP[$36]=$30;
      var $37=$3;
      var $38=_softx86_stack_popw($37);
      var $39=$3;
      var $40=_softx86_stack_popw($39);
      var $41=$3;
      var $42=(($41+4)|0);
      var $43=(($42)|0);
      var $44=(($43+12)|0);
      var $45=$44;
      var $46=(($45)|0);
      HEAP[$46]=$40;
      var $47=$3;
      var $48=_softx86_stack_popw($47);
      var $49=$3;
      var $50=(($49+4)|0);
      var $51=(($50)|0);
      var $52=(($51+8)|0);
      var $53=$52;
      var $54=(($53)|0);
      HEAP[$54]=$48;
      var $55=$3;
      var $56=_softx86_stack_popw($55);
      var $57=$3;
      var $58=(($57+4)|0);
      var $59=(($58)|0);
      var $60=(($59+4)|0);
      var $61=$60;
      var $62=(($61)|0);
      HEAP[$62]=$56;
      var $63=$3;
      var $64=_softx86_stack_popw($63);
      var $65=$3;
      var $66=(($65+4)|0);
      var $67=(($66)|0);
      var $68=(($67)|0);
      var $69=$68;
      var $70=(($69)|0);
      HEAP[$70]=$64;
      $1=1;
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $73=$1;
      ;
      return $73;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_popa["X"]=1;

function _Sfx86OpcodeDec_popa($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==97;
      if ($7) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $9=$3;
      var $10=(($9+200)|0);
      var $11=HEAP[$10];
      var $12=(($11)|0) >= 2;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$4;
      var $15=_strcpy($14, ((STRING_TABLE.__str15102)|0));
      $1=1;
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $18=$1;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_reset($ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $2=$ctx;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 10; break;
    case 3: 
      var $7=$2;
      var $8=(($7+200)|0);
      var $9=HEAP[$8];
      var $10=(($9)|0) >= 3;
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $12=$2;
      var $13=(($12+188)|0);
      HEAP[$13]=16777215;
      __label__ = 6; break;
    case 5: 
      var $15=$2;
      var $16=(($15+188)|0);
      HEAP[$16]=1048575;
      __label__ = 6; break;
    case 6: 
      var $18=$2;
      var $19=(($18+200)|0);
      var $20=HEAP[$19];
      var $21=(($20)|0) >= 1;
      if ($21) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $23=$2;
      var $24=(($23+192)|0);
      HEAP[$24]=2;
      __label__ = 9; break;
    case 8: 
      var $26=$2;
      var $27=(($26+192)|0);
      HEAP[$27]=1;
      __label__ = 9; break;
    case 9: 
      var $29=$2;
      var $30=(($29+192)|0);
      var $31=HEAP[$30];
      var $32=(($31-1)|0);
      var $33=-1 << $32;
      var $34=$2;
      var $35=(($34+196)|0);
      HEAP[$35]=$33;
      var $36=$2;
      var $37=(($36+4)|0);
      var $38=(($37)|0);
      var $39=(($38)|0);
      var $40=$39;
      HEAP[$40]=0;
      var $41=$2;
      var $42=(($41+4)|0);
      var $43=(($42)|0);
      var $44=(($43+12)|0);
      var $45=$44;
      HEAP[$45]=0;
      var $46=$2;
      var $47=(($46+4)|0);
      var $48=(($47)|0);
      var $49=(($48+4)|0);
      var $50=$49;
      HEAP[$50]=0;
      var $51=$2;
      var $52=(($51+4)|0);
      var $53=(($52)|0);
      var $54=(($53+8)|0);
      var $55=$54;
      HEAP[$55]=0;
      var $56=$2;
      var $57=(($56+4)|0);
      var $58=(($57)|0);
      var $59=(($58+24)|0);
      var $60=$59;
      HEAP[$60]=0;
      var $61=$2;
      var $62=(($61+4)|0);
      var $63=(($62)|0);
      var $64=(($63+28)|0);
      var $65=$64;
      HEAP[$65]=0;
      var $66=$2;
      var $67=(($66+4)|0);
      var $68=(($67)|0);
      var $69=(($68+16)|0);
      var $70=$69;
      HEAP[$70]=0;
      var $71=$2;
      var $72=(($71+4)|0);
      var $73=(($72)|0);
      var $74=(($73+20)|0);
      var $75=$74;
      HEAP[$75]=0;
      var $76=$2;
      var $77=(($76+4)|0);
      var $78=(($77+96)|0);
      var $79=$78;
      HEAP[$79]=2;
      var $80=$2;
      var $81=_softx86_setsegval($80, 3, 61440);
      var $82=$2;
      var $83=_softx86_setsegval($82, 0, 61440);
      var $84=$2;
      var $85=_softx86_setsegval($84, 2, 61440);
      var $86=$2;
      var $87=(($86+4)|0);
      var $88=(($87)|0);
      var $89=(($88)|0);
      var $90=$89;
      var $91=(($90)|0);
      var $92=$2;
      var $93=(($92+204)|0);
      var $94=(($93)|0);
      HEAP[$94]=$91;
      var $95=$2;
      var $96=(($95+4)|0);
      var $97=(($96)|0);
      var $98=(($97+4)|0);
      var $99=$98;
      var $100=(($99)|0);
      var $101=$2;
      var $102=(($101+204)|0);
      var $103=(($102+4)|0);
      HEAP[$103]=$100;
      var $104=$2;
      var $105=(($104+4)|0);
      var $106=(($105)|0);
      var $107=(($106+8)|0);
      var $108=$107;
      var $109=(($108)|0);
      var $110=$2;
      var $111=(($110+204)|0);
      var $112=(($111+8)|0);
      HEAP[$112]=$109;
      var $113=$2;
      var $114=(($113+4)|0);
      var $115=(($114)|0);
      var $116=(($115+12)|0);
      var $117=$116;
      var $118=(($117)|0);
      var $119=$2;
      var $120=(($119+204)|0);
      var $121=(($120+12)|0);
      HEAP[$121]=$118;
      var $122=$2;
      var $123=(($122+4)|0);
      var $124=(($123)|0);
      var $125=(($124)|0);
      var $126=$125;
      var $127=(($126+1)|0);
      var $128=$2;
      var $129=(($128+204)|0);
      var $130=(($129+16)|0);
      HEAP[$130]=$127;
      var $131=$2;
      var $132=(($131+4)|0);
      var $133=(($132)|0);
      var $134=(($133+4)|0);
      var $135=$134;
      var $136=(($135+1)|0);
      var $137=$2;
      var $138=(($137+204)|0);
      var $139=(($138+20)|0);
      HEAP[$139]=$136;
      var $140=$2;
      var $141=(($140+4)|0);
      var $142=(($141)|0);
      var $143=(($142+8)|0);
      var $144=$143;
      var $145=(($144+1)|0);
      var $146=$2;
      var $147=(($146+204)|0);
      var $148=(($147+24)|0);
      HEAP[$148]=$145;
      var $149=$2;
      var $150=(($149+4)|0);
      var $151=(($150)|0);
      var $152=(($151+12)|0);
      var $153=$152;
      var $154=(($153+1)|0);
      var $155=$2;
      var $156=(($155+204)|0);
      var $157=(($156+28)|0);
      HEAP[$157]=$154;
      var $158=$2;
      var $159=_softx86_setsegval($158, 1, 61440);
      var $160=$2;
      var $161=(($160+4)|0);
      var $162=(($161+100)|0);
      HEAP[$162]=65520;
      var $163=$2;
      var $164=(($163+4)|0);
      var $165=(($164+120)|0);
      HEAP[$165]=0;
      var $166=$2;
      var $167=(($166+4)|0);
      var $168=(($167+122)|0);
      HEAP[$168]=0;
      var $169=$2;
      var $170=(($169+200)|0);
      var $171=HEAP[$170];
      var $172=(($171)|0) <= 1;
      var $173=$172 ? 1 : 0;
      var $174=(($173) & 255);
      var $175=$2;
      var $176=(($175+180)|0);
      var $177=(($176)|0);
      HEAP[$177]=$174;
      var $178=$2;
      var $179=(($178+200)|0);
      var $180=HEAP[$179];
      var $181=(($180)|0) <= 2;
      var $182=$181 ? 1 : 0;
      var $183=(($182) & 255);
      var $184=$2;
      var $185=(($184+180)|0);
      var $186=(($185+1)|0);
      HEAP[$186]=$183;
      var $187=$2;
      var $188=(($187+200)|0);
      var $189=HEAP[$188];
      var $190=(($189)|0) >= 3;
      var $191=$190 ? 1 : 0;
      var $192=(($191) & 255);
      var $193=$2;
      var $194=(($193+180)|0);
      var $195=(($194+2)|0);
      HEAP[$195]=$192;
      var $196=$2;
      var $197=(($196+184)|0);
      HEAP[$197]=_optab8086;
      var $198=$2;
      var $199=(($198+128)|0);
      var $200=(($199+40)|0);
      var $201=HEAP[$200];
      var $202=$2;
      var $203=$202;
      FUNCTION_TABLE[$201]($203);
      $1=1;
      __label__ = 10; break;
    case 10: 
      var $205=$1;
      ;
      return $205;
    default: assert(0, "bad label: " + __label__);
  }
}
_softx86_reset["X"]=1;

function _softx86_init($ctx, $level) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $2=$ctx;
      $3=$level;
      $ret=1;
      var $4=$2;
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 12; break;
    case 3: 
      var $8=$3;
      var $9=(($8)|0) > 3;
      if ($9) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=0;
      __label__ = 12; break;
    case 5: 
      var $12=$3;
      var $13=(($12)|0) < 0;
      if ($13) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=0;
      __label__ = 12; break;
    case 7: 
      var $16=$3;
      var $17=(($16)|0) > 1;
      if ($17) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $ret=2;
      __label__ = 9; break;
    case 9: 
      var $20=$3;
      var $21=$2;
      var $22=(($21+200)|0);
      HEAP[$22]=$20;
      var $23=$2;
      var $24=(($23)|0);
      HEAP[$24]=0;
      var $25=$2;
      var $26=(($25+1)|0);
      HEAP[$26]=0;
      var $27=$2;
      var $28=(($27+2)|0);
      HEAP[$28]=29;
      var $29=$2;
      var $30=(($29+128)|0);
      var $31=(($30+4)|0);
      HEAP[$31]=26;
      var $32=$2;
      var $33=(($32+128)|0);
      var $34=(($33)|0);
      HEAP[$34]=28;
      var $35=$2;
      var $36=(($35+128)|0);
      var $37=(($36+12)|0);
      HEAP[$37]=30;
      var $38=$2;
      var $39=(($38+128)|0);
      var $40=(($39+8)|0);
      HEAP[$40]=32;
      var $41=$2;
      var $42=(($41+128)|0);
      var $43=(($42+16)|0);
      HEAP[$43]=34;
      var $44=$2;
      var $45=(($44+128)|0);
      var $46=(($45+24)|0);
      HEAP[$46]=36;
      var $47=$2;
      var $48=(($47+128)|0);
      var $49=(($48+20)|0);
      HEAP[$49]=38;
      var $50=$2;
      var $51=(($50+128)|0);
      var $52=(($51+36)|0);
      HEAP[$52]=40;
      var $53=$2;
      var $54=(($53+128)|0);
      var $55=(($54+28)|0);
      HEAP[$55]=42;
      var $56=$2;
      var $57=(($56+128)|0);
      var $58=(($57+32)|0);
      HEAP[$58]=44;
      var $59=$2;
      var $60=(($59+128)|0);
      var $61=(($60+48)|0);
      HEAP[$61]=46;
      var $62=$2;
      var $63=(($62+128)|0);
      var $64=(($63+44)|0);
      HEAP[$64]=48;
      var $65=$2;
      var $66=(($65+128)|0);
      var $67=(($66+40)|0);
      HEAP[$67]=50;
      var $68=$2;
      var $69=(($68+244)|0);
      HEAP[$69]=0;
      var $70=$2;
      var $71=_softx86_reset($70);
      var $72=(($71)|0)!=0;
      if ($72) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      $1=0;
      __label__ = 12; break;
    case 11: 
      var $75=$ret;
      $1=$75;
      __label__ = 12; break;
    case 12: 
      var $77=$1;
      ;
      return $77;
    default: assert(0, "bad label: " + __label__);
  }
}
_softx86_init["X"]=1;

function _softx86_step_def_on_read_io($_ctx, $address, $buf, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ctx;
      $1=$_ctx;
      $2=$address;
      $3=$buf;
      $4=$size;
      var $5=$1;
      var $6=$5;
      $ctx=$6;
      var $7=$ctx;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $10=$3;
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$4;
      var $14=(($13)|0) < 1;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 6; break;
    case 5: 
      var $17=$3;
      var $18=$4;
      for (var $$dest = $17, $$stop = $$dest + $18; $$dest < $$stop; $$dest++) {
      HEAP[$$dest]=-1
      };
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_step_def_on_read_memory($_ctx, $address, $buf, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ctx;
      $1=$_ctx;
      $2=$address;
      $3=$buf;
      $4=$size;
      var $5=$1;
      var $6=$5;
      $ctx=$6;
      var $7=$ctx;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $10=$3;
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$4;
      var $14=(($13)|0) < 1;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 6; break;
    case 5: 
      var $17=$3;
      var $18=$4;
      for (var $$dest = $17, $$stop = $$dest + $18; $$dest < $$stop; $$dest++) {
      HEAP[$$dest]=-1
      };
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}

// Warning: Cannot correct overflows of this many bits: 64 at line 8013
// Warning: 64 bit AND - precision limit may be hit on llvm line 8014
// Warning: Cannot correct overflows of this many bits: 64 at line 8019
// Warning: 64 bit AND - precision limit may be hit on llvm line 8020
// Warning: Cannot correct overflows of this many bits: 64 at line 8027
// Warning: 64 bit AND - precision limit may be hit on llvm line 8028
// Warning: Cannot correct overflows of this many bits: 64 at line 8035
// Warning: 64 bit AND - precision limit may be hit on llvm line 8036
// Warning: Cannot correct overflows of this many bits: 64 at line 8331
// Warning: 64 bit AND - precision limit may be hit on llvm line 8332
// Warning: Cannot correct overflows of this many bits: 64 at line 8337
// Warning: 64 bit AND - precision limit may be hit on llvm line 8338
// Warning: Cannot correct overflows of this many bits: 64 at line 8345
// Warning: 64 bit AND - precision limit may be hit on llvm line 8346
// Warning: Cannot correct overflows of this many bits: 64 at line 8353
// Warning: 64 bit AND - precision limit may be hit on llvm line 8354

function _softx86_stack_discard_n($ctx, $bytez) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$ctx;
      $2=$bytez;
      var $3=$1;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $7=$2;
      var $8=$1;
      var $9=(($8+4)|0);
      var $10=(($9)|0);
      var $11=(($10+16)|0);
      var $12=$11;
      var $13=(($12)|0);
      var $14=HEAP[$13];
      var $15=(($14)&65535);
      var $16=(($15+$7)|0);
      var $17=(($16) & 65535);
      HEAP[$13]=$17;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_stack_add_n($ctx, $bytez) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $1=$ctx;
      $2=$bytez;
      var $3=$1;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $7=$2;
      var $8=$1;
      var $9=(($8+4)|0);
      var $10=(($9)|0);
      var $11=(($10+16)|0);
      var $12=$11;
      var $13=(($12)|0);
      var $14=HEAP[$13];
      var $15=(($14)&65535);
      var $16=(($15-$7)|0);
      var $17=(($16) & 65535);
      HEAP[$13]=$17;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_set_near_instruction_ptr($ctx, $ip) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$ctx;
      $3=$ip;
      var $4=$2;
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      var $8=$3;
      var $9=$2;
      var $10=(($9+4)|0);
      var $11=(($10+100)|0);
      HEAP[$11]=$8;
      $1=1;
      __label__ = 4; break;
    case 4: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_set_instruction_dec_ptr($ctx, $cs, $ip) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$ctx;
      $3=$cs;
      $4=$ip;
      var $5=$2;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      var $9=$4;
      var $10=$2;
      var $11=(($10+4)|0);
      var $12=(($11+116)|0);
      HEAP[$12]=$9;
      var $13=$3;
      var $14=(($13) & 65535);
      var $15=$2;
      var $16=(($15+4)|0);
      var $17=(($16+112)|0);
      HEAP[$17]=$14;
      $1=1;
      __label__ = 4; break;
    case 4: 
      var $19=$1;
      ;
      return $19;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_setbug($ctx, $bug_id, $on_off) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$ctx;
      $3=$bug_id;
      $4=$on_off;
      var $5=$3;
      var $6=(($5)|0)==305399040;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$4;
      var $9=$2;
      var $10=(($9+180)|0);
      var $11=(($10)|0);
      HEAP[$11]=$8;
      $1=1;
      __label__ = 7; break;
    case 3: 
      var $13=$3;
      var $14=(($13)|0)==305399296;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$4;
      var $17=$2;
      var $18=(($17+180)|0);
      var $19=(($18+1)|0);
      HEAP[$19]=$16;
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      $1=0;
      __label__ = 7; break;
    case 7: 
      var $23=$1;
      ;
      return $23;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_fetch_exec_byte($ctx) {
  var __stackBase__  = STACKTOP; STACKTOP += 1; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $opcode=__stackBase__;
      $2=$ctx;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      var $7=$2;
      var $8=$2;
      var $9=(($8+4)|0);
      var $10=(($9+32)|0);
      var $11=(($10+8)|0);
      var $12=(($11+4)|0);
      var $13=HEAP[$12];
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=(($15+100)|0);
      var $17=HEAP[$16];
      var $18=(($13+$17)|0);
      var $19=_softx86_fetch($7, 0, $18, $opcode, 1);
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=(($21+100)|0);
      var $23=HEAP[$22];
      var $24=(($23+1)|0);
      HEAP[$22]=$24;
      var $25=HEAP[$opcode];
      $1=$25;
      __label__ = 4; break;
    case 4: 
      var $27=$1;
      STACKTOP = __stackBase__;
      return $27;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_fetch($ctx, $reserved, $addr, $_buf, $sz) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $buf;
      var $rsz;
      var $raddr;
      $2=$ctx;
      $3=$reserved;
      $4=$addr;
      $5=$_buf;
      $6=$sz;
      var $7=$5;
      $buf=$7;
      var $8=$2;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $11=$buf;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$6;
      var $15=(($14)|0) < 1;
      if ($15) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=0;
      __label__ = 9; break;
    case 5: 
      var $18=$6;
      $rsz=$18;
      var $19=$4;
      $raddr=$19;
      var $20=$raddr;
      var $21=$rsz;
      var $22=(($20+$21)|0);
      var $23=(($22)>>>0) > 0;
      if ($23) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $25=$raddr;
      var $26=$rsz;
      var $27=(($25+$26)|0);
      var $28=$rsz;
      var $29=(($27)>>>0) < (($28)>>>0);
      if ($29) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $31=$2;
      var $32=(($31+128)|0);
      var $33=(($32)|0);
      var $34=HEAP[$33];
      var $35=$2;
      var $36=$35;
      var $37=$raddr;
      var $38=$buf;
      var $39=$raddr;
      var $40=(($39)>>>0);
      var $41=4294967296-$40;
      var $42=Runtime.and64($41, 4294967295);
      var $43=(($42) & 4294967295);
      FUNCTION_TABLE[$34]($36, $37, $38, $43);
      var $44=$raddr;
      var $45=(($44)>>>0);
      var $46=4294967296-$45;
      var $47=Runtime.and64($46, 4294967295);
      var $48=(($47) & 4294967295);
      var $49=$raddr;
      var $50=(($49+$48)|0);
      $raddr=$50;
      var $51=$raddr;
      var $52=(($51)>>>0);
      var $53=4294967296-$52;
      var $54=Runtime.and64($53, 4294967295);
      var $55=(($54) & 4294967295);
      var $56=$rsz;
      var $57=(($56-$55)|0);
      $rsz=$57;
      var $58=$raddr;
      var $59=(($58)>>>0);
      var $60=4294967296-$59;
      var $61=Runtime.and64($60, 4294967295);
      var $62=(($61) & 4294967295);
      var $63=$buf;
      var $64=(($63+$62)|0);
      $buf=$64;
      var $65=$2;
      var $66=(($65+128)|0);
      var $67=(($66)|0);
      var $68=HEAP[$67];
      var $69=$2;
      var $70=$69;
      var $71=$raddr;
      var $72=$buf;
      var $73=$rsz;
      FUNCTION_TABLE[$68]($70, $71, $72, $73);
      $1=1;
      __label__ = 9; break;
    case 8: 
      var $75=$2;
      var $76=(($75+128)|0);
      var $77=(($76)|0);
      var $78=HEAP[$77];
      var $79=$2;
      var $80=$79;
      var $81=$raddr;
      var $82=$buf;
      var $83=$rsz;
      FUNCTION_TABLE[$78]($80, $81, $82, $83);
      $1=1;
      __label__ = 9; break;
    case 9: 
      var $85=$1;
      ;
      return $85;
    default: assert(0, "bad label: " + __label__);
  }
}
_softx86_fetch["X"]=1;

function _softx86_fetch_dec_byte($ctx) {
  var __stackBase__  = STACKTOP; STACKTOP += 1; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $opcode=__stackBase__;
      $2=$ctx;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      var $7=$2;
      var $8=$2;
      var $9=(($8+4)|0);
      var $10=(($9+112)|0);
      var $11=HEAP[$10];
      var $12=(($11)&65535);
      var $13=$12 << 4;
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=(($15+116)|0);
      var $17=HEAP[$16];
      var $18=(($13+$17)|0);
      var $19=_softx86_fetch($7, 0, $18, $opcode, 1);
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=(($21+116)|0);
      var $23=HEAP[$22];
      var $24=(($23+1)|0);
      HEAP[$22]=$24;
      var $25=HEAP[$opcode];
      $1=$25;
      __label__ = 4; break;
    case 4: 
      var $27=$1;
      STACKTOP = __stackBase__;
      return $27;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_stack_popw($ctx) {
  var __stackBase__  = STACKTOP; STACKTOP += 2; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $data=__stackBase__;
      $2=$ctx;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      var $7=$2;
      var $8=$2;
      var $9=(($8+4)|0);
      var $10=(($9+32)|0);
      var $11=(($10+16)|0);
      var $12=(($11+4)|0);
      var $13=HEAP[$12];
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=(($15)|0);
      var $17=(($16+16)|0);
      var $18=$17;
      var $19=(($18)|0);
      var $20=HEAP[$19];
      var $21=(($20)&65535);
      var $22=(($13+$21)|0);
      var $23=$data;
      var $24=_softx86_fetch($7, 0, $22, $23, 2);
      var $25=$2;
      var $26=(($25+4)|0);
      var $27=(($26)|0);
      var $28=(($27+16)|0);
      var $29=$28;
      var $30=(($29)|0);
      var $31=HEAP[$30];
      var $32=(($31)&65535);
      var $33=(($32+2)|0);
      var $34=(($33) & 65535);
      HEAP[$30]=$34;
      var $35=HEAP[$data];
      $1=$35;
      __label__ = 4; break;
    case 4: 
      var $37=$1;
      STACKTOP = __stackBase__;
      return $37;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_stack_pushw($ctx, $data) {
  var __stackBase__  = STACKTOP; STACKTOP += 2; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2=__stackBase__;
  $1=$ctx;
  HEAP[$2]=$data;
  var $3=$1;
  var $4=(($3+4)|0);
  var $5=(($4)|0);
  var $6=(($5+16)|0);
  var $7=$6;
  var $8=(($7)|0);
  var $9=HEAP[$8];
  var $10=(($9)&65535);
  var $11=(($10-2)|0);
  var $12=(($11) & 65535);
  HEAP[$8]=$12;
  var $13=$1;
  var $14=$1;
  var $15=(($14+4)|0);
  var $16=(($15+32)|0);
  var $17=(($16+16)|0);
  var $18=(($17+4)|0);
  var $19=HEAP[$18];
  var $20=$1;
  var $21=(($20+4)|0);
  var $22=(($21)|0);
  var $23=(($22+16)|0);
  var $24=$23;
  var $25=(($24)|0);
  var $26=HEAP[$25];
  var $27=(($26)&65535);
  var $28=(($19+$27)|0);
  var $29=$2;
  var $30=_softx86_write($13, 0, $28, $29, 2);
  STACKTOP = __stackBase__;
  return;
}


function _softx86_write($ctx, $reserved, $addr, $_buf, $sz) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $buf;
      var $rsz;
      var $raddr;
      $2=$ctx;
      $3=$reserved;
      $4=$addr;
      $5=$_buf;
      $6=$sz;
      var $7=$5;
      $buf=$7;
      var $8=$2;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $11=$buf;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$6;
      var $15=(($14)|0) < 1;
      if ($15) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=0;
      __label__ = 9; break;
    case 5: 
      var $18=$6;
      $rsz=$18;
      var $19=$4;
      $raddr=$19;
      var $20=$raddr;
      var $21=$rsz;
      var $22=(($20+$21)|0);
      var $23=(($22)>>>0) > 0;
      if ($23) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $25=$raddr;
      var $26=$rsz;
      var $27=(($25+$26)|0);
      var $28=$rsz;
      var $29=(($27)>>>0) < (($28)>>>0);
      if ($29) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $31=$2;
      var $32=(($31+128)|0);
      var $33=(($32+8)|0);
      var $34=HEAP[$33];
      var $35=$2;
      var $36=$35;
      var $37=$raddr;
      var $38=$buf;
      var $39=$raddr;
      var $40=(($39)>>>0);
      var $41=4294967296-$40;
      var $42=Runtime.and64($41, 4294967295);
      var $43=(($42) & 4294967295);
      FUNCTION_TABLE[$34]($36, $37, $38, $43);
      var $44=$raddr;
      var $45=(($44)>>>0);
      var $46=4294967296-$45;
      var $47=Runtime.and64($46, 4294967295);
      var $48=(($47) & 4294967295);
      var $49=$raddr;
      var $50=(($49+$48)|0);
      $raddr=$50;
      var $51=$raddr;
      var $52=(($51)>>>0);
      var $53=4294967296-$52;
      var $54=Runtime.and64($53, 4294967295);
      var $55=(($54) & 4294967295);
      var $56=$rsz;
      var $57=(($56-$55)|0);
      $rsz=$57;
      var $58=$raddr;
      var $59=(($58)>>>0);
      var $60=4294967296-$59;
      var $61=Runtime.and64($60, 4294967295);
      var $62=(($61) & 4294967295);
      var $63=$buf;
      var $64=(($63+$62)|0);
      $buf=$64;
      var $65=$2;
      var $66=(($65+128)|0);
      var $67=(($66+8)|0);
      var $68=HEAP[$67];
      var $69=$2;
      var $70=$69;
      var $71=$raddr;
      var $72=$buf;
      var $73=$rsz;
      FUNCTION_TABLE[$68]($70, $71, $72, $73);
      $1=1;
      __label__ = 9; break;
    case 8: 
      var $75=$2;
      var $76=(($75+128)|0);
      var $77=(($76+8)|0);
      var $78=HEAP[$77];
      var $79=$2;
      var $80=$79;
      var $81=$raddr;
      var $82=$buf;
      var $83=$rsz;
      FUNCTION_TABLE[$78]($80, $81, $82, $83);
      $1=1;
      __label__ = 9; break;
    case 9: 
      var $85=$1;
      ;
      return $85;
    default: assert(0, "bad label: " + __label__);
  }
}
_softx86_write["X"]=1;

function _softx86_set_stack_ptr($ctx, $ss, $sp) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$ctx;
      $3=$ss;
      $4=$sp;
      var $5=$2;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      var $9=$4;
      var $10=(($9) & 65535);
      var $11=$2;
      var $12=(($11+4)|0);
      var $13=(($12)|0);
      var $14=(($13+16)|0);
      var $15=$14;
      var $16=(($15)|0);
      HEAP[$16]=$10;
      var $17=$2;
      var $18=$3;
      var $19=_softx86_setsegval($17, 2, $18);
      $1=1;
      __label__ = 4; break;
    case 4: 
      var $21=$1;
      ;
      return $21;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_set_instruction_ptr($ctx, $cs, $ip) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$ctx;
      $3=$cs;
      $4=$ip;
      var $5=$2;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      var $9=$4;
      var $10=$2;
      var $11=(($10+4)|0);
      var $12=(($11+100)|0);
      HEAP[$12]=$9;
      var $13=$2;
      var $14=$3;
      var $15=_softx86_setsegval($13, 1, $14);
      $1=1;
      __label__ = 4; break;
    case 4: 
      var $17=$1;
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_get_intvect($ctx, $i, $seg, $ofs) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $_seg=__stackBase__;
      var $_ofs=__stackBase__+2;
      var $o;
      $2=$ctx;
      $3=$i;
      $4=$seg;
      $5=$ofs;
      var $6=$2;
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      var $10=$3;
      var $11=(($10)&255);
      var $12=$11 << 2;
      $o=$12;
      var $13=$2;
      var $14=$o;
      var $15=$_ofs;
      var $16=_softx86_fetch($13, 0, $14, $15, 2);
      var $17=HEAP[$_ofs];
      var $18=$5;
      HEAP[$18]=$17;
      var $19=$o;
      var $20=(($19+2)|0);
      $o=$20;
      var $21=$2;
      var $22=$o;
      var $23=$_seg;
      var $24=_softx86_fetch($21, 0, $22, $23, 2);
      var $25=HEAP[$_seg];
      var $26=$4;
      HEAP[$26]=$25;
      $1=1;
      __label__ = 4; break;
    case 4: 
      var $28=$1;
      STACKTOP = __stackBase__;
      return $28;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_go_int_frame($ctx, $i) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $seg=__stackBase__;
      var $ofs=__stackBase__+2;
      $1=$ctx;
      $2=$i;
      var $3=$1;
      var $4=$2;
      var $5=_softx86_get_intvect($3, $4, $seg, $ofs);
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      __label__ = 5; break;
    case 3: 
      var $9=$1;
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=(($11+96)|0);
      var $13=$12;
      var $14=HEAP[$13];
      var $15=(($14) & 65535);
      _softx86_stack_pushw($9, $15);
      var $16=$1;
      var $17=$1;
      var $18=(($17+4)|0);
      var $19=(($18+32)|0);
      var $20=(($19+8)|0);
      var $21=(($20)|0);
      var $22=HEAP[$21];
      _softx86_stack_pushw($16, $22);
      var $23=$1;
      var $24=$1;
      var $25=(($24+4)|0);
      var $26=(($25+100)|0);
      var $27=HEAP[$26];
      var $28=(($27) & 65535);
      _softx86_stack_pushw($23, $28);
      var $29=$1;
      var $30=(($29+4)|0);
      var $31=(($30+96)|0);
      var $32=$31;
      var $33=HEAP[$32];
      var $34=$33 & -513;
      HEAP[$32]=$34;
      var $35=$1;
      var $36=HEAP[$seg];
      var $37=(($36)&65535);
      var $38=HEAP[$ofs];
      var $39=(($38)&65535);
      var $40=_softx86_set_instruction_ptr($35, $37, $39);
      var $41=(($40)|0)!=0;
      if ($41) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      __label__ = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_softx86_go_int_frame["X"]=1;

function _softx86_ext_hw_signal($ctx, $i) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$ctx;
      $3=$i;
      var $4=$2;
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 6; break;
    case 3: 
      var $8=$2;
      var $9=(($8+4)|0);
      var $10=(($9+120)|0);
      var $11=HEAP[$10];
      var $12=(($11 << 24) >> 24)!=0;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=0;
      __label__ = 6; break;
    case 5: 
      var $15=$2;
      var $16=(($15+128)|0);
      var $17=(($16+16)|0);
      var $18=HEAP[$17];
      var $19=$2;
      var $20=$19;
      var $21=$3;
      FUNCTION_TABLE[$18]($20, $21);
      var $22=$2;
      var $23=(($22+4)|0);
      var $24=(($23+120)|0);
      HEAP[$24]=1;
      var $25=$3;
      var $26=$2;
      var $27=(($26+4)|0);
      var $28=(($27+121)|0);
      HEAP[$28]=$25;
      $1=1;
      __label__ = 6; break;
    case 6: 
      var $30=$1;
      ;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_ext_hw_nmi_signal($ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $2=$ctx;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 6; break;
    case 3: 
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=(($8+122)|0);
      var $10=HEAP[$9];
      var $11=(($10 << 24) >> 24)!=0;
      if ($11) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=0;
      __label__ = 6; break;
    case 5: 
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=(($15+122)|0);
      HEAP[$16]=1;
      var $17=$2;
      var $18=(($17+128)|0);
      var $19=(($18+28)|0);
      var $20=HEAP[$19];
      var $21=$2;
      var $22=$21;
      FUNCTION_TABLE[$20]($22);
      $1=1;
      __label__ = 6; break;
    case 6: 
      var $24=$1;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_int_sw_signal($ctx, $i) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$ctx;
      $3=$i;
      var $4=$2;
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      var $8=$2;
      var $9=(($8+128)|0);
      var $10=(($9+20)|0);
      var $11=HEAP[$10];
      var $12=$2;
      var $13=$12;
      var $14=$3;
      FUNCTION_TABLE[$11]($13, $14);
      var $15=$2;
      var $16=$3;
      _softx86_go_int_frame($15, $16);
      $1=1;
      __label__ = 4; break;
    case 4: 
      var $18=$1;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_ext_hw_ack($ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $2=$ctx;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 6; break;
    case 3: 
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=(($8+120)|0);
      var $10=HEAP[$9];
      var $11=(($10 << 24) >> 24)!=0;
      if ($11) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      $1=0;
      __label__ = 6; break;
    case 5: 
      var $14=$2;
      var $15=(($14+128)|0);
      var $16=(($15+24)|0);
      var $17=HEAP[$16];
      var $18=$2;
      var $19=$18;
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=(($21+121)|0);
      var $23=HEAP[$22];
      FUNCTION_TABLE[$17]($19, $23);
      var $24=$2;
      var $25=(($24+4)|0);
      var $26=(($25+120)|0);
      HEAP[$26]=0;
      var $27=$2;
      var $28=(($27+4)|0);
      var $29=(($28+121)|0);
      HEAP[$29]=0;
      $1=1;
      __label__ = 6; break;
    case 6: 
      var $31=$1;
      ;
      return $31;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_ext_hw_nmi_ack($ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $2=$ctx;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 6; break;
    case 3: 
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=(($8+122)|0);
      var $10=HEAP[$9];
      var $11=(($10 << 24) >> 24)!=0;
      if ($11) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      $1=0;
      __label__ = 6; break;
    case 5: 
      var $14=$2;
      var $15=(($14+128)|0);
      var $16=(($15+32)|0);
      var $17=HEAP[$16];
      var $18=$2;
      var $19=$18;
      FUNCTION_TABLE[$17]($19);
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=(($21+122)|0);
      HEAP[$22]=0;
      $1=1;
      __label__ = 6; break;
    case 6: 
      var $24=$1;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_decompile_exec_cs_ip($ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      $2=$ctx;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 4; break;
    case 3: 
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=(($8+32)|0);
      var $10=(($9+8)|0);
      var $11=(($10)|0);
      var $12=HEAP[$11];
      var $13=$2;
      var $14=(($13+4)|0);
      var $15=(($14+112)|0);
      HEAP[$15]=$12;
      var $16=$2;
      var $17=(($16+4)|0);
      var $18=(($17+100)|0);
      var $19=HEAP[$18];
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=(($21+116)|0);
      HEAP[$22]=$19;
      $1=1;
      __label__ = 4; break;
    case 4: 
      var $24=$1;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_bswap2($x) {
  ;
  var __label__;

  var $1;
  var $t;
  $1=$x;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP[$3];
  $t=$4;
  var $5=$1;
  var $6=(($5+1)|0);
  var $7=HEAP[$6];
  var $8=$1;
  var $9=(($8)|0);
  HEAP[$9]=$7;
  var $10=$t;
  var $11=$1;
  var $12=(($11+1)|0);
  HEAP[$12]=$10;
  ;
  return;
}


function _softx86_bswap4($x) {
  ;
  var __label__;

  var $1;
  var $t;
  $1=$x;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP[$3];
  $t=$4;
  var $5=$1;
  var $6=(($5+3)|0);
  var $7=HEAP[$6];
  var $8=$1;
  var $9=(($8)|0);
  HEAP[$9]=$7;
  var $10=$t;
  var $11=$1;
  var $12=(($11+3)|0);
  HEAP[$12]=$10;
  var $13=$1;
  var $14=(($13+1)|0);
  var $15=HEAP[$14];
  $t=$15;
  var $16=$1;
  var $17=(($16+2)|0);
  var $18=HEAP[$17];
  var $19=$1;
  var $20=(($19+1)|0);
  HEAP[$20]=$18;
  var $21=$t;
  var $22=$1;
  var $23=(($22+2)|0);
  HEAP[$23]=$21;
  ;
  return;
}


function _softx86_step($ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $sop;
      var $opcode;
      var $lp;
      var $x;
      var $restart;
      var $err;
      var $count;
      var $can_hwint;
      $2=$ctx;
      var $3=$2;
      var $4=(($3)|0)!=0;
      if ($4) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 37; break;
    case 3: 
      var $7=$2;
      var $8=(($7+184)|0);
      var $9=HEAP[$8];
      var $10=$9;
      $sop=$10;
      var $11=$sop;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      $1=0;
      __label__ = 37; break;
    case 5: 
      var $15=$2;
      var $16=(($15+236)|0);
      HEAP[$16]=0;
      var $17=$2;
      var $18=(($17+238)|0);
      HEAP[$18]=0;
      var $19=$2;
      var $20=(($19+240)|0);
      HEAP[$20]=0;
      var $21=$2;
      var $22=(($21+4)|0);
      var $23=(($22+32)|0);
      var $24=(($23+8)|0);
      var $25=(($24)|0);
      var $26=HEAP[$25];
      var $27=$2;
      var $28=(($27+4)|0);
      var $29=(($28+104)|0);
      HEAP[$29]=$26;
      var $30=$2;
      var $31=(($30+4)|0);
      var $32=(($31+100)|0);
      var $33=HEAP[$32];
      var $34=$2;
      var $35=(($34+4)|0);
      var $36=(($35+108)|0);
      HEAP[$36]=$33;
      $lp=1;
      $err=0;
      $count=16;
      $restart=0;
      $can_hwint=1;
      __label__ = 6; break;
    case 6: 
      var $38=$lp;
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 7; break; } else { var $45 = 0;__label__ = 8; break; }
    case 7: 
      var $41=$count;
      var $42=(($41-1)|0);
      $count=$42;
      var $43=(($41)|0) > 0;
      var $45 = $43;__label__ = 8; break;
    case 8: 
      var $45;
      if ($45) { __label__ = 9; break; } else { __label__ = 32; break; }
    case 9: 
      var $47=$can_hwint;
      var $48=(($47)|0)!=0;
      if ($48) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $50=$2;
      var $51=(($50+180)|0);
      var $52=(($51)|0);
      var $53=HEAP[$52];
      var $54=(($53)&255);
      var $55=(($54)|0)!=0;
      if ($55) { __label__ = 11; break; } else { __label__ = 19; break; }
    case 11: 
      var $57=$2;
      var $58=(($57+4)|0);
      var $59=(($58+122)|0);
      var $60=HEAP[$59];
      var $61=(($60 << 24) >> 24)!=0;
      if ($61) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $63=$2;
      _softx86_go_int_frame($63, 2);
      var $64=$2;
      var $65=_softx86_ext_hw_nmi_ack($64);
      __label__ = 18; break;
    case 13: 
      var $67=$2;
      var $68=(($67+4)|0);
      var $69=(($68+96)|0);
      var $70=$69;
      var $71=HEAP[$70];
      var $72=$71 & 512;
      var $73=(($72)|0)!=0;
      if ($73) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: 
      var $75=$2;
      var $76=(($75+4)|0);
      var $77=(($76+120)|0);
      var $78=HEAP[$77];
      var $79=(($78 << 24) >> 24)!=0;
      if ($79) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $81=$2;
      var $82=$2;
      var $83=(($82+4)|0);
      var $84=(($83+121)|0);
      var $85=HEAP[$84];
      _softx86_go_int_frame($81, $85);
      var $86=$2;
      var $87=_softx86_ext_hw_ack($86);
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      $can_hwint=0;
      __label__ = 19; break;
    case 19: 
      var $92=$2;
      var $93=_softx86_fetch_exec_byte($92);
      $opcode=$93;
      var $94=$opcode;
      var $95=(($94)&255);
      var $96=$sop;
      var $97=(($96)|0);
      var $98=(($97+($95<<3))|0);
      var $99=(($98)|0);
      var $100=HEAP[$99];
      var $101=$opcode;
      var $102=$2;
      var $103=FUNCTION_TABLE[$100]($101, $102);
      $x=$103;
      var $104=$x;
      var $105=(($104)|0)==0;
      if ($105) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      $lp=0;
      $restart=1;
      $err=1;
      __label__ = 31; break;
    case 21: 
      var $108=$x;
      var $109=(($108)|0)==1;
      if ($109) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      $lp=0;
      __label__ = 30; break;
    case 23: 
      var $112=$x;
      var $113=(($112)|0)==2;
      if ($113) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      __label__ = 29; break;
    case 25: 
      var $116=$x;
      var $117=(($116)|0)==3;
      if ($117) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      $restart=1;
      $lp=0;
      __label__ = 28; break;
    case 27: 
      $lp=0;
      $restart=1;
      $err=1;
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      __label__ = 6; break;
    case 32: 
      var $125=$count;
      var $126=(($125)|0) <= 0;
      if ($126) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      $err=1;
      $restart=1;
      __label__ = 34; break;
    case 34: 
      var $129=$restart;
      var $130=(($129)|0)!=0;
      if ($130) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $132=$2;
      var $133=(($132+4)|0);
      var $134=(($133+104)|0);
      var $135=HEAP[$134];
      var $136=$2;
      var $137=(($136+4)|0);
      var $138=(($137+32)|0);
      var $139=(($138+8)|0);
      var $140=(($139)|0);
      HEAP[$140]=$135;
      var $141=$2;
      var $142=(($141+4)|0);
      var $143=(($142+108)|0);
      var $144=HEAP[$143];
      var $145=$2;
      var $146=(($145+4)|0);
      var $147=(($146+100)|0);
      HEAP[$147]=$144;
      __label__ = 36; break;
    case 36: 
      var $149=$err;
      var $150=(($149)|0)!=0;
      var $151=$150 ^ 1;
      var $152=(($151)&1);
      $1=$152;
      __label__ = 37; break;
    case 37: 
      var $154=$1;
      ;
      return $154;
    default: assert(0, "bad label: " + __label__);
  }
}
_softx86_step["X"]=1;

function _softx86_decompile($ctx, $asmbuf) {
  var __stackBase__  = STACKTOP; STACKTOP += 256; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $sop;
      var $opcode;
      var $lp;
      var $x;
      var $err;
      var $count;
      var $asmx;
      var $buf=__stackBase__;
      $2=$ctx;
      $3=$asmbuf;
      var $4=$2;
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      $1=0;
      __label__ = 22; break;
    case 3: 
      var $8=$2;
      var $9=(($8+184)|0);
      var $10=HEAP[$9];
      var $11=$10;
      $sop=$11;
      var $12=$sop;
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      $1=0;
      __label__ = 22; break;
    case 5: 
      $lp=1;
      $err=0;
      $asmx=0;
      var $16=$3;
      var $17=(($16)|0);
      HEAP[$17]=0;
      $count=16;
      __label__ = 6; break;
    case 6: 
      var $19=$lp;
      var $20=(($19)|0)!=0;
      if ($20) { __label__ = 7; break; } else { var $26 = 0;__label__ = 8; break; }
    case 7: 
      var $22=$count;
      var $23=(($22-1)|0);
      $count=$23;
      var $24=(($22)|0) > 0;
      var $26 = $24;__label__ = 8; break;
    case 8: 
      var $26;
      if ($26) { __label__ = 9; break; } else { __label__ = 19; break; }
    case 9: 
      var $28=$2;
      var $29=_softx86_fetch_dec_byte($28);
      $opcode=$29;
      var $30=$opcode;
      var $31=(($30)&255);
      var $32=$sop;
      var $33=(($32)|0);
      var $34=(($33+($31<<3))|0);
      var $35=(($34+4)|0);
      var $36=HEAP[$35];
      var $37=$opcode;
      var $38=$2;
      var $39=(($buf)|0);
      var $40=FUNCTION_TABLE[$36]($37, $38, $39);
      $x=$40;
      var $41=$x;
      var $42=(($41)|0)==0;
      if ($42) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $lp=0;
      $err=1;
      __label__ = 18; break;
    case 11: 
      var $45=$x;
      var $46=(($45)|0)==1;
      if ($46) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $48=$3;
      var $49=$asmx;
      var $50=(($48+$49)|0);
      var $51=(($buf)|0);
      var $52=_strcpy($50, $51);
      $lp=0;
      __label__ = 17; break;
    case 13: 
      var $54=$x;
      var $55=(($54)|0)==2;
      if ($55) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $57=$3;
      var $58=$asmx;
      var $59=(($57+$58)|0);
      var $60=(($buf)|0);
      var $61=_strcpy($59, $60);
      var $62=$3;
      var $63=$asmx;
      var $64=(($62+$63)|0);
      var $65=_strlen($64);
      var $66=$3;
      var $67=(($66+$65)|0);
      $3=$67;
      __label__ = 16; break;
    case 15: 
      $lp=0;
      $err=1;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 6; break;
    case 19: 
      var $73=$count;
      var $74=(($73)|0) <= 0;
      if ($74) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      $err=1;
      __label__ = 21; break;
    case 21: 
      var $77=$err;
      var $78=(($77)|0)!=0;
      var $79=$78 ^ 1;
      var $80=(($79)&1);
      $1=$80;
      __label__ = 22; break;
    case 22: 
      var $82=$1;
      STACKTOP = __stackBase__;
      return $82;
    default: assert(0, "bad label: " + __label__);
  }
}
_softx86_decompile["X"]=1;

function _sx86_exec_full_modregrm_lea($ctx, $d32, $mod, $reg, $rm) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $ofs;
      var $xx;
      $1=$ctx;
      $2=$d32;
      $3=$mod;
      $4=$reg;
      $5=$rm;
      var $6=$3;
      var $7=(($6)&255);
      var $8=(($7)|0)==3;
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 58; break;
    case 3: 
      var $11=$3;
      var $12=(($11)&255);
      var $13=(($12)|0)==0;
      if ($13) { __label__ = 4; break; } else { __label__ = 28; break; }
    case 4: 
      var $15=$5;
      var $16=(($15)&255);
      var $17=(($16)|0)==6;
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $19=$1;
      var $20=_softx86_fetch_exec_byte($19);
      var $21=(($20)&255);
      $ofs=$21;
      var $22=$1;
      var $23=_softx86_fetch_exec_byte($22);
      var $24=(($23)&255);
      var $25=$24 << 8;
      var $26=$ofs;
      var $27=(($26)&65535);
      var $28=$27 | $25;
      var $29=(($28) & 65535);
      $ofs=$29;
      __label__ = 27; break;
    case 6: 
      var $31=$5;
      var $32=(($31)&255);
      var $33=(($32)|0)==0;
      if ($33) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $35=$1;
      var $36=(($35+4)|0);
      var $37=(($36)|0);
      var $38=(($37+12)|0);
      var $39=$38;
      var $40=(($39)|0);
      var $41=HEAP[$40];
      var $42=(($41)&65535);
      var $43=$1;
      var $44=(($43+4)|0);
      var $45=(($44)|0);
      var $46=(($45+24)|0);
      var $47=$46;
      var $48=(($47)|0);
      var $49=HEAP[$48];
      var $50=(($49)&65535);
      var $51=(($42+$50)|0);
      var $52=(($51) & 65535);
      $ofs=$52;
      __label__ = 26; break;
    case 8: 
      var $54=$5;
      var $55=(($54)&255);
      var $56=(($55)|0)==1;
      if ($56) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $58=$1;
      var $59=(($58+4)|0);
      var $60=(($59)|0);
      var $61=(($60+12)|0);
      var $62=$61;
      var $63=(($62)|0);
      var $64=HEAP[$63];
      var $65=(($64)&65535);
      var $66=$1;
      var $67=(($66+4)|0);
      var $68=(($67)|0);
      var $69=(($68+28)|0);
      var $70=$69;
      var $71=(($70)|0);
      var $72=HEAP[$71];
      var $73=(($72)&65535);
      var $74=(($65+$73)|0);
      var $75=(($74) & 65535);
      $ofs=$75;
      __label__ = 25; break;
    case 10: 
      var $77=$5;
      var $78=(($77)&255);
      var $79=(($78)|0)==2;
      if ($79) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $81=$1;
      var $82=(($81+4)|0);
      var $83=(($82)|0);
      var $84=(($83+20)|0);
      var $85=$84;
      var $86=(($85)|0);
      var $87=HEAP[$86];
      var $88=(($87)&65535);
      var $89=$1;
      var $90=(($89+4)|0);
      var $91=(($90)|0);
      var $92=(($91+24)|0);
      var $93=$92;
      var $94=(($93)|0);
      var $95=HEAP[$94];
      var $96=(($95)&65535);
      var $97=(($88+$96)|0);
      var $98=(($97) & 65535);
      $ofs=$98;
      __label__ = 24; break;
    case 12: 
      var $100=$5;
      var $101=(($100)&255);
      var $102=(($101)|0)==3;
      if ($102) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $104=$1;
      var $105=(($104+4)|0);
      var $106=(($105)|0);
      var $107=(($106+20)|0);
      var $108=$107;
      var $109=(($108)|0);
      var $110=HEAP[$109];
      var $111=(($110)&65535);
      var $112=$1;
      var $113=(($112+4)|0);
      var $114=(($113)|0);
      var $115=(($114+28)|0);
      var $116=$115;
      var $117=(($116)|0);
      var $118=HEAP[$117];
      var $119=(($118)&65535);
      var $120=(($111+$119)|0);
      var $121=(($120) & 65535);
      $ofs=$121;
      __label__ = 23; break;
    case 14: 
      var $123=$5;
      var $124=(($123)&255);
      var $125=(($124)|0)==4;
      if ($125) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $127=$1;
      var $128=(($127+4)|0);
      var $129=(($128)|0);
      var $130=(($129+24)|0);
      var $131=$130;
      var $132=(($131)|0);
      var $133=HEAP[$132];
      $ofs=$133;
      __label__ = 22; break;
    case 16: 
      var $135=$5;
      var $136=(($135)&255);
      var $137=(($136)|0)==5;
      if ($137) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $139=$1;
      var $140=(($139+4)|0);
      var $141=(($140)|0);
      var $142=(($141+28)|0);
      var $143=$142;
      var $144=(($143)|0);
      var $145=HEAP[$144];
      $ofs=$145;
      __label__ = 21; break;
    case 18: 
      var $147=$5;
      var $148=(($147)&255);
      var $149=(($148)|0)==7;
      if ($149) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $151=$1;
      var $152=(($151+4)|0);
      var $153=(($152)|0);
      var $154=(($153+12)|0);
      var $155=$154;
      var $156=(($155)|0);
      var $157=HEAP[$156];
      $ofs=$157;
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 57; break;
    case 28: 
      var $167=$5;
      var $168=(($167)&255);
      var $169=(($168)|0)==0;
      if ($169) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $171=$1;
      var $172=(($171+4)|0);
      var $173=(($172)|0);
      var $174=(($173+12)|0);
      var $175=$174;
      var $176=(($175)|0);
      var $177=HEAP[$176];
      var $178=(($177)&65535);
      var $179=$1;
      var $180=(($179+4)|0);
      var $181=(($180)|0);
      var $182=(($181+24)|0);
      var $183=$182;
      var $184=(($183)|0);
      var $185=HEAP[$184];
      var $186=(($185)&65535);
      var $187=(($178+$186)|0);
      var $188=(($187) & 65535);
      $ofs=$188;
      __label__ = 51; break;
    case 30: 
      var $190=$5;
      var $191=(($190)&255);
      var $192=(($191)|0)==1;
      if ($192) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $194=$1;
      var $195=(($194+4)|0);
      var $196=(($195)|0);
      var $197=(($196+12)|0);
      var $198=$197;
      var $199=(($198)|0);
      var $200=HEAP[$199];
      var $201=(($200)&65535);
      var $202=$1;
      var $203=(($202+4)|0);
      var $204=(($203)|0);
      var $205=(($204+28)|0);
      var $206=$205;
      var $207=(($206)|0);
      var $208=HEAP[$207];
      var $209=(($208)&65535);
      var $210=(($201+$209)|0);
      var $211=(($210) & 65535);
      $ofs=$211;
      __label__ = 50; break;
    case 32: 
      var $213=$5;
      var $214=(($213)&255);
      var $215=(($214)|0)==2;
      if ($215) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $217=$1;
      var $218=(($217+4)|0);
      var $219=(($218)|0);
      var $220=(($219+20)|0);
      var $221=$220;
      var $222=(($221)|0);
      var $223=HEAP[$222];
      var $224=(($223)&65535);
      var $225=$1;
      var $226=(($225+4)|0);
      var $227=(($226)|0);
      var $228=(($227+24)|0);
      var $229=$228;
      var $230=(($229)|0);
      var $231=HEAP[$230];
      var $232=(($231)&65535);
      var $233=(($224+$232)|0);
      var $234=(($233) & 65535);
      $ofs=$234;
      __label__ = 49; break;
    case 34: 
      var $236=$5;
      var $237=(($236)&255);
      var $238=(($237)|0)==3;
      if ($238) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $240=$1;
      var $241=(($240+4)|0);
      var $242=(($241)|0);
      var $243=(($242+20)|0);
      var $244=$243;
      var $245=(($244)|0);
      var $246=HEAP[$245];
      var $247=(($246)&65535);
      var $248=$1;
      var $249=(($248+4)|0);
      var $250=(($249)|0);
      var $251=(($250+28)|0);
      var $252=$251;
      var $253=(($252)|0);
      var $254=HEAP[$253];
      var $255=(($254)&65535);
      var $256=(($247+$255)|0);
      var $257=(($256) & 65535);
      $ofs=$257;
      __label__ = 48; break;
    case 36: 
      var $259=$5;
      var $260=(($259)&255);
      var $261=(($260)|0)==4;
      if ($261) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $263=$1;
      var $264=(($263+4)|0);
      var $265=(($264)|0);
      var $266=(($265+24)|0);
      var $267=$266;
      var $268=(($267)|0);
      var $269=HEAP[$268];
      $ofs=$269;
      __label__ = 47; break;
    case 38: 
      var $271=$5;
      var $272=(($271)&255);
      var $273=(($272)|0)==5;
      if ($273) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $275=$1;
      var $276=(($275+4)|0);
      var $277=(($276)|0);
      var $278=(($277+28)|0);
      var $279=$278;
      var $280=(($279)|0);
      var $281=HEAP[$280];
      $ofs=$281;
      __label__ = 46; break;
    case 40: 
      var $283=$5;
      var $284=(($283)&255);
      var $285=(($284)|0)==6;
      if ($285) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $287=$1;
      var $288=(($287+4)|0);
      var $289=(($288)|0);
      var $290=(($289+20)|0);
      var $291=$290;
      var $292=(($291)|0);
      var $293=HEAP[$292];
      $ofs=$293;
      __label__ = 45; break;
    case 42: 
      var $295=$5;
      var $296=(($295)&255);
      var $297=(($296)|0)==7;
      if ($297) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $299=$1;
      var $300=(($299+4)|0);
      var $301=(($300)|0);
      var $302=(($301+12)|0);
      var $303=$302;
      var $304=(($303)|0);
      var $305=HEAP[$304];
      $ofs=$305;
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      __label__ = 51; break;
    case 51: 
      var $314=$3;
      var $315=(($314)&255);
      var $316=(($315)|0)==1;
      if ($316) { __label__ = 52; break; } else { __label__ = 55; break; }
    case 52: 
      var $318=$1;
      var $319=_softx86_fetch_exec_byte($318);
      var $320=(($319)&255);
      $xx=$320;
      var $321=$xx;
      var $322=(($321)&65535);
      var $323=$322 & 128;
      var $324=(($323)|0)!=0;
      if ($324) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $326=$xx;
      var $327=(($326)&65535);
      var $328=$327 | 65280;
      var $329=(($328) & 65535);
      $xx=$329;
      __label__ = 54; break;
    case 54: 
      __label__ = 56; break;
    case 55: 
      var $332=$1;
      var $333=_softx86_fetch_exec_byte($332);
      var $334=(($333)&255);
      $xx=$334;
      var $335=$1;
      var $336=_softx86_fetch_exec_byte($335);
      var $337=(($336)&255);
      var $338=$337 << 8;
      var $339=$xx;
      var $340=(($339)&65535);
      var $341=$340 | $338;
      var $342=(($341) & 65535);
      $xx=$342;
      __label__ = 56; break;
    case 56: 
      var $344=$ofs;
      var $345=(($344)&65535);
      var $346=$xx;
      var $347=(($346)&65535);
      var $348=(($345+$347)|0);
      var $349=$348 & 65535;
      var $350=(($349) & 65535);
      $ofs=$350;
      __label__ = 57; break;
    case 57: 
      var $352=$ofs;
      var $353=$4;
      var $354=(($353)&255);
      var $355=$1;
      var $356=(($355+4)|0);
      var $357=(($356)|0);
      var $358=(($357+($354<<2))|0);
      var $359=$358;
      var $360=(($359)|0);
      HEAP[$360]=$352;
      __label__ = 58; break;
    case 58: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modregrm_lea["X"]=1;

function _sx86_exec_full_modregrm_rw($ctx, $w16, $d32, $mod, $reg, $rm, $opswap, $op8, $op16, $op32) {
  var __stackBase__  = STACKTOP; STACKTOP += 3; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $regv;
      var $rmv;
      var $regv1;
      var $rmv2;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      var $regv3;
      var $rmv4=__stackBase__;
      var $regv5;
      var $rmv6=__stackBase__+2;
      $1=$ctx;
      $2=$w16;
      $3=$d32;
      $4=$mod;
      $5=$reg;
      $6=$rm;
      $7=$opswap;
      $8=$op8;
      $9=$op16;
      $10=$op32;
      var $11=$4;
      var $12=(($11)&255);
      var $13=(($12)|0)==3;
      if ($13) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: 
      var $15=$2;
      var $16=(($15 << 24) >> 24)!=0;
      if ($16) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $18=$5;
      var $19=(($18)&255);
      var $20=$1;
      var $21=(($20+4)|0);
      var $22=(($21)|0);
      var $23=(($22+($19<<2))|0);
      var $24=$23;
      var $25=(($24)|0);
      var $26=HEAP[$25];
      $regv=$26;
      var $27=$6;
      var $28=(($27)&255);
      var $29=$1;
      var $30=(($29+4)|0);
      var $31=(($30)|0);
      var $32=(($31+($28<<2))|0);
      var $33=$32;
      var $34=(($33)|0);
      var $35=HEAP[$34];
      $rmv=$35;
      var $36=$7;
      var $37=(($36 << 24) >> 24)!=0;
      if ($37) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $39=$9;
      var $40=$1;
      var $41=$regv;
      var $42=$rmv;
      var $43=FUNCTION_TABLE[$39]($40, $41, $42);
      var $44=$5;
      var $45=(($44)&255);
      var $46=$1;
      var $47=(($46+4)|0);
      var $48=(($47)|0);
      var $49=(($48+($45<<2))|0);
      var $50=$49;
      var $51=(($50)|0);
      HEAP[$51]=$43;
      __label__ = 6; break;
    case 5: 
      var $53=$9;
      var $54=$1;
      var $55=$rmv;
      var $56=$regv;
      var $57=FUNCTION_TABLE[$53]($54, $55, $56);
      var $58=$6;
      var $59=(($58)&255);
      var $60=$1;
      var $61=(($60+4)|0);
      var $62=(($61)|0);
      var $63=(($62+($59<<2))|0);
      var $64=$63;
      var $65=(($64)|0);
      HEAP[$65]=$57;
      __label__ = 6; break;
    case 6: 
      __label__ = 11; break;
    case 7: 
      var $68=$5;
      var $69=(($68)&255);
      var $70=$1;
      var $71=(($70+204)|0);
      var $72=(($71+($69<<2))|0);
      var $73=HEAP[$72];
      var $74=HEAP[$73];
      $regv1=$74;
      var $75=$6;
      var $76=(($75)&255);
      var $77=$1;
      var $78=(($77+204)|0);
      var $79=(($78+($76<<2))|0);
      var $80=HEAP[$79];
      var $81=HEAP[$80];
      $rmv2=$81;
      var $82=$7;
      var $83=(($82 << 24) >> 24)!=0;
      if ($83) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $85=$8;
      var $86=$1;
      var $87=$regv1;
      var $88=$rmv2;
      var $89=FUNCTION_TABLE[$85]($86, $87, $88);
      var $90=$5;
      var $91=(($90)&255);
      var $92=$1;
      var $93=(($92+204)|0);
      var $94=(($93+($91<<2))|0);
      var $95=HEAP[$94];
      HEAP[$95]=$89;
      __label__ = 10; break;
    case 9: 
      var $97=$8;
      var $98=$1;
      var $99=$rmv2;
      var $100=$regv1;
      var $101=FUNCTION_TABLE[$97]($98, $99, $100);
      var $102=$6;
      var $103=(($102)&255);
      var $104=$1;
      var $105=(($104+204)|0);
      var $106=(($105+($103<<2))|0);
      var $107=HEAP[$106];
      HEAP[$107]=$101;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      __label__ = 86; break;
    case 12: 
      var $111=$1;
      var $112=(($111+236)|0);
      var $113=HEAP[$112];
      var $114=(($113 << 24) >> 24)!=0;
      if ($114) { __label__ = 21; break; } else { __label__ = 13; break; }
    case 13: 
      var $116=$6;
      var $117=(($116)&255);
      var $118=(($117)|0)==2;
      if ($118) { __label__ = 18; break; } else { __label__ = 14; break; }
    case 14: 
      var $120=$6;
      var $121=(($120)&255);
      var $122=(($121)|0)==3;
      if ($122) { __label__ = 18; break; } else { __label__ = 15; break; }
    case 15: 
      var $124=$6;
      var $125=(($124)&255);
      var $126=(($125)|0)==6;
      if ($126) { __label__ = 16; break; } else { __label__ = 19; break; }
    case 16: 
      var $128=$4;
      var $129=(($128)&255);
      var $130=(($129)|0)==1;
      if ($130) { __label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $132=$4;
      var $133=(($132)&255);
      var $134=(($133)|0)==2;
      if ($134) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $136=$1;
      var $137=(($136+4)|0);
      var $138=(($137+32)|0);
      var $139=(($138+16)|0);
      var $140=(($139)|0);
      var $141=HEAP[$140];
      $seg=$141;
      __label__ = 20; break;
    case 19: 
      var $143=$1;
      var $144=(($143+4)|0);
      var $145=(($144+32)|0);
      var $146=(($145+24)|0);
      var $147=(($146)|0);
      var $148=HEAP[$147];
      $seg=$148;
      __label__ = 20; break;
    case 20: 
      __label__ = 22; break;
    case 21: 
      var $151=$1;
      var $152=(($151+238)|0);
      var $153=HEAP[$152];
      $seg=$153;
      __label__ = 22; break;
    case 22: 
      var $155=$4;
      var $156=(($155)&255);
      var $157=(($156)|0)==0;
      if ($157) { __label__ = 23; break; } else { __label__ = 47; break; }
    case 23: 
      var $159=$6;
      var $160=(($159)&255);
      var $161=(($160)|0)==6;
      if ($161) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $163=$1;
      var $164=_softx86_fetch_exec_byte($163);
      var $165=(($164)&255);
      $ofs=$165;
      var $166=$1;
      var $167=_softx86_fetch_exec_byte($166);
      var $168=(($167)&255);
      var $169=$168 << 8;
      var $170=$ofs;
      var $171=(($170)&65535);
      var $172=$171 | $169;
      var $173=(($172) & 65535);
      $ofs=$173;
      __label__ = 46; break;
    case 25: 
      var $175=$6;
      var $176=(($175)&255);
      var $177=(($176)|0)==0;
      if ($177) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $179=$1;
      var $180=(($179+4)|0);
      var $181=(($180)|0);
      var $182=(($181+12)|0);
      var $183=$182;
      var $184=(($183)|0);
      var $185=HEAP[$184];
      var $186=(($185)&65535);
      var $187=$1;
      var $188=(($187+4)|0);
      var $189=(($188)|0);
      var $190=(($189+24)|0);
      var $191=$190;
      var $192=(($191)|0);
      var $193=HEAP[$192];
      var $194=(($193)&65535);
      var $195=(($186+$194)|0);
      var $196=(($195) & 65535);
      $ofs=$196;
      __label__ = 45; break;
    case 27: 
      var $198=$6;
      var $199=(($198)&255);
      var $200=(($199)|0)==1;
      if ($200) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $202=$1;
      var $203=(($202+4)|0);
      var $204=(($203)|0);
      var $205=(($204+12)|0);
      var $206=$205;
      var $207=(($206)|0);
      var $208=HEAP[$207];
      var $209=(($208)&65535);
      var $210=$1;
      var $211=(($210+4)|0);
      var $212=(($211)|0);
      var $213=(($212+28)|0);
      var $214=$213;
      var $215=(($214)|0);
      var $216=HEAP[$215];
      var $217=(($216)&65535);
      var $218=(($209+$217)|0);
      var $219=(($218) & 65535);
      $ofs=$219;
      __label__ = 44; break;
    case 29: 
      var $221=$6;
      var $222=(($221)&255);
      var $223=(($222)|0)==2;
      if ($223) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $225=$1;
      var $226=(($225+4)|0);
      var $227=(($226)|0);
      var $228=(($227+20)|0);
      var $229=$228;
      var $230=(($229)|0);
      var $231=HEAP[$230];
      var $232=(($231)&65535);
      var $233=$1;
      var $234=(($233+4)|0);
      var $235=(($234)|0);
      var $236=(($235+24)|0);
      var $237=$236;
      var $238=(($237)|0);
      var $239=HEAP[$238];
      var $240=(($239)&65535);
      var $241=(($232+$240)|0);
      var $242=(($241) & 65535);
      $ofs=$242;
      __label__ = 43; break;
    case 31: 
      var $244=$6;
      var $245=(($244)&255);
      var $246=(($245)|0)==3;
      if ($246) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $248=$1;
      var $249=(($248+4)|0);
      var $250=(($249)|0);
      var $251=(($250+20)|0);
      var $252=$251;
      var $253=(($252)|0);
      var $254=HEAP[$253];
      var $255=(($254)&65535);
      var $256=$1;
      var $257=(($256+4)|0);
      var $258=(($257)|0);
      var $259=(($258+28)|0);
      var $260=$259;
      var $261=(($260)|0);
      var $262=HEAP[$261];
      var $263=(($262)&65535);
      var $264=(($255+$263)|0);
      var $265=(($264) & 65535);
      $ofs=$265;
      __label__ = 42; break;
    case 33: 
      var $267=$6;
      var $268=(($267)&255);
      var $269=(($268)|0)==4;
      if ($269) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $271=$1;
      var $272=(($271+4)|0);
      var $273=(($272)|0);
      var $274=(($273+24)|0);
      var $275=$274;
      var $276=(($275)|0);
      var $277=HEAP[$276];
      $ofs=$277;
      __label__ = 41; break;
    case 35: 
      var $279=$6;
      var $280=(($279)&255);
      var $281=(($280)|0)==5;
      if ($281) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $283=$1;
      var $284=(($283+4)|0);
      var $285=(($284)|0);
      var $286=(($285+28)|0);
      var $287=$286;
      var $288=(($287)|0);
      var $289=HEAP[$288];
      $ofs=$289;
      __label__ = 40; break;
    case 37: 
      var $291=$6;
      var $292=(($291)&255);
      var $293=(($292)|0)==7;
      if ($293) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $295=$1;
      var $296=(($295+4)|0);
      var $297=(($296)|0);
      var $298=(($297+12)|0);
      var $299=$298;
      var $300=(($299)|0);
      var $301=HEAP[$300];
      $ofs=$301;
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 76; break;
    case 47: 
      var $311=$6;
      var $312=(($311)&255);
      var $313=(($312)|0)==0;
      if ($313) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $315=$1;
      var $316=(($315+4)|0);
      var $317=(($316)|0);
      var $318=(($317+12)|0);
      var $319=$318;
      var $320=(($319)|0);
      var $321=HEAP[$320];
      var $322=(($321)&65535);
      var $323=$1;
      var $324=(($323+4)|0);
      var $325=(($324)|0);
      var $326=(($325+24)|0);
      var $327=$326;
      var $328=(($327)|0);
      var $329=HEAP[$328];
      var $330=(($329)&65535);
      var $331=(($322+$330)|0);
      var $332=(($331) & 65535);
      $ofs=$332;
      __label__ = 70; break;
    case 49: 
      var $334=$6;
      var $335=(($334)&255);
      var $336=(($335)|0)==1;
      if ($336) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $338=$1;
      var $339=(($338+4)|0);
      var $340=(($339)|0);
      var $341=(($340+12)|0);
      var $342=$341;
      var $343=(($342)|0);
      var $344=HEAP[$343];
      var $345=(($344)&65535);
      var $346=$1;
      var $347=(($346+4)|0);
      var $348=(($347)|0);
      var $349=(($348+28)|0);
      var $350=$349;
      var $351=(($350)|0);
      var $352=HEAP[$351];
      var $353=(($352)&65535);
      var $354=(($345+$353)|0);
      var $355=(($354) & 65535);
      $ofs=$355;
      __label__ = 69; break;
    case 51: 
      var $357=$6;
      var $358=(($357)&255);
      var $359=(($358)|0)==2;
      if ($359) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $361=$1;
      var $362=(($361+4)|0);
      var $363=(($362)|0);
      var $364=(($363+20)|0);
      var $365=$364;
      var $366=(($365)|0);
      var $367=HEAP[$366];
      var $368=(($367)&65535);
      var $369=$1;
      var $370=(($369+4)|0);
      var $371=(($370)|0);
      var $372=(($371+24)|0);
      var $373=$372;
      var $374=(($373)|0);
      var $375=HEAP[$374];
      var $376=(($375)&65535);
      var $377=(($368+$376)|0);
      var $378=(($377) & 65535);
      $ofs=$378;
      __label__ = 68; break;
    case 53: 
      var $380=$6;
      var $381=(($380)&255);
      var $382=(($381)|0)==3;
      if ($382) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $384=$1;
      var $385=(($384+4)|0);
      var $386=(($385)|0);
      var $387=(($386+20)|0);
      var $388=$387;
      var $389=(($388)|0);
      var $390=HEAP[$389];
      var $391=(($390)&65535);
      var $392=$1;
      var $393=(($392+4)|0);
      var $394=(($393)|0);
      var $395=(($394+28)|0);
      var $396=$395;
      var $397=(($396)|0);
      var $398=HEAP[$397];
      var $399=(($398)&65535);
      var $400=(($391+$399)|0);
      var $401=(($400) & 65535);
      $ofs=$401;
      __label__ = 67; break;
    case 55: 
      var $403=$6;
      var $404=(($403)&255);
      var $405=(($404)|0)==4;
      if ($405) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $407=$1;
      var $408=(($407+4)|0);
      var $409=(($408)|0);
      var $410=(($409+24)|0);
      var $411=$410;
      var $412=(($411)|0);
      var $413=HEAP[$412];
      $ofs=$413;
      __label__ = 66; break;
    case 57: 
      var $415=$6;
      var $416=(($415)&255);
      var $417=(($416)|0)==5;
      if ($417) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $419=$1;
      var $420=(($419+4)|0);
      var $421=(($420)|0);
      var $422=(($421+28)|0);
      var $423=$422;
      var $424=(($423)|0);
      var $425=HEAP[$424];
      $ofs=$425;
      __label__ = 65; break;
    case 59: 
      var $427=$6;
      var $428=(($427)&255);
      var $429=(($428)|0)==6;
      if ($429) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      var $431=$1;
      var $432=(($431+4)|0);
      var $433=(($432)|0);
      var $434=(($433+20)|0);
      var $435=$434;
      var $436=(($435)|0);
      var $437=HEAP[$436];
      $ofs=$437;
      __label__ = 64; break;
    case 61: 
      var $439=$6;
      var $440=(($439)&255);
      var $441=(($440)|0)==7;
      if ($441) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $443=$1;
      var $444=(($443+4)|0);
      var $445=(($444)|0);
      var $446=(($445+12)|0);
      var $447=$446;
      var $448=(($447)|0);
      var $449=HEAP[$448];
      $ofs=$449;
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      __label__ = 68; break;
    case 68: 
      __label__ = 69; break;
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $458=$4;
      var $459=(($458)&255);
      var $460=(($459)|0)==1;
      if ($460) { __label__ = 71; break; } else { __label__ = 74; break; }
    case 71: 
      var $462=$1;
      var $463=_softx86_fetch_exec_byte($462);
      var $464=(($463)&255);
      $xx=$464;
      var $465=$xx;
      var $466=(($465)&65535);
      var $467=$466 & 128;
      var $468=(($467)|0)!=0;
      if ($468) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      var $470=$xx;
      var $471=(($470)&65535);
      var $472=$471 | 65280;
      var $473=(($472) & 65535);
      $xx=$473;
      __label__ = 73; break;
    case 73: 
      __label__ = 75; break;
    case 74: 
      var $476=$1;
      var $477=_softx86_fetch_exec_byte($476);
      var $478=(($477)&255);
      $xx=$478;
      var $479=$1;
      var $480=_softx86_fetch_exec_byte($479);
      var $481=(($480)&255);
      var $482=$481 << 8;
      var $483=$xx;
      var $484=(($483)&65535);
      var $485=$484 | $482;
      var $486=(($485) & 65535);
      $xx=$486;
      __label__ = 75; break;
    case 75: 
      var $488=$ofs;
      var $489=(($488)&65535);
      var $490=$xx;
      var $491=(($490)&65535);
      var $492=(($489+$491)|0);
      var $493=$492 & 65535;
      var $494=(($493) & 65535);
      $ofs=$494;
      __label__ = 76; break;
    case 76: 
      var $496=$2;
      var $497=(($496 << 24) >> 24)!=0;
      if ($497) { __label__ = 77; break; } else { __label__ = 81; break; }
    case 77: 
      var $499=$5;
      var $500=(($499)&255);
      var $501=$1;
      var $502=(($501+4)|0);
      var $503=(($502)|0);
      var $504=(($503+($500<<2))|0);
      var $505=$504;
      var $506=(($505)|0);
      var $507=HEAP[$506];
      $regv3=$507;
      var $508=$seg;
      var $509=(($508)&65535);
      var $510=$509 << 4;
      var $511=$ofs;
      var $512=(($511)&65535);
      var $513=(($510+$512)|0);
      $lo=$513;
      var $514=$1;
      var $515=$lo;
      var $516=$rmv4;
      var $517=_softx86_fetch($514, 0, $515, $516, 2);
      var $518=$7;
      var $519=(($518 << 24) >> 24)!=0;
      if ($519) { __label__ = 78; break; } else { __label__ = 79; break; }
    case 78: 
      var $521=$9;
      var $522=$1;
      var $523=$regv3;
      var $524=HEAP[$rmv4];
      var $525=FUNCTION_TABLE[$521]($522, $523, $524);
      var $526=$5;
      var $527=(($526)&255);
      var $528=$1;
      var $529=(($528+4)|0);
      var $530=(($529)|0);
      var $531=(($530+($527<<2))|0);
      var $532=$531;
      var $533=(($532)|0);
      HEAP[$533]=$525;
      __label__ = 80; break;
    case 79: 
      var $535=$9;
      var $536=$1;
      var $537=HEAP[$rmv4];
      var $538=$regv3;
      var $539=FUNCTION_TABLE[$535]($536, $537, $538);
      HEAP[$rmv4]=$539;
      var $540=$1;
      var $541=$lo;
      var $542=$rmv4;
      var $543=_softx86_write($540, 0, $541, $542, 2);
      __label__ = 80; break;
    case 80: 
      __label__ = 85; break;
    case 81: 
      var $546=$5;
      var $547=(($546)&255);
      var $548=$1;
      var $549=(($548+204)|0);
      var $550=(($549+($547<<2))|0);
      var $551=HEAP[$550];
      var $552=HEAP[$551];
      $regv5=$552;
      var $553=$seg;
      var $554=(($553)&65535);
      var $555=$554 << 4;
      var $556=$ofs;
      var $557=(($556)&65535);
      var $558=(($555+$557)|0);
      $lo=$558;
      var $559=$1;
      var $560=$lo;
      var $561=_softx86_fetch($559, 0, $560, $rmv6, 1);
      var $562=$7;
      var $563=(($562 << 24) >> 24)!=0;
      if ($563) { __label__ = 82; break; } else { __label__ = 83; break; }
    case 82: 
      var $565=$8;
      var $566=$1;
      var $567=$regv5;
      var $568=HEAP[$rmv6];
      var $569=FUNCTION_TABLE[$565]($566, $567, $568);
      var $570=$5;
      var $571=(($570)&255);
      var $572=$1;
      var $573=(($572+204)|0);
      var $574=(($573+($571<<2))|0);
      var $575=HEAP[$574];
      HEAP[$575]=$569;
      __label__ = 84; break;
    case 83: 
      var $577=$8;
      var $578=$1;
      var $579=HEAP[$rmv6];
      var $580=$regv5;
      var $581=FUNCTION_TABLE[$577]($578, $579, $580);
      HEAP[$rmv6]=$581;
      var $582=$1;
      var $583=$lo;
      var $584=_softx86_write($582, 0, $583, $rmv6, 1);
      __label__ = 84; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break;
    case 86: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modregrm_rw["X"]=1;

function _sx86_exec_full_modregrm_ro($ctx, $w16, $d32, $mod, $reg, $rm, $opswap, $op8, $op16, $op32) {
  var __stackBase__  = STACKTOP; STACKTOP += 3; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $regv;
      var $rmv;
      var $regv1;
      var $rmv2;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      var $regv3;
      var $rmv4=__stackBase__;
      var $regv5;
      var $rmv6=__stackBase__+2;
      $1=$ctx;
      $2=$w16;
      $3=$d32;
      $4=$mod;
      $5=$reg;
      $6=$rm;
      $7=$opswap;
      $8=$op8;
      $9=$op16;
      $10=$op32;
      var $11=$4;
      var $12=(($11)&255);
      var $13=(($12)|0)==3;
      if ($13) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: 
      var $15=$2;
      var $16=(($15 << 24) >> 24)!=0;
      if ($16) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $18=$5;
      var $19=(($18)&255);
      var $20=$1;
      var $21=(($20+4)|0);
      var $22=(($21)|0);
      var $23=(($22+($19<<2))|0);
      var $24=$23;
      var $25=(($24)|0);
      var $26=HEAP[$25];
      $regv=$26;
      var $27=$6;
      var $28=(($27)&255);
      var $29=$1;
      var $30=(($29+4)|0);
      var $31=(($30)|0);
      var $32=(($31+($28<<2))|0);
      var $33=$32;
      var $34=(($33)|0);
      var $35=HEAP[$34];
      $rmv=$35;
      var $36=$7;
      var $37=(($36 << 24) >> 24)!=0;
      if ($37) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $39=$9;
      var $40=$1;
      var $41=$regv;
      var $42=$rmv;
      var $43=FUNCTION_TABLE[$39]($40, $41, $42);
      __label__ = 6; break;
    case 5: 
      var $45=$9;
      var $46=$1;
      var $47=$rmv;
      var $48=$regv;
      var $49=FUNCTION_TABLE[$45]($46, $47, $48);
      __label__ = 6; break;
    case 6: 
      __label__ = 11; break;
    case 7: 
      var $52=$5;
      var $53=(($52)&255);
      var $54=$1;
      var $55=(($54+204)|0);
      var $56=(($55+($53<<2))|0);
      var $57=HEAP[$56];
      var $58=HEAP[$57];
      $regv1=$58;
      var $59=$6;
      var $60=(($59)&255);
      var $61=$1;
      var $62=(($61+204)|0);
      var $63=(($62+($60<<2))|0);
      var $64=HEAP[$63];
      var $65=HEAP[$64];
      $rmv2=$65;
      var $66=$7;
      var $67=(($66 << 24) >> 24)!=0;
      if ($67) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $69=$8;
      var $70=$1;
      var $71=$regv1;
      var $72=$rmv2;
      var $73=FUNCTION_TABLE[$69]($70, $71, $72);
      __label__ = 10; break;
    case 9: 
      var $75=$8;
      var $76=$1;
      var $77=$rmv2;
      var $78=$regv1;
      var $79=FUNCTION_TABLE[$75]($76, $77, $78);
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      __label__ = 86; break;
    case 12: 
      var $83=$1;
      var $84=(($83+236)|0);
      var $85=HEAP[$84];
      var $86=(($85 << 24) >> 24)!=0;
      if ($86) { __label__ = 21; break; } else { __label__ = 13; break; }
    case 13: 
      var $88=$6;
      var $89=(($88)&255);
      var $90=(($89)|0)==2;
      if ($90) { __label__ = 18; break; } else { __label__ = 14; break; }
    case 14: 
      var $92=$6;
      var $93=(($92)&255);
      var $94=(($93)|0)==3;
      if ($94) { __label__ = 18; break; } else { __label__ = 15; break; }
    case 15: 
      var $96=$6;
      var $97=(($96)&255);
      var $98=(($97)|0)==6;
      if ($98) { __label__ = 16; break; } else { __label__ = 19; break; }
    case 16: 
      var $100=$4;
      var $101=(($100)&255);
      var $102=(($101)|0)==1;
      if ($102) { __label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $104=$4;
      var $105=(($104)&255);
      var $106=(($105)|0)==2;
      if ($106) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $108=$1;
      var $109=(($108+4)|0);
      var $110=(($109+32)|0);
      var $111=(($110+16)|0);
      var $112=(($111)|0);
      var $113=HEAP[$112];
      $seg=$113;
      __label__ = 20; break;
    case 19: 
      var $115=$1;
      var $116=(($115+4)|0);
      var $117=(($116+32)|0);
      var $118=(($117+24)|0);
      var $119=(($118)|0);
      var $120=HEAP[$119];
      $seg=$120;
      __label__ = 20; break;
    case 20: 
      __label__ = 22; break;
    case 21: 
      var $123=$1;
      var $124=(($123+238)|0);
      var $125=HEAP[$124];
      $seg=$125;
      __label__ = 22; break;
    case 22: 
      var $127=$4;
      var $128=(($127)&255);
      var $129=(($128)|0)==0;
      if ($129) { __label__ = 23; break; } else { __label__ = 47; break; }
    case 23: 
      var $131=$6;
      var $132=(($131)&255);
      var $133=(($132)|0)==6;
      if ($133) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $135=$1;
      var $136=_softx86_fetch_exec_byte($135);
      var $137=(($136)&255);
      $ofs=$137;
      var $138=$1;
      var $139=_softx86_fetch_exec_byte($138);
      var $140=(($139)&255);
      var $141=$140 << 8;
      var $142=$ofs;
      var $143=(($142)&65535);
      var $144=$143 | $141;
      var $145=(($144) & 65535);
      $ofs=$145;
      __label__ = 46; break;
    case 25: 
      var $147=$6;
      var $148=(($147)&255);
      var $149=(($148)|0)==0;
      if ($149) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $151=$1;
      var $152=(($151+4)|0);
      var $153=(($152)|0);
      var $154=(($153+12)|0);
      var $155=$154;
      var $156=(($155)|0);
      var $157=HEAP[$156];
      var $158=(($157)&65535);
      var $159=$1;
      var $160=(($159+4)|0);
      var $161=(($160)|0);
      var $162=(($161+24)|0);
      var $163=$162;
      var $164=(($163)|0);
      var $165=HEAP[$164];
      var $166=(($165)&65535);
      var $167=(($158+$166)|0);
      var $168=(($167) & 65535);
      $ofs=$168;
      __label__ = 45; break;
    case 27: 
      var $170=$6;
      var $171=(($170)&255);
      var $172=(($171)|0)==1;
      if ($172) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $174=$1;
      var $175=(($174+4)|0);
      var $176=(($175)|0);
      var $177=(($176+12)|0);
      var $178=$177;
      var $179=(($178)|0);
      var $180=HEAP[$179];
      var $181=(($180)&65535);
      var $182=$1;
      var $183=(($182+4)|0);
      var $184=(($183)|0);
      var $185=(($184+28)|0);
      var $186=$185;
      var $187=(($186)|0);
      var $188=HEAP[$187];
      var $189=(($188)&65535);
      var $190=(($181+$189)|0);
      var $191=(($190) & 65535);
      $ofs=$191;
      __label__ = 44; break;
    case 29: 
      var $193=$6;
      var $194=(($193)&255);
      var $195=(($194)|0)==2;
      if ($195) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $197=$1;
      var $198=(($197+4)|0);
      var $199=(($198)|0);
      var $200=(($199+20)|0);
      var $201=$200;
      var $202=(($201)|0);
      var $203=HEAP[$202];
      var $204=(($203)&65535);
      var $205=$1;
      var $206=(($205+4)|0);
      var $207=(($206)|0);
      var $208=(($207+24)|0);
      var $209=$208;
      var $210=(($209)|0);
      var $211=HEAP[$210];
      var $212=(($211)&65535);
      var $213=(($204+$212)|0);
      var $214=(($213) & 65535);
      $ofs=$214;
      __label__ = 43; break;
    case 31: 
      var $216=$6;
      var $217=(($216)&255);
      var $218=(($217)|0)==3;
      if ($218) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $220=$1;
      var $221=(($220+4)|0);
      var $222=(($221)|0);
      var $223=(($222+20)|0);
      var $224=$223;
      var $225=(($224)|0);
      var $226=HEAP[$225];
      var $227=(($226)&65535);
      var $228=$1;
      var $229=(($228+4)|0);
      var $230=(($229)|0);
      var $231=(($230+28)|0);
      var $232=$231;
      var $233=(($232)|0);
      var $234=HEAP[$233];
      var $235=(($234)&65535);
      var $236=(($227+$235)|0);
      var $237=(($236) & 65535);
      $ofs=$237;
      __label__ = 42; break;
    case 33: 
      var $239=$6;
      var $240=(($239)&255);
      var $241=(($240)|0)==4;
      if ($241) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $243=$1;
      var $244=(($243+4)|0);
      var $245=(($244)|0);
      var $246=(($245+24)|0);
      var $247=$246;
      var $248=(($247)|0);
      var $249=HEAP[$248];
      $ofs=$249;
      __label__ = 41; break;
    case 35: 
      var $251=$6;
      var $252=(($251)&255);
      var $253=(($252)|0)==5;
      if ($253) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $255=$1;
      var $256=(($255+4)|0);
      var $257=(($256)|0);
      var $258=(($257+28)|0);
      var $259=$258;
      var $260=(($259)|0);
      var $261=HEAP[$260];
      $ofs=$261;
      __label__ = 40; break;
    case 37: 
      var $263=$6;
      var $264=(($263)&255);
      var $265=(($264)|0)==7;
      if ($265) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $267=$1;
      var $268=(($267+4)|0);
      var $269=(($268)|0);
      var $270=(($269+12)|0);
      var $271=$270;
      var $272=(($271)|0);
      var $273=HEAP[$272];
      $ofs=$273;
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 76; break;
    case 47: 
      var $283=$6;
      var $284=(($283)&255);
      var $285=(($284)|0)==0;
      if ($285) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $287=$1;
      var $288=(($287+4)|0);
      var $289=(($288)|0);
      var $290=(($289+12)|0);
      var $291=$290;
      var $292=(($291)|0);
      var $293=HEAP[$292];
      var $294=(($293)&65535);
      var $295=$1;
      var $296=(($295+4)|0);
      var $297=(($296)|0);
      var $298=(($297+24)|0);
      var $299=$298;
      var $300=(($299)|0);
      var $301=HEAP[$300];
      var $302=(($301)&65535);
      var $303=(($294+$302)|0);
      var $304=(($303) & 65535);
      $ofs=$304;
      __label__ = 70; break;
    case 49: 
      var $306=$6;
      var $307=(($306)&255);
      var $308=(($307)|0)==1;
      if ($308) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $310=$1;
      var $311=(($310+4)|0);
      var $312=(($311)|0);
      var $313=(($312+12)|0);
      var $314=$313;
      var $315=(($314)|0);
      var $316=HEAP[$315];
      var $317=(($316)&65535);
      var $318=$1;
      var $319=(($318+4)|0);
      var $320=(($319)|0);
      var $321=(($320+28)|0);
      var $322=$321;
      var $323=(($322)|0);
      var $324=HEAP[$323];
      var $325=(($324)&65535);
      var $326=(($317+$325)|0);
      var $327=(($326) & 65535);
      $ofs=$327;
      __label__ = 69; break;
    case 51: 
      var $329=$6;
      var $330=(($329)&255);
      var $331=(($330)|0)==2;
      if ($331) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $333=$1;
      var $334=(($333+4)|0);
      var $335=(($334)|0);
      var $336=(($335+20)|0);
      var $337=$336;
      var $338=(($337)|0);
      var $339=HEAP[$338];
      var $340=(($339)&65535);
      var $341=$1;
      var $342=(($341+4)|0);
      var $343=(($342)|0);
      var $344=(($343+24)|0);
      var $345=$344;
      var $346=(($345)|0);
      var $347=HEAP[$346];
      var $348=(($347)&65535);
      var $349=(($340+$348)|0);
      var $350=(($349) & 65535);
      $ofs=$350;
      __label__ = 68; break;
    case 53: 
      var $352=$6;
      var $353=(($352)&255);
      var $354=(($353)|0)==3;
      if ($354) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $356=$1;
      var $357=(($356+4)|0);
      var $358=(($357)|0);
      var $359=(($358+20)|0);
      var $360=$359;
      var $361=(($360)|0);
      var $362=HEAP[$361];
      var $363=(($362)&65535);
      var $364=$1;
      var $365=(($364+4)|0);
      var $366=(($365)|0);
      var $367=(($366+28)|0);
      var $368=$367;
      var $369=(($368)|0);
      var $370=HEAP[$369];
      var $371=(($370)&65535);
      var $372=(($363+$371)|0);
      var $373=(($372) & 65535);
      $ofs=$373;
      __label__ = 67; break;
    case 55: 
      var $375=$6;
      var $376=(($375)&255);
      var $377=(($376)|0)==4;
      if ($377) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $379=$1;
      var $380=(($379+4)|0);
      var $381=(($380)|0);
      var $382=(($381+24)|0);
      var $383=$382;
      var $384=(($383)|0);
      var $385=HEAP[$384];
      $ofs=$385;
      __label__ = 66; break;
    case 57: 
      var $387=$6;
      var $388=(($387)&255);
      var $389=(($388)|0)==5;
      if ($389) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $391=$1;
      var $392=(($391+4)|0);
      var $393=(($392)|0);
      var $394=(($393+28)|0);
      var $395=$394;
      var $396=(($395)|0);
      var $397=HEAP[$396];
      $ofs=$397;
      __label__ = 65; break;
    case 59: 
      var $399=$6;
      var $400=(($399)&255);
      var $401=(($400)|0)==6;
      if ($401) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      var $403=$1;
      var $404=(($403+4)|0);
      var $405=(($404)|0);
      var $406=(($405+20)|0);
      var $407=$406;
      var $408=(($407)|0);
      var $409=HEAP[$408];
      $ofs=$409;
      __label__ = 64; break;
    case 61: 
      var $411=$6;
      var $412=(($411)&255);
      var $413=(($412)|0)==7;
      if ($413) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $415=$1;
      var $416=(($415+4)|0);
      var $417=(($416)|0);
      var $418=(($417+12)|0);
      var $419=$418;
      var $420=(($419)|0);
      var $421=HEAP[$420];
      $ofs=$421;
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      __label__ = 68; break;
    case 68: 
      __label__ = 69; break;
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $430=$4;
      var $431=(($430)&255);
      var $432=(($431)|0)==1;
      if ($432) { __label__ = 71; break; } else { __label__ = 74; break; }
    case 71: 
      var $434=$1;
      var $435=_softx86_fetch_exec_byte($434);
      var $436=(($435)&255);
      $xx=$436;
      var $437=$xx;
      var $438=(($437)&65535);
      var $439=$438 & 128;
      var $440=(($439)|0)!=0;
      if ($440) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      var $442=$xx;
      var $443=(($442)&65535);
      var $444=$443 | 65280;
      var $445=(($444) & 65535);
      $xx=$445;
      __label__ = 73; break;
    case 73: 
      __label__ = 75; break;
    case 74: 
      var $448=$1;
      var $449=_softx86_fetch_exec_byte($448);
      var $450=(($449)&255);
      $xx=$450;
      var $451=$1;
      var $452=_softx86_fetch_exec_byte($451);
      var $453=(($452)&255);
      var $454=$453 << 8;
      var $455=$xx;
      var $456=(($455)&65535);
      var $457=$456 | $454;
      var $458=(($457) & 65535);
      $xx=$458;
      __label__ = 75; break;
    case 75: 
      var $460=$ofs;
      var $461=(($460)&65535);
      var $462=$xx;
      var $463=(($462)&65535);
      var $464=(($461+$463)|0);
      var $465=$464 & 65535;
      var $466=(($465) & 65535);
      $ofs=$466;
      __label__ = 76; break;
    case 76: 
      var $468=$2;
      var $469=(($468 << 24) >> 24)!=0;
      if ($469) { __label__ = 77; break; } else { __label__ = 81; break; }
    case 77: 
      var $471=$5;
      var $472=(($471)&255);
      var $473=$1;
      var $474=(($473+4)|0);
      var $475=(($474)|0);
      var $476=(($475+($472<<2))|0);
      var $477=$476;
      var $478=(($477)|0);
      var $479=HEAP[$478];
      $regv3=$479;
      var $480=$seg;
      var $481=(($480)&65535);
      var $482=$481 << 4;
      var $483=$ofs;
      var $484=(($483)&65535);
      var $485=(($482+$484)|0);
      $lo=$485;
      var $486=$1;
      var $487=$lo;
      var $488=$rmv4;
      var $489=_softx86_fetch($486, 0, $487, $488, 2);
      var $490=$7;
      var $491=(($490 << 24) >> 24)!=0;
      if ($491) { __label__ = 78; break; } else { __label__ = 79; break; }
    case 78: 
      var $493=$9;
      var $494=$1;
      var $495=$regv3;
      var $496=HEAP[$rmv4];
      var $497=FUNCTION_TABLE[$493]($494, $495, $496);
      __label__ = 80; break;
    case 79: 
      var $499=$9;
      var $500=$1;
      var $501=HEAP[$rmv4];
      var $502=$regv3;
      var $503=FUNCTION_TABLE[$499]($500, $501, $502);
      __label__ = 80; break;
    case 80: 
      __label__ = 85; break;
    case 81: 
      var $506=$5;
      var $507=(($506)&255);
      var $508=$1;
      var $509=(($508+204)|0);
      var $510=(($509+($507<<2))|0);
      var $511=HEAP[$510];
      var $512=HEAP[$511];
      $regv5=$512;
      var $513=$seg;
      var $514=(($513)&65535);
      var $515=$514 << 4;
      var $516=$ofs;
      var $517=(($516)&65535);
      var $518=(($515+$517)|0);
      $lo=$518;
      var $519=$1;
      var $520=$lo;
      var $521=_softx86_fetch($519, 0, $520, $rmv6, 1);
      var $522=$7;
      var $523=(($522 << 24) >> 24)!=0;
      if ($523) { __label__ = 82; break; } else { __label__ = 83; break; }
    case 82: 
      var $525=$8;
      var $526=$1;
      var $527=$regv5;
      var $528=HEAP[$rmv6];
      var $529=FUNCTION_TABLE[$525]($526, $527, $528);
      __label__ = 84; break;
    case 83: 
      var $531=$8;
      var $532=$1;
      var $533=HEAP[$rmv6];
      var $534=$regv5;
      var $535=FUNCTION_TABLE[$531]($532, $533, $534);
      __label__ = 84; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break;
    case 86: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modregrm_ro["X"]=1;

function _sx86_exec_full_modregrm_far($ctx, $d32, $mod, $reg, $rm, $op16, $op32) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      var $rmv=__stackBase__;
      var $rmv2=__stackBase__+2;
      $1=$ctx;
      $2=$d32;
      $3=$mod;
      $4=$reg;
      $5=$rm;
      $6=$op16;
      $7=$op32;
      var $8=$3;
      var $9=(($8)&255);
      var $10=(($9)|0)==3;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 68; break;
    case 3: 
      var $13=$1;
      var $14=(($13+236)|0);
      var $15=HEAP[$14];
      var $16=(($15 << 24) >> 24)!=0;
      if ($16) { __label__ = 12; break; } else { __label__ = 4; break; }
    case 4: 
      var $18=$5;
      var $19=(($18)&255);
      var $20=(($19)|0)==2;
      if ($20) { __label__ = 9; break; } else { __label__ = 5; break; }
    case 5: 
      var $22=$5;
      var $23=(($22)&255);
      var $24=(($23)|0)==3;
      if ($24) { __label__ = 9; break; } else { __label__ = 6; break; }
    case 6: 
      var $26=$5;
      var $27=(($26)&255);
      var $28=(($27)|0)==6;
      if ($28) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $30=$3;
      var $31=(($30)&255);
      var $32=(($31)|0)==1;
      if ($32) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $34=$3;
      var $35=(($34)&255);
      var $36=(($35)|0)==2;
      if ($36) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $38=$1;
      var $39=(($38+4)|0);
      var $40=(($39+32)|0);
      var $41=(($40+16)|0);
      var $42=(($41)|0);
      var $43=HEAP[$42];
      $seg=$43;
      __label__ = 11; break;
    case 10: 
      var $45=$1;
      var $46=(($45+4)|0);
      var $47=(($46+32)|0);
      var $48=(($47+24)|0);
      var $49=(($48)|0);
      var $50=HEAP[$49];
      $seg=$50;
      __label__ = 11; break;
    case 11: 
      __label__ = 13; break;
    case 12: 
      var $53=$1;
      var $54=(($53+238)|0);
      var $55=HEAP[$54];
      $seg=$55;
      __label__ = 13; break;
    case 13: 
      var $57=$3;
      var $58=(($57)&255);
      var $59=(($58)|0)==0;
      if ($59) { __label__ = 14; break; } else { __label__ = 38; break; }
    case 14: 
      var $61=$5;
      var $62=(($61)&255);
      var $63=(($62)|0)==6;
      if ($63) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $65=$1;
      var $66=_softx86_fetch_exec_byte($65);
      var $67=(($66)&255);
      $ofs=$67;
      var $68=$1;
      var $69=_softx86_fetch_exec_byte($68);
      var $70=(($69)&255);
      var $71=$70 << 8;
      var $72=$ofs;
      var $73=(($72)&65535);
      var $74=$73 | $71;
      var $75=(($74) & 65535);
      $ofs=$75;
      __label__ = 37; break;
    case 16: 
      var $77=$5;
      var $78=(($77)&255);
      var $79=(($78)|0)==0;
      if ($79) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $81=$1;
      var $82=(($81+4)|0);
      var $83=(($82)|0);
      var $84=(($83+12)|0);
      var $85=$84;
      var $86=(($85)|0);
      var $87=HEAP[$86];
      var $88=(($87)&65535);
      var $89=$1;
      var $90=(($89+4)|0);
      var $91=(($90)|0);
      var $92=(($91+24)|0);
      var $93=$92;
      var $94=(($93)|0);
      var $95=HEAP[$94];
      var $96=(($95)&65535);
      var $97=(($88+$96)|0);
      var $98=(($97) & 65535);
      $ofs=$98;
      __label__ = 36; break;
    case 18: 
      var $100=$5;
      var $101=(($100)&255);
      var $102=(($101)|0)==1;
      if ($102) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $104=$1;
      var $105=(($104+4)|0);
      var $106=(($105)|0);
      var $107=(($106+12)|0);
      var $108=$107;
      var $109=(($108)|0);
      var $110=HEAP[$109];
      var $111=(($110)&65535);
      var $112=$1;
      var $113=(($112+4)|0);
      var $114=(($113)|0);
      var $115=(($114+28)|0);
      var $116=$115;
      var $117=(($116)|0);
      var $118=HEAP[$117];
      var $119=(($118)&65535);
      var $120=(($111+$119)|0);
      var $121=(($120) & 65535);
      $ofs=$121;
      __label__ = 35; break;
    case 20: 
      var $123=$5;
      var $124=(($123)&255);
      var $125=(($124)|0)==2;
      if ($125) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $127=$1;
      var $128=(($127+4)|0);
      var $129=(($128)|0);
      var $130=(($129+20)|0);
      var $131=$130;
      var $132=(($131)|0);
      var $133=HEAP[$132];
      var $134=(($133)&65535);
      var $135=$1;
      var $136=(($135+4)|0);
      var $137=(($136)|0);
      var $138=(($137+24)|0);
      var $139=$138;
      var $140=(($139)|0);
      var $141=HEAP[$140];
      var $142=(($141)&65535);
      var $143=(($134+$142)|0);
      var $144=(($143) & 65535);
      $ofs=$144;
      __label__ = 34; break;
    case 22: 
      var $146=$5;
      var $147=(($146)&255);
      var $148=(($147)|0)==3;
      if ($148) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $150=$1;
      var $151=(($150+4)|0);
      var $152=(($151)|0);
      var $153=(($152+20)|0);
      var $154=$153;
      var $155=(($154)|0);
      var $156=HEAP[$155];
      var $157=(($156)&65535);
      var $158=$1;
      var $159=(($158+4)|0);
      var $160=(($159)|0);
      var $161=(($160+28)|0);
      var $162=$161;
      var $163=(($162)|0);
      var $164=HEAP[$163];
      var $165=(($164)&65535);
      var $166=(($157+$165)|0);
      var $167=(($166) & 65535);
      $ofs=$167;
      __label__ = 33; break;
    case 24: 
      var $169=$5;
      var $170=(($169)&255);
      var $171=(($170)|0)==4;
      if ($171) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $173=$1;
      var $174=(($173+4)|0);
      var $175=(($174)|0);
      var $176=(($175+24)|0);
      var $177=$176;
      var $178=(($177)|0);
      var $179=HEAP[$178];
      $ofs=$179;
      __label__ = 32; break;
    case 26: 
      var $181=$5;
      var $182=(($181)&255);
      var $183=(($182)|0)==5;
      if ($183) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $185=$1;
      var $186=(($185+4)|0);
      var $187=(($186)|0);
      var $188=(($187+28)|0);
      var $189=$188;
      var $190=(($189)|0);
      var $191=HEAP[$190];
      $ofs=$191;
      __label__ = 31; break;
    case 28: 
      var $193=$5;
      var $194=(($193)&255);
      var $195=(($194)|0)==7;
      if ($195) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $197=$1;
      var $198=(($197+4)|0);
      var $199=(($198)|0);
      var $200=(($199+12)|0);
      var $201=$200;
      var $202=(($201)|0);
      var $203=HEAP[$202];
      $ofs=$203;
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 67; break;
    case 38: 
      var $213=$5;
      var $214=(($213)&255);
      var $215=(($214)|0)==0;
      if ($215) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $217=$1;
      var $218=(($217+4)|0);
      var $219=(($218)|0);
      var $220=(($219+12)|0);
      var $221=$220;
      var $222=(($221)|0);
      var $223=HEAP[$222];
      var $224=(($223)&65535);
      var $225=$1;
      var $226=(($225+4)|0);
      var $227=(($226)|0);
      var $228=(($227+24)|0);
      var $229=$228;
      var $230=(($229)|0);
      var $231=HEAP[$230];
      var $232=(($231)&65535);
      var $233=(($224+$232)|0);
      var $234=(($233) & 65535);
      $ofs=$234;
      __label__ = 61; break;
    case 40: 
      var $236=$5;
      var $237=(($236)&255);
      var $238=(($237)|0)==1;
      if ($238) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $240=$1;
      var $241=(($240+4)|0);
      var $242=(($241)|0);
      var $243=(($242+12)|0);
      var $244=$243;
      var $245=(($244)|0);
      var $246=HEAP[$245];
      var $247=(($246)&65535);
      var $248=$1;
      var $249=(($248+4)|0);
      var $250=(($249)|0);
      var $251=(($250+28)|0);
      var $252=$251;
      var $253=(($252)|0);
      var $254=HEAP[$253];
      var $255=(($254)&65535);
      var $256=(($247+$255)|0);
      var $257=(($256) & 65535);
      $ofs=$257;
      __label__ = 60; break;
    case 42: 
      var $259=$5;
      var $260=(($259)&255);
      var $261=(($260)|0)==2;
      if ($261) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $263=$1;
      var $264=(($263+4)|0);
      var $265=(($264)|0);
      var $266=(($265+20)|0);
      var $267=$266;
      var $268=(($267)|0);
      var $269=HEAP[$268];
      var $270=(($269)&65535);
      var $271=$1;
      var $272=(($271+4)|0);
      var $273=(($272)|0);
      var $274=(($273+24)|0);
      var $275=$274;
      var $276=(($275)|0);
      var $277=HEAP[$276];
      var $278=(($277)&65535);
      var $279=(($270+$278)|0);
      var $280=(($279) & 65535);
      $ofs=$280;
      __label__ = 59; break;
    case 44: 
      var $282=$5;
      var $283=(($282)&255);
      var $284=(($283)|0)==3;
      if ($284) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $286=$1;
      var $287=(($286+4)|0);
      var $288=(($287)|0);
      var $289=(($288+20)|0);
      var $290=$289;
      var $291=(($290)|0);
      var $292=HEAP[$291];
      var $293=(($292)&65535);
      var $294=$1;
      var $295=(($294+4)|0);
      var $296=(($295)|0);
      var $297=(($296+28)|0);
      var $298=$297;
      var $299=(($298)|0);
      var $300=HEAP[$299];
      var $301=(($300)&65535);
      var $302=(($293+$301)|0);
      var $303=(($302) & 65535);
      $ofs=$303;
      __label__ = 58; break;
    case 46: 
      var $305=$5;
      var $306=(($305)&255);
      var $307=(($306)|0)==4;
      if ($307) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $309=$1;
      var $310=(($309+4)|0);
      var $311=(($310)|0);
      var $312=(($311+24)|0);
      var $313=$312;
      var $314=(($313)|0);
      var $315=HEAP[$314];
      $ofs=$315;
      __label__ = 57; break;
    case 48: 
      var $317=$5;
      var $318=(($317)&255);
      var $319=(($318)|0)==5;
      if ($319) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $321=$1;
      var $322=(($321+4)|0);
      var $323=(($322)|0);
      var $324=(($323+28)|0);
      var $325=$324;
      var $326=(($325)|0);
      var $327=HEAP[$326];
      $ofs=$327;
      __label__ = 56; break;
    case 50: 
      var $329=$5;
      var $330=(($329)&255);
      var $331=(($330)|0)==6;
      if ($331) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $333=$1;
      var $334=(($333+4)|0);
      var $335=(($334)|0);
      var $336=(($335+20)|0);
      var $337=$336;
      var $338=(($337)|0);
      var $339=HEAP[$338];
      $ofs=$339;
      __label__ = 55; break;
    case 52: 
      var $341=$5;
      var $342=(($341)&255);
      var $343=(($342)|0)==7;
      if ($343) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $345=$1;
      var $346=(($345+4)|0);
      var $347=(($346)|0);
      var $348=(($347+12)|0);
      var $349=$348;
      var $350=(($349)|0);
      var $351=HEAP[$350];
      $ofs=$351;
      __label__ = 54; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      var $360=$3;
      var $361=(($360)&255);
      var $362=(($361)|0)==1;
      if ($362) { __label__ = 62; break; } else { __label__ = 65; break; }
    case 62: 
      var $364=$1;
      var $365=_softx86_fetch_exec_byte($364);
      var $366=(($365)&255);
      $xx=$366;
      var $367=$xx;
      var $368=(($367)&65535);
      var $369=$368 & 128;
      var $370=(($369)|0)!=0;
      if ($370) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: 
      var $372=$xx;
      var $373=(($372)&65535);
      var $374=$373 | 65280;
      var $375=(($374) & 65535);
      $xx=$375;
      __label__ = 64; break;
    case 64: 
      __label__ = 66; break;
    case 65: 
      var $378=$1;
      var $379=_softx86_fetch_exec_byte($378);
      var $380=(($379)&255);
      $xx=$380;
      var $381=$1;
      var $382=_softx86_fetch_exec_byte($381);
      var $383=(($382)&255);
      var $384=$383 << 8;
      var $385=$xx;
      var $386=(($385)&65535);
      var $387=$386 | $384;
      var $388=(($387) & 65535);
      $xx=$388;
      __label__ = 66; break;
    case 66: 
      var $390=$ofs;
      var $391=(($390)&65535);
      var $392=$xx;
      var $393=(($392)&65535);
      var $394=(($391+$393)|0);
      var $395=$394 & 65535;
      var $396=(($395) & 65535);
      $ofs=$396;
      __label__ = 67; break;
    case 67: 
      var $398=$seg;
      var $399=(($398)&65535);
      var $400=$399 << 4;
      var $401=$ofs;
      var $402=(($401)&65535);
      var $403=(($400+$402)|0);
      $lo=$403;
      var $404=$1;
      var $405=$lo;
      var $406=$rmv;
      var $407=_softx86_fetch($404, 0, $405, $406, 2);
      var $408=$lo;
      var $409=(($408+2)|0);
      $lo=$409;
      var $410=$1;
      var $411=$lo;
      var $412=$rmv2;
      var $413=_softx86_fetch($410, 0, $411, $412, 2);
      var $414=$6;
      var $415=$1;
      var $416=HEAP[$rmv2];
      var $417=HEAP[$rmv];
      var $418=FUNCTION_TABLE[$414]($415, $416, $417);
      var $419=$4;
      var $420=(($419)&255);
      var $421=$1;
      var $422=(($421+4)|0);
      var $423=(($422)|0);
      var $424=(($423+($420<<2))|0);
      var $425=$424;
      var $426=(($425)|0);
      HEAP[$426]=$418;
      __label__ = 68; break;
    case 68: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modregrm_far["X"]=1;

function _sx86_exec_full_modregrm_far_ro3($ctx, $d32, $mod, $reg, $rm, $op16, $op32) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      var $rmv=__stackBase__;
      var $rmv2=__stackBase__+2;
      $1=$ctx;
      $2=$d32;
      $3=$mod;
      $4=$reg;
      $5=$rm;
      $6=$op16;
      $7=$op32;
      var $8=$3;
      var $9=(($8)&255);
      var $10=(($9)|0)==3;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 68; break;
    case 3: 
      var $13=$1;
      var $14=(($13+236)|0);
      var $15=HEAP[$14];
      var $16=(($15 << 24) >> 24)!=0;
      if ($16) { __label__ = 12; break; } else { __label__ = 4; break; }
    case 4: 
      var $18=$5;
      var $19=(($18)&255);
      var $20=(($19)|0)==2;
      if ($20) { __label__ = 9; break; } else { __label__ = 5; break; }
    case 5: 
      var $22=$5;
      var $23=(($22)&255);
      var $24=(($23)|0)==3;
      if ($24) { __label__ = 9; break; } else { __label__ = 6; break; }
    case 6: 
      var $26=$5;
      var $27=(($26)&255);
      var $28=(($27)|0)==6;
      if ($28) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $30=$3;
      var $31=(($30)&255);
      var $32=(($31)|0)==1;
      if ($32) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $34=$3;
      var $35=(($34)&255);
      var $36=(($35)|0)==2;
      if ($36) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $38=$1;
      var $39=(($38+4)|0);
      var $40=(($39+32)|0);
      var $41=(($40+16)|0);
      var $42=(($41)|0);
      var $43=HEAP[$42];
      $seg=$43;
      __label__ = 11; break;
    case 10: 
      var $45=$1;
      var $46=(($45+4)|0);
      var $47=(($46+32)|0);
      var $48=(($47+24)|0);
      var $49=(($48)|0);
      var $50=HEAP[$49];
      $seg=$50;
      __label__ = 11; break;
    case 11: 
      __label__ = 13; break;
    case 12: 
      var $53=$1;
      var $54=(($53+238)|0);
      var $55=HEAP[$54];
      $seg=$55;
      __label__ = 13; break;
    case 13: 
      var $57=$3;
      var $58=(($57)&255);
      var $59=(($58)|0)==0;
      if ($59) { __label__ = 14; break; } else { __label__ = 38; break; }
    case 14: 
      var $61=$5;
      var $62=(($61)&255);
      var $63=(($62)|0)==6;
      if ($63) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $65=$1;
      var $66=_softx86_fetch_exec_byte($65);
      var $67=(($66)&255);
      $ofs=$67;
      var $68=$1;
      var $69=_softx86_fetch_exec_byte($68);
      var $70=(($69)&255);
      var $71=$70 << 8;
      var $72=$ofs;
      var $73=(($72)&65535);
      var $74=$73 | $71;
      var $75=(($74) & 65535);
      $ofs=$75;
      __label__ = 37; break;
    case 16: 
      var $77=$5;
      var $78=(($77)&255);
      var $79=(($78)|0)==0;
      if ($79) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $81=$1;
      var $82=(($81+4)|0);
      var $83=(($82)|0);
      var $84=(($83+12)|0);
      var $85=$84;
      var $86=(($85)|0);
      var $87=HEAP[$86];
      var $88=(($87)&65535);
      var $89=$1;
      var $90=(($89+4)|0);
      var $91=(($90)|0);
      var $92=(($91+24)|0);
      var $93=$92;
      var $94=(($93)|0);
      var $95=HEAP[$94];
      var $96=(($95)&65535);
      var $97=(($88+$96)|0);
      var $98=(($97) & 65535);
      $ofs=$98;
      __label__ = 36; break;
    case 18: 
      var $100=$5;
      var $101=(($100)&255);
      var $102=(($101)|0)==1;
      if ($102) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $104=$1;
      var $105=(($104+4)|0);
      var $106=(($105)|0);
      var $107=(($106+12)|0);
      var $108=$107;
      var $109=(($108)|0);
      var $110=HEAP[$109];
      var $111=(($110)&65535);
      var $112=$1;
      var $113=(($112+4)|0);
      var $114=(($113)|0);
      var $115=(($114+28)|0);
      var $116=$115;
      var $117=(($116)|0);
      var $118=HEAP[$117];
      var $119=(($118)&65535);
      var $120=(($111+$119)|0);
      var $121=(($120) & 65535);
      $ofs=$121;
      __label__ = 35; break;
    case 20: 
      var $123=$5;
      var $124=(($123)&255);
      var $125=(($124)|0)==2;
      if ($125) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $127=$1;
      var $128=(($127+4)|0);
      var $129=(($128)|0);
      var $130=(($129+20)|0);
      var $131=$130;
      var $132=(($131)|0);
      var $133=HEAP[$132];
      var $134=(($133)&65535);
      var $135=$1;
      var $136=(($135+4)|0);
      var $137=(($136)|0);
      var $138=(($137+24)|0);
      var $139=$138;
      var $140=(($139)|0);
      var $141=HEAP[$140];
      var $142=(($141)&65535);
      var $143=(($134+$142)|0);
      var $144=(($143) & 65535);
      $ofs=$144;
      __label__ = 34; break;
    case 22: 
      var $146=$5;
      var $147=(($146)&255);
      var $148=(($147)|0)==3;
      if ($148) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $150=$1;
      var $151=(($150+4)|0);
      var $152=(($151)|0);
      var $153=(($152+20)|0);
      var $154=$153;
      var $155=(($154)|0);
      var $156=HEAP[$155];
      var $157=(($156)&65535);
      var $158=$1;
      var $159=(($158+4)|0);
      var $160=(($159)|0);
      var $161=(($160+28)|0);
      var $162=$161;
      var $163=(($162)|0);
      var $164=HEAP[$163];
      var $165=(($164)&65535);
      var $166=(($157+$165)|0);
      var $167=(($166) & 65535);
      $ofs=$167;
      __label__ = 33; break;
    case 24: 
      var $169=$5;
      var $170=(($169)&255);
      var $171=(($170)|0)==4;
      if ($171) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $173=$1;
      var $174=(($173+4)|0);
      var $175=(($174)|0);
      var $176=(($175+24)|0);
      var $177=$176;
      var $178=(($177)|0);
      var $179=HEAP[$178];
      $ofs=$179;
      __label__ = 32; break;
    case 26: 
      var $181=$5;
      var $182=(($181)&255);
      var $183=(($182)|0)==5;
      if ($183) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $185=$1;
      var $186=(($185+4)|0);
      var $187=(($186)|0);
      var $188=(($187+28)|0);
      var $189=$188;
      var $190=(($189)|0);
      var $191=HEAP[$190];
      $ofs=$191;
      __label__ = 31; break;
    case 28: 
      var $193=$5;
      var $194=(($193)&255);
      var $195=(($194)|0)==7;
      if ($195) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $197=$1;
      var $198=(($197+4)|0);
      var $199=(($198)|0);
      var $200=(($199+12)|0);
      var $201=$200;
      var $202=(($201)|0);
      var $203=HEAP[$202];
      $ofs=$203;
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 67; break;
    case 38: 
      var $213=$5;
      var $214=(($213)&255);
      var $215=(($214)|0)==0;
      if ($215) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $217=$1;
      var $218=(($217+4)|0);
      var $219=(($218)|0);
      var $220=(($219+12)|0);
      var $221=$220;
      var $222=(($221)|0);
      var $223=HEAP[$222];
      var $224=(($223)&65535);
      var $225=$1;
      var $226=(($225+4)|0);
      var $227=(($226)|0);
      var $228=(($227+24)|0);
      var $229=$228;
      var $230=(($229)|0);
      var $231=HEAP[$230];
      var $232=(($231)&65535);
      var $233=(($224+$232)|0);
      var $234=(($233) & 65535);
      $ofs=$234;
      __label__ = 61; break;
    case 40: 
      var $236=$5;
      var $237=(($236)&255);
      var $238=(($237)|0)==1;
      if ($238) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $240=$1;
      var $241=(($240+4)|0);
      var $242=(($241)|0);
      var $243=(($242+12)|0);
      var $244=$243;
      var $245=(($244)|0);
      var $246=HEAP[$245];
      var $247=(($246)&65535);
      var $248=$1;
      var $249=(($248+4)|0);
      var $250=(($249)|0);
      var $251=(($250+28)|0);
      var $252=$251;
      var $253=(($252)|0);
      var $254=HEAP[$253];
      var $255=(($254)&65535);
      var $256=(($247+$255)|0);
      var $257=(($256) & 65535);
      $ofs=$257;
      __label__ = 60; break;
    case 42: 
      var $259=$5;
      var $260=(($259)&255);
      var $261=(($260)|0)==2;
      if ($261) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $263=$1;
      var $264=(($263+4)|0);
      var $265=(($264)|0);
      var $266=(($265+20)|0);
      var $267=$266;
      var $268=(($267)|0);
      var $269=HEAP[$268];
      var $270=(($269)&65535);
      var $271=$1;
      var $272=(($271+4)|0);
      var $273=(($272)|0);
      var $274=(($273+24)|0);
      var $275=$274;
      var $276=(($275)|0);
      var $277=HEAP[$276];
      var $278=(($277)&65535);
      var $279=(($270+$278)|0);
      var $280=(($279) & 65535);
      $ofs=$280;
      __label__ = 59; break;
    case 44: 
      var $282=$5;
      var $283=(($282)&255);
      var $284=(($283)|0)==3;
      if ($284) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $286=$1;
      var $287=(($286+4)|0);
      var $288=(($287)|0);
      var $289=(($288+20)|0);
      var $290=$289;
      var $291=(($290)|0);
      var $292=HEAP[$291];
      var $293=(($292)&65535);
      var $294=$1;
      var $295=(($294+4)|0);
      var $296=(($295)|0);
      var $297=(($296+28)|0);
      var $298=$297;
      var $299=(($298)|0);
      var $300=HEAP[$299];
      var $301=(($300)&65535);
      var $302=(($293+$301)|0);
      var $303=(($302) & 65535);
      $ofs=$303;
      __label__ = 58; break;
    case 46: 
      var $305=$5;
      var $306=(($305)&255);
      var $307=(($306)|0)==4;
      if ($307) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $309=$1;
      var $310=(($309+4)|0);
      var $311=(($310)|0);
      var $312=(($311+24)|0);
      var $313=$312;
      var $314=(($313)|0);
      var $315=HEAP[$314];
      $ofs=$315;
      __label__ = 57; break;
    case 48: 
      var $317=$5;
      var $318=(($317)&255);
      var $319=(($318)|0)==5;
      if ($319) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $321=$1;
      var $322=(($321+4)|0);
      var $323=(($322)|0);
      var $324=(($323+28)|0);
      var $325=$324;
      var $326=(($325)|0);
      var $327=HEAP[$326];
      $ofs=$327;
      __label__ = 56; break;
    case 50: 
      var $329=$5;
      var $330=(($329)&255);
      var $331=(($330)|0)==6;
      if ($331) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $333=$1;
      var $334=(($333+4)|0);
      var $335=(($334)|0);
      var $336=(($335+20)|0);
      var $337=$336;
      var $338=(($337)|0);
      var $339=HEAP[$338];
      $ofs=$339;
      __label__ = 55; break;
    case 52: 
      var $341=$5;
      var $342=(($341)&255);
      var $343=(($342)|0)==7;
      if ($343) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $345=$1;
      var $346=(($345+4)|0);
      var $347=(($346)|0);
      var $348=(($347+12)|0);
      var $349=$348;
      var $350=(($349)|0);
      var $351=HEAP[$350];
      $ofs=$351;
      __label__ = 54; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      var $360=$3;
      var $361=(($360)&255);
      var $362=(($361)|0)==1;
      if ($362) { __label__ = 62; break; } else { __label__ = 65; break; }
    case 62: 
      var $364=$1;
      var $365=_softx86_fetch_exec_byte($364);
      var $366=(($365)&255);
      $xx=$366;
      var $367=$xx;
      var $368=(($367)&65535);
      var $369=$368 & 128;
      var $370=(($369)|0)!=0;
      if ($370) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: 
      var $372=$xx;
      var $373=(($372)&65535);
      var $374=$373 | 65280;
      var $375=(($374) & 65535);
      $xx=$375;
      __label__ = 64; break;
    case 64: 
      __label__ = 66; break;
    case 65: 
      var $378=$1;
      var $379=_softx86_fetch_exec_byte($378);
      var $380=(($379)&255);
      $xx=$380;
      var $381=$1;
      var $382=_softx86_fetch_exec_byte($381);
      var $383=(($382)&255);
      var $384=$383 << 8;
      var $385=$xx;
      var $386=(($385)&65535);
      var $387=$386 | $384;
      var $388=(($387) & 65535);
      $xx=$388;
      __label__ = 66; break;
    case 66: 
      var $390=$ofs;
      var $391=(($390)&65535);
      var $392=$xx;
      var $393=(($392)&65535);
      var $394=(($391+$393)|0);
      var $395=$394 & 65535;
      var $396=(($395) & 65535);
      $ofs=$396;
      __label__ = 67; break;
    case 67: 
      var $398=$seg;
      var $399=(($398)&65535);
      var $400=$399 << 4;
      var $401=$ofs;
      var $402=(($401)&65535);
      var $403=(($400+$402)|0);
      $lo=$403;
      var $404=$1;
      var $405=$lo;
      var $406=$rmv;
      var $407=_softx86_fetch($404, 0, $405, $406, 2);
      var $408=$lo;
      var $409=(($408+2)|0);
      $lo=$409;
      var $410=$1;
      var $411=$lo;
      var $412=$rmv2;
      var $413=_softx86_fetch($410, 0, $411, $412, 2);
      var $414=$6;
      var $415=$1;
      var $416=$4;
      var $417=(($416)&255);
      var $418=$1;
      var $419=(($418+4)|0);
      var $420=(($419)|0);
      var $421=(($420+($417<<2))|0);
      var $422=$421;
      var $423=(($422)|0);
      var $424=HEAP[$423];
      var $425=HEAP[$rmv2];
      var $426=HEAP[$rmv];
      var $427=FUNCTION_TABLE[$414]($415, $424, $425, $426);
      __label__ = 68; break;
    case 68: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modregrm_far_ro3["X"]=1;

function _sx86_exec_full_modrmonly_rw_imm($ctx, $w16, $d32, $mod, $rm, $op8, $op16, $op32) {
  var __stackBase__  = STACKTOP; STACKTOP += 3; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $imm;
      var $rmv;
      var $rmv1;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      var $rmv2=__stackBase__;
      var $rmv3=__stackBase__+2;
      $1=$ctx;
      $2=$w16;
      $3=$d32;
      $4=$mod;
      $5=$rm;
      $6=$op8;
      $7=$op16;
      $8=$op32;
      var $9=$4;
      var $10=(($9)&255);
      var $11=(($10)|0)==3;
      if ($11) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: 
      var $13=$1;
      var $14=_softx86_fetch_exec_byte($13);
      var $15=(($14)&255);
      $imm=$15;
      var $16=$2;
      var $17=(($16 << 24) >> 24)!=0;
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $19=$1;
      var $20=_softx86_fetch_exec_byte($19);
      var $21=(($20)&255);
      var $22=$21 << 8;
      var $23=$imm;
      var $24=(($23)&65535);
      var $25=$24 | $22;
      var $26=(($25) & 65535);
      $imm=$26;
      __label__ = 4; break;
    case 4: 
      var $28=$2;
      var $29=(($28 << 24) >> 24)!=0;
      if ($29) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $31=$5;
      var $32=(($31)&255);
      var $33=$1;
      var $34=(($33+4)|0);
      var $35=(($34)|0);
      var $36=(($35+($32<<2))|0);
      var $37=$36;
      var $38=(($37)|0);
      var $39=HEAP[$38];
      $rmv=$39;
      var $40=$7;
      var $41=$1;
      var $42=$rmv;
      var $43=$imm;
      var $44=FUNCTION_TABLE[$40]($41, $42, $43);
      var $45=$5;
      var $46=(($45)&255);
      var $47=$1;
      var $48=(($47+4)|0);
      var $49=(($48)|0);
      var $50=(($49+($46<<2))|0);
      var $51=$50;
      var $52=(($51)|0);
      HEAP[$52]=$44;
      __label__ = 7; break;
    case 6: 
      var $54=$5;
      var $55=(($54)&255);
      var $56=$1;
      var $57=(($56+204)|0);
      var $58=(($57+($55<<2))|0);
      var $59=HEAP[$58];
      var $60=HEAP[$59];
      $rmv1=$60;
      var $61=$6;
      var $62=$1;
      var $63=$rmv1;
      var $64=$imm;
      var $65=(($64) & 255);
      var $66=FUNCTION_TABLE[$61]($62, $63, $65);
      var $67=$5;
      var $68=(($67)&255);
      var $69=$1;
      var $70=(($69+204)|0);
      var $71=(($70+($68<<2))|0);
      var $72=HEAP[$71];
      HEAP[$72]=$66;
      __label__ = 7; break;
    case 7: 
      __label__ = 78; break;
    case 8: 
      var $75=$1;
      var $76=(($75+236)|0);
      var $77=HEAP[$76];
      var $78=(($77 << 24) >> 24)!=0;
      if ($78) { __label__ = 17; break; } else { __label__ = 9; break; }
    case 9: 
      var $80=$5;
      var $81=(($80)&255);
      var $82=(($81)|0)==2;
      if ($82) { __label__ = 14; break; } else { __label__ = 10; break; }
    case 10: 
      var $84=$5;
      var $85=(($84)&255);
      var $86=(($85)|0)==3;
      if ($86) { __label__ = 14; break; } else { __label__ = 11; break; }
    case 11: 
      var $88=$5;
      var $89=(($88)&255);
      var $90=(($89)|0)==6;
      if ($90) { __label__ = 12; break; } else { __label__ = 15; break; }
    case 12: 
      var $92=$4;
      var $93=(($92)&255);
      var $94=(($93)|0)==1;
      if ($94) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $96=$4;
      var $97=(($96)&255);
      var $98=(($97)|0)==2;
      if ($98) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $100=$1;
      var $101=(($100+4)|0);
      var $102=(($101+32)|0);
      var $103=(($102+16)|0);
      var $104=(($103)|0);
      var $105=HEAP[$104];
      $seg=$105;
      __label__ = 16; break;
    case 15: 
      var $107=$1;
      var $108=(($107+4)|0);
      var $109=(($108+32)|0);
      var $110=(($109+24)|0);
      var $111=(($110)|0);
      var $112=HEAP[$111];
      $seg=$112;
      __label__ = 16; break;
    case 16: 
      __label__ = 18; break;
    case 17: 
      var $115=$1;
      var $116=(($115+238)|0);
      var $117=HEAP[$116];
      $seg=$117;
      __label__ = 18; break;
    case 18: 
      var $119=$4;
      var $120=(($119)&255);
      var $121=(($120)|0)==0;
      if ($121) { __label__ = 19; break; } else { __label__ = 43; break; }
    case 19: 
      var $123=$5;
      var $124=(($123)&255);
      var $125=(($124)|0)==6;
      if ($125) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $127=$1;
      var $128=_softx86_fetch_exec_byte($127);
      var $129=(($128)&255);
      $ofs=$129;
      var $130=$1;
      var $131=_softx86_fetch_exec_byte($130);
      var $132=(($131)&255);
      var $133=$132 << 8;
      var $134=$ofs;
      var $135=(($134)&65535);
      var $136=$135 | $133;
      var $137=(($136) & 65535);
      $ofs=$137;
      __label__ = 42; break;
    case 21: 
      var $139=$5;
      var $140=(($139)&255);
      var $141=(($140)|0)==0;
      if ($141) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $143=$1;
      var $144=(($143+4)|0);
      var $145=(($144)|0);
      var $146=(($145+12)|0);
      var $147=$146;
      var $148=(($147)|0);
      var $149=HEAP[$148];
      var $150=(($149)&65535);
      var $151=$1;
      var $152=(($151+4)|0);
      var $153=(($152)|0);
      var $154=(($153+24)|0);
      var $155=$154;
      var $156=(($155)|0);
      var $157=HEAP[$156];
      var $158=(($157)&65535);
      var $159=(($150+$158)|0);
      var $160=(($159) & 65535);
      $ofs=$160;
      __label__ = 41; break;
    case 23: 
      var $162=$5;
      var $163=(($162)&255);
      var $164=(($163)|0)==1;
      if ($164) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $166=$1;
      var $167=(($166+4)|0);
      var $168=(($167)|0);
      var $169=(($168+12)|0);
      var $170=$169;
      var $171=(($170)|0);
      var $172=HEAP[$171];
      var $173=(($172)&65535);
      var $174=$1;
      var $175=(($174+4)|0);
      var $176=(($175)|0);
      var $177=(($176+28)|0);
      var $178=$177;
      var $179=(($178)|0);
      var $180=HEAP[$179];
      var $181=(($180)&65535);
      var $182=(($173+$181)|0);
      var $183=(($182) & 65535);
      $ofs=$183;
      __label__ = 40; break;
    case 25: 
      var $185=$5;
      var $186=(($185)&255);
      var $187=(($186)|0)==2;
      if ($187) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $189=$1;
      var $190=(($189+4)|0);
      var $191=(($190)|0);
      var $192=(($191+20)|0);
      var $193=$192;
      var $194=(($193)|0);
      var $195=HEAP[$194];
      var $196=(($195)&65535);
      var $197=$1;
      var $198=(($197+4)|0);
      var $199=(($198)|0);
      var $200=(($199+24)|0);
      var $201=$200;
      var $202=(($201)|0);
      var $203=HEAP[$202];
      var $204=(($203)&65535);
      var $205=(($196+$204)|0);
      var $206=(($205) & 65535);
      $ofs=$206;
      __label__ = 39; break;
    case 27: 
      var $208=$5;
      var $209=(($208)&255);
      var $210=(($209)|0)==3;
      if ($210) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $212=$1;
      var $213=(($212+4)|0);
      var $214=(($213)|0);
      var $215=(($214+20)|0);
      var $216=$215;
      var $217=(($216)|0);
      var $218=HEAP[$217];
      var $219=(($218)&65535);
      var $220=$1;
      var $221=(($220+4)|0);
      var $222=(($221)|0);
      var $223=(($222+28)|0);
      var $224=$223;
      var $225=(($224)|0);
      var $226=HEAP[$225];
      var $227=(($226)&65535);
      var $228=(($219+$227)|0);
      var $229=(($228) & 65535);
      $ofs=$229;
      __label__ = 38; break;
    case 29: 
      var $231=$5;
      var $232=(($231)&255);
      var $233=(($232)|0)==4;
      if ($233) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $235=$1;
      var $236=(($235+4)|0);
      var $237=(($236)|0);
      var $238=(($237+24)|0);
      var $239=$238;
      var $240=(($239)|0);
      var $241=HEAP[$240];
      $ofs=$241;
      __label__ = 37; break;
    case 31: 
      var $243=$5;
      var $244=(($243)&255);
      var $245=(($244)|0)==5;
      if ($245) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $247=$1;
      var $248=(($247+4)|0);
      var $249=(($248)|0);
      var $250=(($249+28)|0);
      var $251=$250;
      var $252=(($251)|0);
      var $253=HEAP[$252];
      $ofs=$253;
      __label__ = 36; break;
    case 33: 
      var $255=$5;
      var $256=(($255)&255);
      var $257=(($256)|0)==7;
      if ($257) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $259=$1;
      var $260=(($259+4)|0);
      var $261=(($260)|0);
      var $262=(($261+12)|0);
      var $263=$262;
      var $264=(($263)|0);
      var $265=HEAP[$264];
      $ofs=$265;
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 72; break;
    case 43: 
      var $275=$5;
      var $276=(($275)&255);
      var $277=(($276)|0)==0;
      if ($277) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $279=$1;
      var $280=(($279+4)|0);
      var $281=(($280)|0);
      var $282=(($281+12)|0);
      var $283=$282;
      var $284=(($283)|0);
      var $285=HEAP[$284];
      var $286=(($285)&65535);
      var $287=$1;
      var $288=(($287+4)|0);
      var $289=(($288)|0);
      var $290=(($289+24)|0);
      var $291=$290;
      var $292=(($291)|0);
      var $293=HEAP[$292];
      var $294=(($293)&65535);
      var $295=(($286+$294)|0);
      var $296=(($295) & 65535);
      $ofs=$296;
      __label__ = 66; break;
    case 45: 
      var $298=$5;
      var $299=(($298)&255);
      var $300=(($299)|0)==1;
      if ($300) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $302=$1;
      var $303=(($302+4)|0);
      var $304=(($303)|0);
      var $305=(($304+12)|0);
      var $306=$305;
      var $307=(($306)|0);
      var $308=HEAP[$307];
      var $309=(($308)&65535);
      var $310=$1;
      var $311=(($310+4)|0);
      var $312=(($311)|0);
      var $313=(($312+28)|0);
      var $314=$313;
      var $315=(($314)|0);
      var $316=HEAP[$315];
      var $317=(($316)&65535);
      var $318=(($309+$317)|0);
      var $319=(($318) & 65535);
      $ofs=$319;
      __label__ = 65; break;
    case 47: 
      var $321=$5;
      var $322=(($321)&255);
      var $323=(($322)|0)==2;
      if ($323) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $325=$1;
      var $326=(($325+4)|0);
      var $327=(($326)|0);
      var $328=(($327+20)|0);
      var $329=$328;
      var $330=(($329)|0);
      var $331=HEAP[$330];
      var $332=(($331)&65535);
      var $333=$1;
      var $334=(($333+4)|0);
      var $335=(($334)|0);
      var $336=(($335+24)|0);
      var $337=$336;
      var $338=(($337)|0);
      var $339=HEAP[$338];
      var $340=(($339)&65535);
      var $341=(($332+$340)|0);
      var $342=(($341) & 65535);
      $ofs=$342;
      __label__ = 64; break;
    case 49: 
      var $344=$5;
      var $345=(($344)&255);
      var $346=(($345)|0)==3;
      if ($346) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $348=$1;
      var $349=(($348+4)|0);
      var $350=(($349)|0);
      var $351=(($350+20)|0);
      var $352=$351;
      var $353=(($352)|0);
      var $354=HEAP[$353];
      var $355=(($354)&65535);
      var $356=$1;
      var $357=(($356+4)|0);
      var $358=(($357)|0);
      var $359=(($358+28)|0);
      var $360=$359;
      var $361=(($360)|0);
      var $362=HEAP[$361];
      var $363=(($362)&65535);
      var $364=(($355+$363)|0);
      var $365=(($364) & 65535);
      $ofs=$365;
      __label__ = 63; break;
    case 51: 
      var $367=$5;
      var $368=(($367)&255);
      var $369=(($368)|0)==4;
      if ($369) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $371=$1;
      var $372=(($371+4)|0);
      var $373=(($372)|0);
      var $374=(($373+24)|0);
      var $375=$374;
      var $376=(($375)|0);
      var $377=HEAP[$376];
      $ofs=$377;
      __label__ = 62; break;
    case 53: 
      var $379=$5;
      var $380=(($379)&255);
      var $381=(($380)|0)==5;
      if ($381) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $383=$1;
      var $384=(($383+4)|0);
      var $385=(($384)|0);
      var $386=(($385+28)|0);
      var $387=$386;
      var $388=(($387)|0);
      var $389=HEAP[$388];
      $ofs=$389;
      __label__ = 61; break;
    case 55: 
      var $391=$5;
      var $392=(($391)&255);
      var $393=(($392)|0)==6;
      if ($393) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $395=$1;
      var $396=(($395+4)|0);
      var $397=(($396)|0);
      var $398=(($397+20)|0);
      var $399=$398;
      var $400=(($399)|0);
      var $401=HEAP[$400];
      $ofs=$401;
      __label__ = 60; break;
    case 57: 
      var $403=$5;
      var $404=(($403)&255);
      var $405=(($404)|0)==7;
      if ($405) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $407=$1;
      var $408=(($407+4)|0);
      var $409=(($408)|0);
      var $410=(($409+12)|0);
      var $411=$410;
      var $412=(($411)|0);
      var $413=HEAP[$412];
      $ofs=$413;
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $422=$4;
      var $423=(($422)&255);
      var $424=(($423)|0)==1;
      if ($424) { __label__ = 67; break; } else { __label__ = 70; break; }
    case 67: 
      var $426=$1;
      var $427=_softx86_fetch_exec_byte($426);
      var $428=(($427)&255);
      $xx=$428;
      var $429=$xx;
      var $430=(($429)&65535);
      var $431=$430 & 128;
      var $432=(($431)|0)!=0;
      if ($432) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $434=$xx;
      var $435=(($434)&65535);
      var $436=$435 | 65280;
      var $437=(($436) & 65535);
      $xx=$437;
      __label__ = 69; break;
    case 69: 
      __label__ = 71; break;
    case 70: 
      var $440=$1;
      var $441=_softx86_fetch_exec_byte($440);
      var $442=(($441)&255);
      $xx=$442;
      var $443=$1;
      var $444=_softx86_fetch_exec_byte($443);
      var $445=(($444)&255);
      var $446=$445 << 8;
      var $447=$xx;
      var $448=(($447)&65535);
      var $449=$448 | $446;
      var $450=(($449) & 65535);
      $xx=$450;
      __label__ = 71; break;
    case 71: 
      var $452=$ofs;
      var $453=(($452)&65535);
      var $454=$xx;
      var $455=(($454)&65535);
      var $456=(($453+$455)|0);
      var $457=$456 & 65535;
      var $458=(($457) & 65535);
      $ofs=$458;
      __label__ = 72; break;
    case 72: 
      var $460=$1;
      var $461=_softx86_fetch_exec_byte($460);
      var $462=(($461)&255);
      $imm=$462;
      var $463=$2;
      var $464=(($463 << 24) >> 24)!=0;
      if ($464) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      var $466=$1;
      var $467=_softx86_fetch_exec_byte($466);
      var $468=(($467)&255);
      var $469=$468 << 8;
      var $470=$imm;
      var $471=(($470)&65535);
      var $472=$471 | $469;
      var $473=(($472) & 65535);
      $imm=$473;
      __label__ = 74; break;
    case 74: 
      var $475=$2;
      var $476=(($475 << 24) >> 24)!=0;
      if ($476) { __label__ = 75; break; } else { __label__ = 76; break; }
    case 75: 
      var $478=$seg;
      var $479=(($478)&65535);
      var $480=$479 << 4;
      var $481=$ofs;
      var $482=(($481)&65535);
      var $483=(($480+$482)|0);
      $lo=$483;
      var $484=$1;
      var $485=$lo;
      var $486=$rmv2;
      var $487=_softx86_fetch($484, 0, $485, $486, 2);
      var $488=$7;
      var $489=$1;
      var $490=HEAP[$rmv2];
      var $491=$imm;
      var $492=FUNCTION_TABLE[$488]($489, $490, $491);
      HEAP[$rmv2]=$492;
      var $493=$1;
      var $494=$lo;
      var $495=$rmv2;
      var $496=_softx86_write($493, 0, $494, $495, 2);
      __label__ = 77; break;
    case 76: 
      var $498=$seg;
      var $499=(($498)&65535);
      var $500=$499 << 4;
      var $501=$ofs;
      var $502=(($501)&65535);
      var $503=(($500+$502)|0);
      $lo=$503;
      var $504=$1;
      var $505=$lo;
      var $506=_softx86_fetch($504, 0, $505, $rmv3, 1);
      var $507=$6;
      var $508=$1;
      var $509=HEAP[$rmv3];
      var $510=$imm;
      var $511=(($510) & 255);
      var $512=FUNCTION_TABLE[$507]($508, $509, $511);
      HEAP[$rmv3]=$512;
      var $513=$1;
      var $514=$lo;
      var $515=_softx86_write($513, 0, $514, $rmv3, 1);
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break;
    case 78: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modrmonly_rw_imm["X"]=1;

function _sx86_exec_full_modrmonly_rw_imm8($ctx, $w16, $d32, $mod, $rm, $op8, $op16, $op32) {
  var __stackBase__  = STACKTOP; STACKTOP += 3; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $imm;
      var $rmv;
      var $rmv1;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      var $rmv2=__stackBase__;
      var $rmv3=__stackBase__+2;
      $1=$ctx;
      $2=$w16;
      $3=$d32;
      $4=$mod;
      $5=$rm;
      $6=$op8;
      $7=$op16;
      $8=$op32;
      var $9=$4;
      var $10=(($9)&255);
      var $11=(($10)|0)==3;
      if ($11) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $13=$1;
      var $14=_softx86_fetch_exec_byte($13);
      var $15=(($14)&255);
      $imm=$15;
      var $16=$2;
      var $17=(($16 << 24) >> 24)!=0;
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $19=$5;
      var $20=(($19)&255);
      var $21=$1;
      var $22=(($21+4)|0);
      var $23=(($22)|0);
      var $24=(($23+($20<<2))|0);
      var $25=$24;
      var $26=(($25)|0);
      var $27=HEAP[$26];
      $rmv=$27;
      var $28=$7;
      var $29=$1;
      var $30=$rmv;
      var $31=$imm;
      var $32=FUNCTION_TABLE[$28]($29, $30, $31);
      var $33=$5;
      var $34=(($33)&255);
      var $35=$1;
      var $36=(($35+4)|0);
      var $37=(($36)|0);
      var $38=(($37+($34<<2))|0);
      var $39=$38;
      var $40=(($39)|0);
      HEAP[$40]=$32;
      __label__ = 5; break;
    case 4: 
      var $42=$5;
      var $43=(($42)&255);
      var $44=$1;
      var $45=(($44+204)|0);
      var $46=(($45+($43<<2))|0);
      var $47=HEAP[$46];
      var $48=HEAP[$47];
      $rmv1=$48;
      var $49=$6;
      var $50=$1;
      var $51=$rmv1;
      var $52=$imm;
      var $53=(($52) & 255);
      var $54=FUNCTION_TABLE[$49]($50, $51, $53);
      var $55=$5;
      var $56=(($55)&255);
      var $57=$1;
      var $58=(($57+204)|0);
      var $59=(($58+($56<<2))|0);
      var $60=HEAP[$59];
      HEAP[$60]=$54;
      __label__ = 5; break;
    case 5: 
      __label__ = 76; break;
    case 6: 
      var $63=$1;
      var $64=(($63+236)|0);
      var $65=HEAP[$64];
      var $66=(($65 << 24) >> 24)!=0;
      if ($66) { __label__ = 15; break; } else { __label__ = 7; break; }
    case 7: 
      var $68=$5;
      var $69=(($68)&255);
      var $70=(($69)|0)==2;
      if ($70) { __label__ = 12; break; } else { __label__ = 8; break; }
    case 8: 
      var $72=$5;
      var $73=(($72)&255);
      var $74=(($73)|0)==3;
      if ($74) { __label__ = 12; break; } else { __label__ = 9; break; }
    case 9: 
      var $76=$5;
      var $77=(($76)&255);
      var $78=(($77)|0)==6;
      if ($78) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $80=$4;
      var $81=(($80)&255);
      var $82=(($81)|0)==1;
      if ($82) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $84=$4;
      var $85=(($84)&255);
      var $86=(($85)|0)==2;
      if ($86) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $88=$1;
      var $89=(($88+4)|0);
      var $90=(($89+32)|0);
      var $91=(($90+16)|0);
      var $92=(($91)|0);
      var $93=HEAP[$92];
      $seg=$93;
      __label__ = 14; break;
    case 13: 
      var $95=$1;
      var $96=(($95+4)|0);
      var $97=(($96+32)|0);
      var $98=(($97+24)|0);
      var $99=(($98)|0);
      var $100=HEAP[$99];
      $seg=$100;
      __label__ = 14; break;
    case 14: 
      __label__ = 16; break;
    case 15: 
      var $103=$1;
      var $104=(($103+238)|0);
      var $105=HEAP[$104];
      $seg=$105;
      __label__ = 16; break;
    case 16: 
      var $107=$4;
      var $108=(($107)&255);
      var $109=(($108)|0)==0;
      if ($109) { __label__ = 17; break; } else { __label__ = 41; break; }
    case 17: 
      var $111=$5;
      var $112=(($111)&255);
      var $113=(($112)|0)==6;
      if ($113) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $115=$1;
      var $116=_softx86_fetch_exec_byte($115);
      var $117=(($116)&255);
      $ofs=$117;
      var $118=$1;
      var $119=_softx86_fetch_exec_byte($118);
      var $120=(($119)&255);
      var $121=$120 << 8;
      var $122=$ofs;
      var $123=(($122)&65535);
      var $124=$123 | $121;
      var $125=(($124) & 65535);
      $ofs=$125;
      __label__ = 40; break;
    case 19: 
      var $127=$5;
      var $128=(($127)&255);
      var $129=(($128)|0)==0;
      if ($129) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $131=$1;
      var $132=(($131+4)|0);
      var $133=(($132)|0);
      var $134=(($133+12)|0);
      var $135=$134;
      var $136=(($135)|0);
      var $137=HEAP[$136];
      var $138=(($137)&65535);
      var $139=$1;
      var $140=(($139+4)|0);
      var $141=(($140)|0);
      var $142=(($141+24)|0);
      var $143=$142;
      var $144=(($143)|0);
      var $145=HEAP[$144];
      var $146=(($145)&65535);
      var $147=(($138+$146)|0);
      var $148=(($147) & 65535);
      $ofs=$148;
      __label__ = 39; break;
    case 21: 
      var $150=$5;
      var $151=(($150)&255);
      var $152=(($151)|0)==1;
      if ($152) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $154=$1;
      var $155=(($154+4)|0);
      var $156=(($155)|0);
      var $157=(($156+12)|0);
      var $158=$157;
      var $159=(($158)|0);
      var $160=HEAP[$159];
      var $161=(($160)&65535);
      var $162=$1;
      var $163=(($162+4)|0);
      var $164=(($163)|0);
      var $165=(($164+28)|0);
      var $166=$165;
      var $167=(($166)|0);
      var $168=HEAP[$167];
      var $169=(($168)&65535);
      var $170=(($161+$169)|0);
      var $171=(($170) & 65535);
      $ofs=$171;
      __label__ = 38; break;
    case 23: 
      var $173=$5;
      var $174=(($173)&255);
      var $175=(($174)|0)==2;
      if ($175) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $177=$1;
      var $178=(($177+4)|0);
      var $179=(($178)|0);
      var $180=(($179+20)|0);
      var $181=$180;
      var $182=(($181)|0);
      var $183=HEAP[$182];
      var $184=(($183)&65535);
      var $185=$1;
      var $186=(($185+4)|0);
      var $187=(($186)|0);
      var $188=(($187+24)|0);
      var $189=$188;
      var $190=(($189)|0);
      var $191=HEAP[$190];
      var $192=(($191)&65535);
      var $193=(($184+$192)|0);
      var $194=(($193) & 65535);
      $ofs=$194;
      __label__ = 37; break;
    case 25: 
      var $196=$5;
      var $197=(($196)&255);
      var $198=(($197)|0)==3;
      if ($198) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $200=$1;
      var $201=(($200+4)|0);
      var $202=(($201)|0);
      var $203=(($202+20)|0);
      var $204=$203;
      var $205=(($204)|0);
      var $206=HEAP[$205];
      var $207=(($206)&65535);
      var $208=$1;
      var $209=(($208+4)|0);
      var $210=(($209)|0);
      var $211=(($210+28)|0);
      var $212=$211;
      var $213=(($212)|0);
      var $214=HEAP[$213];
      var $215=(($214)&65535);
      var $216=(($207+$215)|0);
      var $217=(($216) & 65535);
      $ofs=$217;
      __label__ = 36; break;
    case 27: 
      var $219=$5;
      var $220=(($219)&255);
      var $221=(($220)|0)==4;
      if ($221) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $223=$1;
      var $224=(($223+4)|0);
      var $225=(($224)|0);
      var $226=(($225+24)|0);
      var $227=$226;
      var $228=(($227)|0);
      var $229=HEAP[$228];
      $ofs=$229;
      __label__ = 35; break;
    case 29: 
      var $231=$5;
      var $232=(($231)&255);
      var $233=(($232)|0)==5;
      if ($233) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $235=$1;
      var $236=(($235+4)|0);
      var $237=(($236)|0);
      var $238=(($237+28)|0);
      var $239=$238;
      var $240=(($239)|0);
      var $241=HEAP[$240];
      $ofs=$241;
      __label__ = 34; break;
    case 31: 
      var $243=$5;
      var $244=(($243)&255);
      var $245=(($244)|0)==7;
      if ($245) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $247=$1;
      var $248=(($247+4)|0);
      var $249=(($248)|0);
      var $250=(($249+12)|0);
      var $251=$250;
      var $252=(($251)|0);
      var $253=HEAP[$252];
      $ofs=$253;
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 70; break;
    case 41: 
      var $263=$5;
      var $264=(($263)&255);
      var $265=(($264)|0)==0;
      if ($265) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $267=$1;
      var $268=(($267+4)|0);
      var $269=(($268)|0);
      var $270=(($269+12)|0);
      var $271=$270;
      var $272=(($271)|0);
      var $273=HEAP[$272];
      var $274=(($273)&65535);
      var $275=$1;
      var $276=(($275+4)|0);
      var $277=(($276)|0);
      var $278=(($277+24)|0);
      var $279=$278;
      var $280=(($279)|0);
      var $281=HEAP[$280];
      var $282=(($281)&65535);
      var $283=(($274+$282)|0);
      var $284=(($283) & 65535);
      $ofs=$284;
      __label__ = 64; break;
    case 43: 
      var $286=$5;
      var $287=(($286)&255);
      var $288=(($287)|0)==1;
      if ($288) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $290=$1;
      var $291=(($290+4)|0);
      var $292=(($291)|0);
      var $293=(($292+12)|0);
      var $294=$293;
      var $295=(($294)|0);
      var $296=HEAP[$295];
      var $297=(($296)&65535);
      var $298=$1;
      var $299=(($298+4)|0);
      var $300=(($299)|0);
      var $301=(($300+28)|0);
      var $302=$301;
      var $303=(($302)|0);
      var $304=HEAP[$303];
      var $305=(($304)&65535);
      var $306=(($297+$305)|0);
      var $307=(($306) & 65535);
      $ofs=$307;
      __label__ = 63; break;
    case 45: 
      var $309=$5;
      var $310=(($309)&255);
      var $311=(($310)|0)==2;
      if ($311) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $313=$1;
      var $314=(($313+4)|0);
      var $315=(($314)|0);
      var $316=(($315+20)|0);
      var $317=$316;
      var $318=(($317)|0);
      var $319=HEAP[$318];
      var $320=(($319)&65535);
      var $321=$1;
      var $322=(($321+4)|0);
      var $323=(($322)|0);
      var $324=(($323+24)|0);
      var $325=$324;
      var $326=(($325)|0);
      var $327=HEAP[$326];
      var $328=(($327)&65535);
      var $329=(($320+$328)|0);
      var $330=(($329) & 65535);
      $ofs=$330;
      __label__ = 62; break;
    case 47: 
      var $332=$5;
      var $333=(($332)&255);
      var $334=(($333)|0)==3;
      if ($334) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $336=$1;
      var $337=(($336+4)|0);
      var $338=(($337)|0);
      var $339=(($338+20)|0);
      var $340=$339;
      var $341=(($340)|0);
      var $342=HEAP[$341];
      var $343=(($342)&65535);
      var $344=$1;
      var $345=(($344+4)|0);
      var $346=(($345)|0);
      var $347=(($346+28)|0);
      var $348=$347;
      var $349=(($348)|0);
      var $350=HEAP[$349];
      var $351=(($350)&65535);
      var $352=(($343+$351)|0);
      var $353=(($352) & 65535);
      $ofs=$353;
      __label__ = 61; break;
    case 49: 
      var $355=$5;
      var $356=(($355)&255);
      var $357=(($356)|0)==4;
      if ($357) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $359=$1;
      var $360=(($359+4)|0);
      var $361=(($360)|0);
      var $362=(($361+24)|0);
      var $363=$362;
      var $364=(($363)|0);
      var $365=HEAP[$364];
      $ofs=$365;
      __label__ = 60; break;
    case 51: 
      var $367=$5;
      var $368=(($367)&255);
      var $369=(($368)|0)==5;
      if ($369) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $371=$1;
      var $372=(($371+4)|0);
      var $373=(($372)|0);
      var $374=(($373+28)|0);
      var $375=$374;
      var $376=(($375)|0);
      var $377=HEAP[$376];
      $ofs=$377;
      __label__ = 59; break;
    case 53: 
      var $379=$5;
      var $380=(($379)&255);
      var $381=(($380)|0)==6;
      if ($381) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $383=$1;
      var $384=(($383+4)|0);
      var $385=(($384)|0);
      var $386=(($385+20)|0);
      var $387=$386;
      var $388=(($387)|0);
      var $389=HEAP[$388];
      $ofs=$389;
      __label__ = 58; break;
    case 55: 
      var $391=$5;
      var $392=(($391)&255);
      var $393=(($392)|0)==7;
      if ($393) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $395=$1;
      var $396=(($395+4)|0);
      var $397=(($396)|0);
      var $398=(($397+12)|0);
      var $399=$398;
      var $400=(($399)|0);
      var $401=HEAP[$400];
      $ofs=$401;
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      var $410=$4;
      var $411=(($410)&255);
      var $412=(($411)|0)==1;
      if ($412) { __label__ = 65; break; } else { __label__ = 68; break; }
    case 65: 
      var $414=$1;
      var $415=_softx86_fetch_exec_byte($414);
      var $416=(($415)&255);
      $xx=$416;
      var $417=$xx;
      var $418=(($417)&65535);
      var $419=$418 & 128;
      var $420=(($419)|0)!=0;
      if ($420) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $422=$xx;
      var $423=(($422)&65535);
      var $424=$423 | 65280;
      var $425=(($424) & 65535);
      $xx=$425;
      __label__ = 67; break;
    case 67: 
      __label__ = 69; break;
    case 68: 
      var $428=$1;
      var $429=_softx86_fetch_exec_byte($428);
      var $430=(($429)&255);
      $xx=$430;
      var $431=$1;
      var $432=_softx86_fetch_exec_byte($431);
      var $433=(($432)&255);
      var $434=$433 << 8;
      var $435=$xx;
      var $436=(($435)&65535);
      var $437=$436 | $434;
      var $438=(($437) & 65535);
      $xx=$438;
      __label__ = 69; break;
    case 69: 
      var $440=$ofs;
      var $441=(($440)&65535);
      var $442=$xx;
      var $443=(($442)&65535);
      var $444=(($441+$443)|0);
      var $445=$444 & 65535;
      var $446=(($445) & 65535);
      $ofs=$446;
      __label__ = 70; break;
    case 70: 
      var $448=$1;
      var $449=_softx86_fetch_exec_byte($448);
      var $450=(($449)&255);
      $imm=$450;
      var $451=$2;
      var $452=(($451 << 24) >> 24)!=0;
      if ($452) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $454=$1;
      var $455=_softx86_fetch_exec_byte($454);
      var $456=(($455)&255);
      var $457=$456 << 8;
      var $458=$imm;
      var $459=(($458)&65535);
      var $460=$459 | $457;
      var $461=(($460) & 65535);
      $imm=$461;
      __label__ = 72; break;
    case 72: 
      var $463=$2;
      var $464=(($463 << 24) >> 24)!=0;
      if ($464) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      var $466=$seg;
      var $467=(($466)&65535);
      var $468=$467 << 4;
      var $469=$ofs;
      var $470=(($469)&65535);
      var $471=(($468+$470)|0);
      $lo=$471;
      var $472=$1;
      var $473=$lo;
      var $474=$rmv2;
      var $475=_softx86_fetch($472, 0, $473, $474, 2);
      var $476=$7;
      var $477=$1;
      var $478=HEAP[$rmv2];
      var $479=$imm;
      var $480=FUNCTION_TABLE[$476]($477, $478, $479);
      HEAP[$rmv2]=$480;
      var $481=$1;
      var $482=$lo;
      var $483=$rmv2;
      var $484=_softx86_write($481, 0, $482, $483, 2);
      __label__ = 75; break;
    case 74: 
      var $486=$seg;
      var $487=(($486)&65535);
      var $488=$487 << 4;
      var $489=$ofs;
      var $490=(($489)&65535);
      var $491=(($488+$490)|0);
      $lo=$491;
      var $492=$1;
      var $493=$lo;
      var $494=_softx86_fetch($492, 0, $493, $rmv3, 1);
      var $495=$6;
      var $496=$1;
      var $497=HEAP[$rmv3];
      var $498=$imm;
      var $499=(($498) & 255);
      var $500=FUNCTION_TABLE[$495]($496, $497, $499);
      HEAP[$rmv3]=$500;
      var $501=$1;
      var $502=$lo;
      var $503=_softx86_write($501, 0, $502, $rmv3, 1);
      __label__ = 75; break;
    case 75: 
      __label__ = 76; break;
    case 76: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modrmonly_rw_imm8["X"]=1;

function _sx86_exec_full_modrmonly_ro_imm($ctx, $w16, $d32, $mod, $rm, $op8, $op16, $op32) {
  var __stackBase__  = STACKTOP; STACKTOP += 3; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $imm;
      var $rmv;
      var $rmv1;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      var $rmv2=__stackBase__;
      var $rmv3=__stackBase__+2;
      $1=$ctx;
      $2=$w16;
      $3=$d32;
      $4=$mod;
      $5=$rm;
      $6=$op8;
      $7=$op16;
      $8=$op32;
      var $9=$4;
      var $10=(($9)&255);
      var $11=(($10)|0)==3;
      if ($11) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: 
      var $13=$1;
      var $14=_softx86_fetch_exec_byte($13);
      var $15=(($14)&255);
      $imm=$15;
      var $16=$2;
      var $17=(($16 << 24) >> 24)!=0;
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $19=$1;
      var $20=_softx86_fetch_exec_byte($19);
      var $21=(($20)&255);
      var $22=$21 << 8;
      var $23=$imm;
      var $24=(($23)&65535);
      var $25=$24 | $22;
      var $26=(($25) & 65535);
      $imm=$26;
      __label__ = 4; break;
    case 4: 
      var $28=$2;
      var $29=(($28 << 24) >> 24)!=0;
      if ($29) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $31=$5;
      var $32=(($31)&255);
      var $33=$1;
      var $34=(($33+4)|0);
      var $35=(($34)|0);
      var $36=(($35+($32<<2))|0);
      var $37=$36;
      var $38=(($37)|0);
      var $39=HEAP[$38];
      $rmv=$39;
      var $40=$7;
      var $41=$1;
      var $42=$rmv;
      var $43=$imm;
      var $44=FUNCTION_TABLE[$40]($41, $42, $43);
      __label__ = 7; break;
    case 6: 
      var $46=$5;
      var $47=(($46)&255);
      var $48=$1;
      var $49=(($48+204)|0);
      var $50=(($49+($47<<2))|0);
      var $51=HEAP[$50];
      var $52=HEAP[$51];
      $rmv1=$52;
      var $53=$6;
      var $54=$1;
      var $55=$rmv1;
      var $56=$imm;
      var $57=(($56) & 255);
      var $58=FUNCTION_TABLE[$53]($54, $55, $57);
      __label__ = 7; break;
    case 7: 
      __label__ = 78; break;
    case 8: 
      var $61=$1;
      var $62=(($61+236)|0);
      var $63=HEAP[$62];
      var $64=(($63 << 24) >> 24)!=0;
      if ($64) { __label__ = 17; break; } else { __label__ = 9; break; }
    case 9: 
      var $66=$5;
      var $67=(($66)&255);
      var $68=(($67)|0)==2;
      if ($68) { __label__ = 14; break; } else { __label__ = 10; break; }
    case 10: 
      var $70=$5;
      var $71=(($70)&255);
      var $72=(($71)|0)==3;
      if ($72) { __label__ = 14; break; } else { __label__ = 11; break; }
    case 11: 
      var $74=$5;
      var $75=(($74)&255);
      var $76=(($75)|0)==6;
      if ($76) { __label__ = 12; break; } else { __label__ = 15; break; }
    case 12: 
      var $78=$4;
      var $79=(($78)&255);
      var $80=(($79)|0)==1;
      if ($80) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $82=$4;
      var $83=(($82)&255);
      var $84=(($83)|0)==2;
      if ($84) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $86=$1;
      var $87=(($86+4)|0);
      var $88=(($87+32)|0);
      var $89=(($88+16)|0);
      var $90=(($89)|0);
      var $91=HEAP[$90];
      $seg=$91;
      __label__ = 16; break;
    case 15: 
      var $93=$1;
      var $94=(($93+4)|0);
      var $95=(($94+32)|0);
      var $96=(($95+24)|0);
      var $97=(($96)|0);
      var $98=HEAP[$97];
      $seg=$98;
      __label__ = 16; break;
    case 16: 
      __label__ = 18; break;
    case 17: 
      var $101=$1;
      var $102=(($101+238)|0);
      var $103=HEAP[$102];
      $seg=$103;
      __label__ = 18; break;
    case 18: 
      var $105=$4;
      var $106=(($105)&255);
      var $107=(($106)|0)==0;
      if ($107) { __label__ = 19; break; } else { __label__ = 43; break; }
    case 19: 
      var $109=$5;
      var $110=(($109)&255);
      var $111=(($110)|0)==6;
      if ($111) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $113=$1;
      var $114=_softx86_fetch_exec_byte($113);
      var $115=(($114)&255);
      $ofs=$115;
      var $116=$1;
      var $117=_softx86_fetch_exec_byte($116);
      var $118=(($117)&255);
      var $119=$118 << 8;
      var $120=$ofs;
      var $121=(($120)&65535);
      var $122=$121 | $119;
      var $123=(($122) & 65535);
      $ofs=$123;
      __label__ = 42; break;
    case 21: 
      var $125=$5;
      var $126=(($125)&255);
      var $127=(($126)|0)==0;
      if ($127) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $129=$1;
      var $130=(($129+4)|0);
      var $131=(($130)|0);
      var $132=(($131+12)|0);
      var $133=$132;
      var $134=(($133)|0);
      var $135=HEAP[$134];
      var $136=(($135)&65535);
      var $137=$1;
      var $138=(($137+4)|0);
      var $139=(($138)|0);
      var $140=(($139+24)|0);
      var $141=$140;
      var $142=(($141)|0);
      var $143=HEAP[$142];
      var $144=(($143)&65535);
      var $145=(($136+$144)|0);
      var $146=(($145) & 65535);
      $ofs=$146;
      __label__ = 41; break;
    case 23: 
      var $148=$5;
      var $149=(($148)&255);
      var $150=(($149)|0)==1;
      if ($150) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $152=$1;
      var $153=(($152+4)|0);
      var $154=(($153)|0);
      var $155=(($154+12)|0);
      var $156=$155;
      var $157=(($156)|0);
      var $158=HEAP[$157];
      var $159=(($158)&65535);
      var $160=$1;
      var $161=(($160+4)|0);
      var $162=(($161)|0);
      var $163=(($162+28)|0);
      var $164=$163;
      var $165=(($164)|0);
      var $166=HEAP[$165];
      var $167=(($166)&65535);
      var $168=(($159+$167)|0);
      var $169=(($168) & 65535);
      $ofs=$169;
      __label__ = 40; break;
    case 25: 
      var $171=$5;
      var $172=(($171)&255);
      var $173=(($172)|0)==2;
      if ($173) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $175=$1;
      var $176=(($175+4)|0);
      var $177=(($176)|0);
      var $178=(($177+20)|0);
      var $179=$178;
      var $180=(($179)|0);
      var $181=HEAP[$180];
      var $182=(($181)&65535);
      var $183=$1;
      var $184=(($183+4)|0);
      var $185=(($184)|0);
      var $186=(($185+24)|0);
      var $187=$186;
      var $188=(($187)|0);
      var $189=HEAP[$188];
      var $190=(($189)&65535);
      var $191=(($182+$190)|0);
      var $192=(($191) & 65535);
      $ofs=$192;
      __label__ = 39; break;
    case 27: 
      var $194=$5;
      var $195=(($194)&255);
      var $196=(($195)|0)==3;
      if ($196) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $198=$1;
      var $199=(($198+4)|0);
      var $200=(($199)|0);
      var $201=(($200+20)|0);
      var $202=$201;
      var $203=(($202)|0);
      var $204=HEAP[$203];
      var $205=(($204)&65535);
      var $206=$1;
      var $207=(($206+4)|0);
      var $208=(($207)|0);
      var $209=(($208+28)|0);
      var $210=$209;
      var $211=(($210)|0);
      var $212=HEAP[$211];
      var $213=(($212)&65535);
      var $214=(($205+$213)|0);
      var $215=(($214) & 65535);
      $ofs=$215;
      __label__ = 38; break;
    case 29: 
      var $217=$5;
      var $218=(($217)&255);
      var $219=(($218)|0)==4;
      if ($219) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $221=$1;
      var $222=(($221+4)|0);
      var $223=(($222)|0);
      var $224=(($223+24)|0);
      var $225=$224;
      var $226=(($225)|0);
      var $227=HEAP[$226];
      $ofs=$227;
      __label__ = 37; break;
    case 31: 
      var $229=$5;
      var $230=(($229)&255);
      var $231=(($230)|0)==5;
      if ($231) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $233=$1;
      var $234=(($233+4)|0);
      var $235=(($234)|0);
      var $236=(($235+28)|0);
      var $237=$236;
      var $238=(($237)|0);
      var $239=HEAP[$238];
      $ofs=$239;
      __label__ = 36; break;
    case 33: 
      var $241=$5;
      var $242=(($241)&255);
      var $243=(($242)|0)==7;
      if ($243) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $245=$1;
      var $246=(($245+4)|0);
      var $247=(($246)|0);
      var $248=(($247+12)|0);
      var $249=$248;
      var $250=(($249)|0);
      var $251=HEAP[$250];
      $ofs=$251;
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 72; break;
    case 43: 
      var $261=$5;
      var $262=(($261)&255);
      var $263=(($262)|0)==0;
      if ($263) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $265=$1;
      var $266=(($265+4)|0);
      var $267=(($266)|0);
      var $268=(($267+12)|0);
      var $269=$268;
      var $270=(($269)|0);
      var $271=HEAP[$270];
      var $272=(($271)&65535);
      var $273=$1;
      var $274=(($273+4)|0);
      var $275=(($274)|0);
      var $276=(($275+24)|0);
      var $277=$276;
      var $278=(($277)|0);
      var $279=HEAP[$278];
      var $280=(($279)&65535);
      var $281=(($272+$280)|0);
      var $282=(($281) & 65535);
      $ofs=$282;
      __label__ = 66; break;
    case 45: 
      var $284=$5;
      var $285=(($284)&255);
      var $286=(($285)|0)==1;
      if ($286) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $288=$1;
      var $289=(($288+4)|0);
      var $290=(($289)|0);
      var $291=(($290+12)|0);
      var $292=$291;
      var $293=(($292)|0);
      var $294=HEAP[$293];
      var $295=(($294)&65535);
      var $296=$1;
      var $297=(($296+4)|0);
      var $298=(($297)|0);
      var $299=(($298+28)|0);
      var $300=$299;
      var $301=(($300)|0);
      var $302=HEAP[$301];
      var $303=(($302)&65535);
      var $304=(($295+$303)|0);
      var $305=(($304) & 65535);
      $ofs=$305;
      __label__ = 65; break;
    case 47: 
      var $307=$5;
      var $308=(($307)&255);
      var $309=(($308)|0)==2;
      if ($309) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $311=$1;
      var $312=(($311+4)|0);
      var $313=(($312)|0);
      var $314=(($313+20)|0);
      var $315=$314;
      var $316=(($315)|0);
      var $317=HEAP[$316];
      var $318=(($317)&65535);
      var $319=$1;
      var $320=(($319+4)|0);
      var $321=(($320)|0);
      var $322=(($321+24)|0);
      var $323=$322;
      var $324=(($323)|0);
      var $325=HEAP[$324];
      var $326=(($325)&65535);
      var $327=(($318+$326)|0);
      var $328=(($327) & 65535);
      $ofs=$328;
      __label__ = 64; break;
    case 49: 
      var $330=$5;
      var $331=(($330)&255);
      var $332=(($331)|0)==3;
      if ($332) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $334=$1;
      var $335=(($334+4)|0);
      var $336=(($335)|0);
      var $337=(($336+20)|0);
      var $338=$337;
      var $339=(($338)|0);
      var $340=HEAP[$339];
      var $341=(($340)&65535);
      var $342=$1;
      var $343=(($342+4)|0);
      var $344=(($343)|0);
      var $345=(($344+28)|0);
      var $346=$345;
      var $347=(($346)|0);
      var $348=HEAP[$347];
      var $349=(($348)&65535);
      var $350=(($341+$349)|0);
      var $351=(($350) & 65535);
      $ofs=$351;
      __label__ = 63; break;
    case 51: 
      var $353=$5;
      var $354=(($353)&255);
      var $355=(($354)|0)==4;
      if ($355) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $357=$1;
      var $358=(($357+4)|0);
      var $359=(($358)|0);
      var $360=(($359+24)|0);
      var $361=$360;
      var $362=(($361)|0);
      var $363=HEAP[$362];
      $ofs=$363;
      __label__ = 62; break;
    case 53: 
      var $365=$5;
      var $366=(($365)&255);
      var $367=(($366)|0)==5;
      if ($367) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $369=$1;
      var $370=(($369+4)|0);
      var $371=(($370)|0);
      var $372=(($371+28)|0);
      var $373=$372;
      var $374=(($373)|0);
      var $375=HEAP[$374];
      $ofs=$375;
      __label__ = 61; break;
    case 55: 
      var $377=$5;
      var $378=(($377)&255);
      var $379=(($378)|0)==6;
      if ($379) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $381=$1;
      var $382=(($381+4)|0);
      var $383=(($382)|0);
      var $384=(($383+20)|0);
      var $385=$384;
      var $386=(($385)|0);
      var $387=HEAP[$386];
      $ofs=$387;
      __label__ = 60; break;
    case 57: 
      var $389=$5;
      var $390=(($389)&255);
      var $391=(($390)|0)==7;
      if ($391) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $393=$1;
      var $394=(($393+4)|0);
      var $395=(($394)|0);
      var $396=(($395+12)|0);
      var $397=$396;
      var $398=(($397)|0);
      var $399=HEAP[$398];
      $ofs=$399;
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $408=$4;
      var $409=(($408)&255);
      var $410=(($409)|0)==1;
      if ($410) { __label__ = 67; break; } else { __label__ = 70; break; }
    case 67: 
      var $412=$1;
      var $413=_softx86_fetch_exec_byte($412);
      var $414=(($413)&255);
      $xx=$414;
      var $415=$xx;
      var $416=(($415)&65535);
      var $417=$416 & 128;
      var $418=(($417)|0)!=0;
      if ($418) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $420=$xx;
      var $421=(($420)&65535);
      var $422=$421 | 65280;
      var $423=(($422) & 65535);
      $xx=$423;
      __label__ = 69; break;
    case 69: 
      __label__ = 71; break;
    case 70: 
      var $426=$1;
      var $427=_softx86_fetch_exec_byte($426);
      var $428=(($427)&255);
      $xx=$428;
      var $429=$1;
      var $430=_softx86_fetch_exec_byte($429);
      var $431=(($430)&255);
      var $432=$431 << 8;
      var $433=$xx;
      var $434=(($433)&65535);
      var $435=$434 | $432;
      var $436=(($435) & 65535);
      $xx=$436;
      __label__ = 71; break;
    case 71: 
      var $438=$ofs;
      var $439=(($438)&65535);
      var $440=$xx;
      var $441=(($440)&65535);
      var $442=(($439+$441)|0);
      var $443=$442 & 65535;
      var $444=(($443) & 65535);
      $ofs=$444;
      __label__ = 72; break;
    case 72: 
      var $446=$1;
      var $447=_softx86_fetch_exec_byte($446);
      var $448=(($447)&255);
      $imm=$448;
      var $449=$2;
      var $450=(($449 << 24) >> 24)!=0;
      if ($450) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      var $452=$1;
      var $453=_softx86_fetch_exec_byte($452);
      var $454=(($453)&255);
      var $455=$454 << 8;
      var $456=$imm;
      var $457=(($456)&65535);
      var $458=$457 | $455;
      var $459=(($458) & 65535);
      $imm=$459;
      __label__ = 74; break;
    case 74: 
      var $461=$2;
      var $462=(($461 << 24) >> 24)!=0;
      if ($462) { __label__ = 75; break; } else { __label__ = 76; break; }
    case 75: 
      var $464=$seg;
      var $465=(($464)&65535);
      var $466=$465 << 4;
      var $467=$ofs;
      var $468=(($467)&65535);
      var $469=(($466+$468)|0);
      $lo=$469;
      var $470=$1;
      var $471=$lo;
      var $472=$rmv2;
      var $473=_softx86_fetch($470, 0, $471, $472, 2);
      var $474=$7;
      var $475=$1;
      var $476=HEAP[$rmv2];
      var $477=$imm;
      var $478=FUNCTION_TABLE[$474]($475, $476, $477);
      __label__ = 77; break;
    case 76: 
      var $480=$seg;
      var $481=(($480)&65535);
      var $482=$481 << 4;
      var $483=$ofs;
      var $484=(($483)&65535);
      var $485=(($482+$484)|0);
      $lo=$485;
      var $486=$1;
      var $487=$lo;
      var $488=_softx86_fetch($486, 0, $487, $rmv3, 1);
      var $489=$6;
      var $490=$1;
      var $491=HEAP[$rmv3];
      var $492=$imm;
      var $493=(($492) & 255);
      var $494=FUNCTION_TABLE[$489]($490, $491, $493);
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break;
    case 78: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modrmonly_ro_imm["X"]=1;

function _sx86_exec_full_modrmonly_rw($ctx, $w16, $d32, $mod, $rm, $op8, $op16, $op32) {
  var __stackBase__  = STACKTOP; STACKTOP += 3; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $rmv;
      var $rmv1;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      var $rmv2=__stackBase__;
      var $rmv3=__stackBase__+2;
      $1=$ctx;
      $2=$w16;
      $3=$d32;
      $4=$mod;
      $5=$rm;
      $6=$op8;
      $7=$op16;
      $8=$op32;
      var $9=$4;
      var $10=(($9)&255);
      var $11=(($10)|0)==3;
      if ($11) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $13=$2;
      var $14=(($13 << 24) >> 24)!=0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$5;
      var $17=(($16)&255);
      var $18=$1;
      var $19=(($18+4)|0);
      var $20=(($19)|0);
      var $21=(($20+($17<<2))|0);
      var $22=$21;
      var $23=(($22)|0);
      var $24=HEAP[$23];
      $rmv=$24;
      var $25=$7;
      var $26=$1;
      var $27=$rmv;
      var $28=FUNCTION_TABLE[$25]($26, $27);
      var $29=$5;
      var $30=(($29)&255);
      var $31=$1;
      var $32=(($31+4)|0);
      var $33=(($32)|0);
      var $34=(($33+($30<<2))|0);
      var $35=$34;
      var $36=(($35)|0);
      HEAP[$36]=$28;
      __label__ = 5; break;
    case 4: 
      var $38=$5;
      var $39=(($38)&255);
      var $40=$1;
      var $41=(($40+204)|0);
      var $42=(($41+($39<<2))|0);
      var $43=HEAP[$42];
      var $44=HEAP[$43];
      $rmv1=$44;
      var $45=$6;
      var $46=$1;
      var $47=$rmv1;
      var $48=FUNCTION_TABLE[$45]($46, $47);
      var $49=$5;
      var $50=(($49)&255);
      var $51=$1;
      var $52=(($51+204)|0);
      var $53=(($52+($50<<2))|0);
      var $54=HEAP[$53];
      HEAP[$54]=$48;
      __label__ = 5; break;
    case 5: 
      __label__ = 74; break;
    case 6: 
      var $57=$1;
      var $58=(($57+236)|0);
      var $59=HEAP[$58];
      var $60=(($59 << 24) >> 24)!=0;
      if ($60) { __label__ = 15; break; } else { __label__ = 7; break; }
    case 7: 
      var $62=$5;
      var $63=(($62)&255);
      var $64=(($63)|0)==2;
      if ($64) { __label__ = 12; break; } else { __label__ = 8; break; }
    case 8: 
      var $66=$5;
      var $67=(($66)&255);
      var $68=(($67)|0)==3;
      if ($68) { __label__ = 12; break; } else { __label__ = 9; break; }
    case 9: 
      var $70=$5;
      var $71=(($70)&255);
      var $72=(($71)|0)==6;
      if ($72) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $74=$4;
      var $75=(($74)&255);
      var $76=(($75)|0)==1;
      if ($76) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $78=$4;
      var $79=(($78)&255);
      var $80=(($79)|0)==2;
      if ($80) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $82=$1;
      var $83=(($82+4)|0);
      var $84=(($83+32)|0);
      var $85=(($84+16)|0);
      var $86=(($85)|0);
      var $87=HEAP[$86];
      $seg=$87;
      __label__ = 14; break;
    case 13: 
      var $89=$1;
      var $90=(($89+4)|0);
      var $91=(($90+32)|0);
      var $92=(($91+24)|0);
      var $93=(($92)|0);
      var $94=HEAP[$93];
      $seg=$94;
      __label__ = 14; break;
    case 14: 
      __label__ = 16; break;
    case 15: 
      var $97=$1;
      var $98=(($97+238)|0);
      var $99=HEAP[$98];
      $seg=$99;
      __label__ = 16; break;
    case 16: 
      var $101=$4;
      var $102=(($101)&255);
      var $103=(($102)|0)==0;
      if ($103) { __label__ = 17; break; } else { __label__ = 41; break; }
    case 17: 
      var $105=$5;
      var $106=(($105)&255);
      var $107=(($106)|0)==6;
      if ($107) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $109=$1;
      var $110=_softx86_fetch_exec_byte($109);
      var $111=(($110)&255);
      $ofs=$111;
      var $112=$1;
      var $113=_softx86_fetch_exec_byte($112);
      var $114=(($113)&255);
      var $115=$114 << 8;
      var $116=$ofs;
      var $117=(($116)&65535);
      var $118=$117 | $115;
      var $119=(($118) & 65535);
      $ofs=$119;
      __label__ = 40; break;
    case 19: 
      var $121=$5;
      var $122=(($121)&255);
      var $123=(($122)|0)==0;
      if ($123) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $125=$1;
      var $126=(($125+4)|0);
      var $127=(($126)|0);
      var $128=(($127+12)|0);
      var $129=$128;
      var $130=(($129)|0);
      var $131=HEAP[$130];
      var $132=(($131)&65535);
      var $133=$1;
      var $134=(($133+4)|0);
      var $135=(($134)|0);
      var $136=(($135+24)|0);
      var $137=$136;
      var $138=(($137)|0);
      var $139=HEAP[$138];
      var $140=(($139)&65535);
      var $141=(($132+$140)|0);
      var $142=(($141) & 65535);
      $ofs=$142;
      __label__ = 39; break;
    case 21: 
      var $144=$5;
      var $145=(($144)&255);
      var $146=(($145)|0)==1;
      if ($146) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $148=$1;
      var $149=(($148+4)|0);
      var $150=(($149)|0);
      var $151=(($150+12)|0);
      var $152=$151;
      var $153=(($152)|0);
      var $154=HEAP[$153];
      var $155=(($154)&65535);
      var $156=$1;
      var $157=(($156+4)|0);
      var $158=(($157)|0);
      var $159=(($158+28)|0);
      var $160=$159;
      var $161=(($160)|0);
      var $162=HEAP[$161];
      var $163=(($162)&65535);
      var $164=(($155+$163)|0);
      var $165=(($164) & 65535);
      $ofs=$165;
      __label__ = 38; break;
    case 23: 
      var $167=$5;
      var $168=(($167)&255);
      var $169=(($168)|0)==2;
      if ($169) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $171=$1;
      var $172=(($171+4)|0);
      var $173=(($172)|0);
      var $174=(($173+20)|0);
      var $175=$174;
      var $176=(($175)|0);
      var $177=HEAP[$176];
      var $178=(($177)&65535);
      var $179=$1;
      var $180=(($179+4)|0);
      var $181=(($180)|0);
      var $182=(($181+24)|0);
      var $183=$182;
      var $184=(($183)|0);
      var $185=HEAP[$184];
      var $186=(($185)&65535);
      var $187=(($178+$186)|0);
      var $188=(($187) & 65535);
      $ofs=$188;
      __label__ = 37; break;
    case 25: 
      var $190=$5;
      var $191=(($190)&255);
      var $192=(($191)|0)==3;
      if ($192) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $194=$1;
      var $195=(($194+4)|0);
      var $196=(($195)|0);
      var $197=(($196+20)|0);
      var $198=$197;
      var $199=(($198)|0);
      var $200=HEAP[$199];
      var $201=(($200)&65535);
      var $202=$1;
      var $203=(($202+4)|0);
      var $204=(($203)|0);
      var $205=(($204+28)|0);
      var $206=$205;
      var $207=(($206)|0);
      var $208=HEAP[$207];
      var $209=(($208)&65535);
      var $210=(($201+$209)|0);
      var $211=(($210) & 65535);
      $ofs=$211;
      __label__ = 36; break;
    case 27: 
      var $213=$5;
      var $214=(($213)&255);
      var $215=(($214)|0)==4;
      if ($215) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $217=$1;
      var $218=(($217+4)|0);
      var $219=(($218)|0);
      var $220=(($219+24)|0);
      var $221=$220;
      var $222=(($221)|0);
      var $223=HEAP[$222];
      $ofs=$223;
      __label__ = 35; break;
    case 29: 
      var $225=$5;
      var $226=(($225)&255);
      var $227=(($226)|0)==5;
      if ($227) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $229=$1;
      var $230=(($229+4)|0);
      var $231=(($230)|0);
      var $232=(($231+28)|0);
      var $233=$232;
      var $234=(($233)|0);
      var $235=HEAP[$234];
      $ofs=$235;
      __label__ = 34; break;
    case 31: 
      var $237=$5;
      var $238=(($237)&255);
      var $239=(($238)|0)==7;
      if ($239) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $241=$1;
      var $242=(($241+4)|0);
      var $243=(($242)|0);
      var $244=(($243+12)|0);
      var $245=$244;
      var $246=(($245)|0);
      var $247=HEAP[$246];
      $ofs=$247;
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 70; break;
    case 41: 
      var $257=$5;
      var $258=(($257)&255);
      var $259=(($258)|0)==0;
      if ($259) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $261=$1;
      var $262=(($261+4)|0);
      var $263=(($262)|0);
      var $264=(($263+12)|0);
      var $265=$264;
      var $266=(($265)|0);
      var $267=HEAP[$266];
      var $268=(($267)&65535);
      var $269=$1;
      var $270=(($269+4)|0);
      var $271=(($270)|0);
      var $272=(($271+24)|0);
      var $273=$272;
      var $274=(($273)|0);
      var $275=HEAP[$274];
      var $276=(($275)&65535);
      var $277=(($268+$276)|0);
      var $278=(($277) & 65535);
      $ofs=$278;
      __label__ = 64; break;
    case 43: 
      var $280=$5;
      var $281=(($280)&255);
      var $282=(($281)|0)==1;
      if ($282) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $284=$1;
      var $285=(($284+4)|0);
      var $286=(($285)|0);
      var $287=(($286+12)|0);
      var $288=$287;
      var $289=(($288)|0);
      var $290=HEAP[$289];
      var $291=(($290)&65535);
      var $292=$1;
      var $293=(($292+4)|0);
      var $294=(($293)|0);
      var $295=(($294+28)|0);
      var $296=$295;
      var $297=(($296)|0);
      var $298=HEAP[$297];
      var $299=(($298)&65535);
      var $300=(($291+$299)|0);
      var $301=(($300) & 65535);
      $ofs=$301;
      __label__ = 63; break;
    case 45: 
      var $303=$5;
      var $304=(($303)&255);
      var $305=(($304)|0)==2;
      if ($305) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $307=$1;
      var $308=(($307+4)|0);
      var $309=(($308)|0);
      var $310=(($309+20)|0);
      var $311=$310;
      var $312=(($311)|0);
      var $313=HEAP[$312];
      var $314=(($313)&65535);
      var $315=$1;
      var $316=(($315+4)|0);
      var $317=(($316)|0);
      var $318=(($317+24)|0);
      var $319=$318;
      var $320=(($319)|0);
      var $321=HEAP[$320];
      var $322=(($321)&65535);
      var $323=(($314+$322)|0);
      var $324=(($323) & 65535);
      $ofs=$324;
      __label__ = 62; break;
    case 47: 
      var $326=$5;
      var $327=(($326)&255);
      var $328=(($327)|0)==3;
      if ($328) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $330=$1;
      var $331=(($330+4)|0);
      var $332=(($331)|0);
      var $333=(($332+20)|0);
      var $334=$333;
      var $335=(($334)|0);
      var $336=HEAP[$335];
      var $337=(($336)&65535);
      var $338=$1;
      var $339=(($338+4)|0);
      var $340=(($339)|0);
      var $341=(($340+28)|0);
      var $342=$341;
      var $343=(($342)|0);
      var $344=HEAP[$343];
      var $345=(($344)&65535);
      var $346=(($337+$345)|0);
      var $347=(($346) & 65535);
      $ofs=$347;
      __label__ = 61; break;
    case 49: 
      var $349=$5;
      var $350=(($349)&255);
      var $351=(($350)|0)==4;
      if ($351) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $353=$1;
      var $354=(($353+4)|0);
      var $355=(($354)|0);
      var $356=(($355+24)|0);
      var $357=$356;
      var $358=(($357)|0);
      var $359=HEAP[$358];
      $ofs=$359;
      __label__ = 60; break;
    case 51: 
      var $361=$5;
      var $362=(($361)&255);
      var $363=(($362)|0)==5;
      if ($363) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $365=$1;
      var $366=(($365+4)|0);
      var $367=(($366)|0);
      var $368=(($367+28)|0);
      var $369=$368;
      var $370=(($369)|0);
      var $371=HEAP[$370];
      $ofs=$371;
      __label__ = 59; break;
    case 53: 
      var $373=$5;
      var $374=(($373)&255);
      var $375=(($374)|0)==6;
      if ($375) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $377=$1;
      var $378=(($377+4)|0);
      var $379=(($378)|0);
      var $380=(($379+20)|0);
      var $381=$380;
      var $382=(($381)|0);
      var $383=HEAP[$382];
      $ofs=$383;
      __label__ = 58; break;
    case 55: 
      var $385=$5;
      var $386=(($385)&255);
      var $387=(($386)|0)==7;
      if ($387) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $389=$1;
      var $390=(($389+4)|0);
      var $391=(($390)|0);
      var $392=(($391+12)|0);
      var $393=$392;
      var $394=(($393)|0);
      var $395=HEAP[$394];
      $ofs=$395;
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      var $404=$4;
      var $405=(($404)&255);
      var $406=(($405)|0)==1;
      if ($406) { __label__ = 65; break; } else { __label__ = 68; break; }
    case 65: 
      var $408=$1;
      var $409=_softx86_fetch_exec_byte($408);
      var $410=(($409)&255);
      $xx=$410;
      var $411=$xx;
      var $412=(($411)&65535);
      var $413=$412 & 128;
      var $414=(($413)|0)!=0;
      if ($414) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $416=$xx;
      var $417=(($416)&65535);
      var $418=$417 | 65280;
      var $419=(($418) & 65535);
      $xx=$419;
      __label__ = 67; break;
    case 67: 
      __label__ = 69; break;
    case 68: 
      var $422=$1;
      var $423=_softx86_fetch_exec_byte($422);
      var $424=(($423)&255);
      $xx=$424;
      var $425=$1;
      var $426=_softx86_fetch_exec_byte($425);
      var $427=(($426)&255);
      var $428=$427 << 8;
      var $429=$xx;
      var $430=(($429)&65535);
      var $431=$430 | $428;
      var $432=(($431) & 65535);
      $xx=$432;
      __label__ = 69; break;
    case 69: 
      var $434=$ofs;
      var $435=(($434)&65535);
      var $436=$xx;
      var $437=(($436)&65535);
      var $438=(($435+$437)|0);
      var $439=$438 & 65535;
      var $440=(($439) & 65535);
      $ofs=$440;
      __label__ = 70; break;
    case 70: 
      var $442=$2;
      var $443=(($442 << 24) >> 24)!=0;
      if ($443) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $445=$seg;
      var $446=(($445)&65535);
      var $447=$446 << 4;
      var $448=$ofs;
      var $449=(($448)&65535);
      var $450=(($447+$449)|0);
      $lo=$450;
      var $451=$1;
      var $452=$lo;
      var $453=$rmv2;
      var $454=_softx86_fetch($451, 0, $452, $453, 2);
      var $455=$7;
      var $456=$1;
      var $457=HEAP[$rmv2];
      var $458=FUNCTION_TABLE[$455]($456, $457);
      HEAP[$rmv2]=$458;
      var $459=$1;
      var $460=$lo;
      var $461=$rmv2;
      var $462=_softx86_write($459, 0, $460, $461, 2);
      __label__ = 73; break;
    case 72: 
      var $464=$seg;
      var $465=(($464)&65535);
      var $466=$465 << 4;
      var $467=$ofs;
      var $468=(($467)&65535);
      var $469=(($466+$468)|0);
      $lo=$469;
      var $470=$1;
      var $471=$lo;
      var $472=_softx86_fetch($470, 0, $471, $rmv3, 1);
      var $473=$6;
      var $474=$1;
      var $475=HEAP[$rmv3];
      var $476=FUNCTION_TABLE[$473]($474, $475);
      HEAP[$rmv3]=$476;
      var $477=$1;
      var $478=$lo;
      var $479=_softx86_write($477, 0, $478, $rmv3, 1);
      __label__ = 73; break;
    case 73: 
      __label__ = 74; break;
    case 74: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modrmonly_rw["X"]=1;

function _sx86_exec_full_modrmonly_ro($ctx, $w16, $d32, $mod, $rm, $op8, $op16, $op32) {
  var __stackBase__  = STACKTOP; STACKTOP += 3; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      var $rmv=__stackBase__;
      var $rmv1=__stackBase__+2;
      $1=$ctx;
      $2=$w16;
      $3=$d32;
      $4=$mod;
      $5=$rm;
      $6=$op8;
      $7=$op16;
      $8=$op32;
      var $9=$4;
      var $10=(($9)&255);
      var $11=(($10)|0)==3;
      if ($11) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $13=$2;
      var $14=(($13 << 24) >> 24)!=0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$7;
      var $17=$1;
      var $18=$5;
      var $19=(($18)&255);
      var $20=$1;
      var $21=(($20+4)|0);
      var $22=(($21)|0);
      var $23=(($22+($19<<2))|0);
      var $24=$23;
      var $25=(($24)|0);
      var $26=HEAP[$25];
      var $27=FUNCTION_TABLE[$16]($17, $26);
      __label__ = 5; break;
    case 4: 
      var $29=$6;
      var $30=$1;
      var $31=$5;
      var $32=(($31)&255);
      var $33=$1;
      var $34=(($33+204)|0);
      var $35=(($34+($32<<2))|0);
      var $36=HEAP[$35];
      var $37=HEAP[$36];
      var $38=FUNCTION_TABLE[$29]($30, $37);
      __label__ = 5; break;
    case 5: 
      __label__ = 74; break;
    case 6: 
      var $41=$1;
      var $42=(($41+236)|0);
      var $43=HEAP[$42];
      var $44=(($43 << 24) >> 24)!=0;
      if ($44) { __label__ = 15; break; } else { __label__ = 7; break; }
    case 7: 
      var $46=$5;
      var $47=(($46)&255);
      var $48=(($47)|0)==2;
      if ($48) { __label__ = 12; break; } else { __label__ = 8; break; }
    case 8: 
      var $50=$5;
      var $51=(($50)&255);
      var $52=(($51)|0)==3;
      if ($52) { __label__ = 12; break; } else { __label__ = 9; break; }
    case 9: 
      var $54=$5;
      var $55=(($54)&255);
      var $56=(($55)|0)==6;
      if ($56) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $58=$4;
      var $59=(($58)&255);
      var $60=(($59)|0)==1;
      if ($60) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $62=$4;
      var $63=(($62)&255);
      var $64=(($63)|0)==2;
      if ($64) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $66=$1;
      var $67=(($66+4)|0);
      var $68=(($67+32)|0);
      var $69=(($68+16)|0);
      var $70=(($69)|0);
      var $71=HEAP[$70];
      $seg=$71;
      __label__ = 14; break;
    case 13: 
      var $73=$1;
      var $74=(($73+4)|0);
      var $75=(($74+32)|0);
      var $76=(($75+24)|0);
      var $77=(($76)|0);
      var $78=HEAP[$77];
      $seg=$78;
      __label__ = 14; break;
    case 14: 
      __label__ = 16; break;
    case 15: 
      var $81=$1;
      var $82=(($81+238)|0);
      var $83=HEAP[$82];
      $seg=$83;
      __label__ = 16; break;
    case 16: 
      var $85=$4;
      var $86=(($85)&255);
      var $87=(($86)|0)==0;
      if ($87) { __label__ = 17; break; } else { __label__ = 41; break; }
    case 17: 
      var $89=$5;
      var $90=(($89)&255);
      var $91=(($90)|0)==6;
      if ($91) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $93=$1;
      var $94=_softx86_fetch_exec_byte($93);
      var $95=(($94)&255);
      $ofs=$95;
      var $96=$1;
      var $97=_softx86_fetch_exec_byte($96);
      var $98=(($97)&255);
      var $99=$98 << 8;
      var $100=$ofs;
      var $101=(($100)&65535);
      var $102=$101 | $99;
      var $103=(($102) & 65535);
      $ofs=$103;
      __label__ = 40; break;
    case 19: 
      var $105=$5;
      var $106=(($105)&255);
      var $107=(($106)|0)==0;
      if ($107) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $109=$1;
      var $110=(($109+4)|0);
      var $111=(($110)|0);
      var $112=(($111+12)|0);
      var $113=$112;
      var $114=(($113)|0);
      var $115=HEAP[$114];
      var $116=(($115)&65535);
      var $117=$1;
      var $118=(($117+4)|0);
      var $119=(($118)|0);
      var $120=(($119+24)|0);
      var $121=$120;
      var $122=(($121)|0);
      var $123=HEAP[$122];
      var $124=(($123)&65535);
      var $125=(($116+$124)|0);
      var $126=(($125) & 65535);
      $ofs=$126;
      __label__ = 39; break;
    case 21: 
      var $128=$5;
      var $129=(($128)&255);
      var $130=(($129)|0)==1;
      if ($130) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $132=$1;
      var $133=(($132+4)|0);
      var $134=(($133)|0);
      var $135=(($134+12)|0);
      var $136=$135;
      var $137=(($136)|0);
      var $138=HEAP[$137];
      var $139=(($138)&65535);
      var $140=$1;
      var $141=(($140+4)|0);
      var $142=(($141)|0);
      var $143=(($142+28)|0);
      var $144=$143;
      var $145=(($144)|0);
      var $146=HEAP[$145];
      var $147=(($146)&65535);
      var $148=(($139+$147)|0);
      var $149=(($148) & 65535);
      $ofs=$149;
      __label__ = 38; break;
    case 23: 
      var $151=$5;
      var $152=(($151)&255);
      var $153=(($152)|0)==2;
      if ($153) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $155=$1;
      var $156=(($155+4)|0);
      var $157=(($156)|0);
      var $158=(($157+20)|0);
      var $159=$158;
      var $160=(($159)|0);
      var $161=HEAP[$160];
      var $162=(($161)&65535);
      var $163=$1;
      var $164=(($163+4)|0);
      var $165=(($164)|0);
      var $166=(($165+24)|0);
      var $167=$166;
      var $168=(($167)|0);
      var $169=HEAP[$168];
      var $170=(($169)&65535);
      var $171=(($162+$170)|0);
      var $172=(($171) & 65535);
      $ofs=$172;
      __label__ = 37; break;
    case 25: 
      var $174=$5;
      var $175=(($174)&255);
      var $176=(($175)|0)==3;
      if ($176) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $178=$1;
      var $179=(($178+4)|0);
      var $180=(($179)|0);
      var $181=(($180+20)|0);
      var $182=$181;
      var $183=(($182)|0);
      var $184=HEAP[$183];
      var $185=(($184)&65535);
      var $186=$1;
      var $187=(($186+4)|0);
      var $188=(($187)|0);
      var $189=(($188+28)|0);
      var $190=$189;
      var $191=(($190)|0);
      var $192=HEAP[$191];
      var $193=(($192)&65535);
      var $194=(($185+$193)|0);
      var $195=(($194) & 65535);
      $ofs=$195;
      __label__ = 36; break;
    case 27: 
      var $197=$5;
      var $198=(($197)&255);
      var $199=(($198)|0)==4;
      if ($199) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $201=$1;
      var $202=(($201+4)|0);
      var $203=(($202)|0);
      var $204=(($203+24)|0);
      var $205=$204;
      var $206=(($205)|0);
      var $207=HEAP[$206];
      $ofs=$207;
      __label__ = 35; break;
    case 29: 
      var $209=$5;
      var $210=(($209)&255);
      var $211=(($210)|0)==5;
      if ($211) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $213=$1;
      var $214=(($213+4)|0);
      var $215=(($214)|0);
      var $216=(($215+28)|0);
      var $217=$216;
      var $218=(($217)|0);
      var $219=HEAP[$218];
      $ofs=$219;
      __label__ = 34; break;
    case 31: 
      var $221=$5;
      var $222=(($221)&255);
      var $223=(($222)|0)==7;
      if ($223) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $225=$1;
      var $226=(($225+4)|0);
      var $227=(($226)|0);
      var $228=(($227+12)|0);
      var $229=$228;
      var $230=(($229)|0);
      var $231=HEAP[$230];
      $ofs=$231;
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 70; break;
    case 41: 
      var $241=$5;
      var $242=(($241)&255);
      var $243=(($242)|0)==0;
      if ($243) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $245=$1;
      var $246=(($245+4)|0);
      var $247=(($246)|0);
      var $248=(($247+12)|0);
      var $249=$248;
      var $250=(($249)|0);
      var $251=HEAP[$250];
      var $252=(($251)&65535);
      var $253=$1;
      var $254=(($253+4)|0);
      var $255=(($254)|0);
      var $256=(($255+24)|0);
      var $257=$256;
      var $258=(($257)|0);
      var $259=HEAP[$258];
      var $260=(($259)&65535);
      var $261=(($252+$260)|0);
      var $262=(($261) & 65535);
      $ofs=$262;
      __label__ = 64; break;
    case 43: 
      var $264=$5;
      var $265=(($264)&255);
      var $266=(($265)|0)==1;
      if ($266) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $268=$1;
      var $269=(($268+4)|0);
      var $270=(($269)|0);
      var $271=(($270+12)|0);
      var $272=$271;
      var $273=(($272)|0);
      var $274=HEAP[$273];
      var $275=(($274)&65535);
      var $276=$1;
      var $277=(($276+4)|0);
      var $278=(($277)|0);
      var $279=(($278+28)|0);
      var $280=$279;
      var $281=(($280)|0);
      var $282=HEAP[$281];
      var $283=(($282)&65535);
      var $284=(($275+$283)|0);
      var $285=(($284) & 65535);
      $ofs=$285;
      __label__ = 63; break;
    case 45: 
      var $287=$5;
      var $288=(($287)&255);
      var $289=(($288)|0)==2;
      if ($289) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $291=$1;
      var $292=(($291+4)|0);
      var $293=(($292)|0);
      var $294=(($293+20)|0);
      var $295=$294;
      var $296=(($295)|0);
      var $297=HEAP[$296];
      var $298=(($297)&65535);
      var $299=$1;
      var $300=(($299+4)|0);
      var $301=(($300)|0);
      var $302=(($301+24)|0);
      var $303=$302;
      var $304=(($303)|0);
      var $305=HEAP[$304];
      var $306=(($305)&65535);
      var $307=(($298+$306)|0);
      var $308=(($307) & 65535);
      $ofs=$308;
      __label__ = 62; break;
    case 47: 
      var $310=$5;
      var $311=(($310)&255);
      var $312=(($311)|0)==3;
      if ($312) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $314=$1;
      var $315=(($314+4)|0);
      var $316=(($315)|0);
      var $317=(($316+20)|0);
      var $318=$317;
      var $319=(($318)|0);
      var $320=HEAP[$319];
      var $321=(($320)&65535);
      var $322=$1;
      var $323=(($322+4)|0);
      var $324=(($323)|0);
      var $325=(($324+28)|0);
      var $326=$325;
      var $327=(($326)|0);
      var $328=HEAP[$327];
      var $329=(($328)&65535);
      var $330=(($321+$329)|0);
      var $331=(($330) & 65535);
      $ofs=$331;
      __label__ = 61; break;
    case 49: 
      var $333=$5;
      var $334=(($333)&255);
      var $335=(($334)|0)==4;
      if ($335) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $337=$1;
      var $338=(($337+4)|0);
      var $339=(($338)|0);
      var $340=(($339+24)|0);
      var $341=$340;
      var $342=(($341)|0);
      var $343=HEAP[$342];
      $ofs=$343;
      __label__ = 60; break;
    case 51: 
      var $345=$5;
      var $346=(($345)&255);
      var $347=(($346)|0)==5;
      if ($347) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $349=$1;
      var $350=(($349+4)|0);
      var $351=(($350)|0);
      var $352=(($351+28)|0);
      var $353=$352;
      var $354=(($353)|0);
      var $355=HEAP[$354];
      $ofs=$355;
      __label__ = 59; break;
    case 53: 
      var $357=$5;
      var $358=(($357)&255);
      var $359=(($358)|0)==6;
      if ($359) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $361=$1;
      var $362=(($361+4)|0);
      var $363=(($362)|0);
      var $364=(($363+20)|0);
      var $365=$364;
      var $366=(($365)|0);
      var $367=HEAP[$366];
      $ofs=$367;
      __label__ = 58; break;
    case 55: 
      var $369=$5;
      var $370=(($369)&255);
      var $371=(($370)|0)==7;
      if ($371) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $373=$1;
      var $374=(($373+4)|0);
      var $375=(($374)|0);
      var $376=(($375+12)|0);
      var $377=$376;
      var $378=(($377)|0);
      var $379=HEAP[$378];
      $ofs=$379;
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      var $388=$4;
      var $389=(($388)&255);
      var $390=(($389)|0)==1;
      if ($390) { __label__ = 65; break; } else { __label__ = 68; break; }
    case 65: 
      var $392=$1;
      var $393=_softx86_fetch_exec_byte($392);
      var $394=(($393)&255);
      $xx=$394;
      var $395=$xx;
      var $396=(($395)&65535);
      var $397=$396 & 128;
      var $398=(($397)|0)!=0;
      if ($398) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $400=$xx;
      var $401=(($400)&65535);
      var $402=$401 | 65280;
      var $403=(($402) & 65535);
      $xx=$403;
      __label__ = 67; break;
    case 67: 
      __label__ = 69; break;
    case 68: 
      var $406=$1;
      var $407=_softx86_fetch_exec_byte($406);
      var $408=(($407)&255);
      $xx=$408;
      var $409=$1;
      var $410=_softx86_fetch_exec_byte($409);
      var $411=(($410)&255);
      var $412=$411 << 8;
      var $413=$xx;
      var $414=(($413)&65535);
      var $415=$414 | $412;
      var $416=(($415) & 65535);
      $xx=$416;
      __label__ = 69; break;
    case 69: 
      var $418=$ofs;
      var $419=(($418)&65535);
      var $420=$xx;
      var $421=(($420)&65535);
      var $422=(($419+$421)|0);
      var $423=$422 & 65535;
      var $424=(($423) & 65535);
      $ofs=$424;
      __label__ = 70; break;
    case 70: 
      var $426=$2;
      var $427=(($426 << 24) >> 24)!=0;
      if ($427) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $429=$seg;
      var $430=(($429)&65535);
      var $431=$430 << 4;
      var $432=$ofs;
      var $433=(($432)&65535);
      var $434=(($431+$433)|0);
      $lo=$434;
      var $435=$1;
      var $436=$lo;
      var $437=$rmv;
      var $438=_softx86_fetch($435, 0, $436, $437, 2);
      var $439=$7;
      var $440=$1;
      var $441=HEAP[$rmv];
      var $442=FUNCTION_TABLE[$439]($440, $441);
      __label__ = 73; break;
    case 72: 
      var $444=$seg;
      var $445=(($444)&65535);
      var $446=$445 << 4;
      var $447=$ofs;
      var $448=(($447)&65535);
      var $449=(($446+$448)|0);
      $lo=$449;
      var $450=$1;
      var $451=$lo;
      var $452=_softx86_fetch($450, 0, $451, $rmv1, 1);
      var $453=$6;
      var $454=$1;
      var $455=HEAP[$rmv1];
      var $456=FUNCTION_TABLE[$453]($454, $455);
      __label__ = 73; break;
    case 73: 
      __label__ = 74; break;
    case 74: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modrmonly_ro["X"]=1;

function _sx86_exec_full_modrmonly_wo($ctx, $w16, $d32, $mod, $rm, $op8, $op16, $op32) {
  var __stackBase__  = STACKTOP; STACKTOP += 3; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      var $rmv=__stackBase__;
      var $rmv1=__stackBase__+2;
      $1=$ctx;
      $2=$w16;
      $3=$d32;
      $4=$mod;
      $5=$rm;
      $6=$op8;
      $7=$op16;
      $8=$op32;
      var $9=$4;
      var $10=(($9)&255);
      var $11=(($10)|0)==3;
      if ($11) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $13=$2;
      var $14=(($13 << 24) >> 24)!=0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$7;
      var $17=$1;
      var $18=FUNCTION_TABLE[$16]($17);
      var $19=$5;
      var $20=(($19)&255);
      var $21=$1;
      var $22=(($21+4)|0);
      var $23=(($22)|0);
      var $24=(($23+($20<<2))|0);
      var $25=$24;
      var $26=(($25)|0);
      HEAP[$26]=$18;
      __label__ = 5; break;
    case 4: 
      var $28=$6;
      var $29=$1;
      var $30=FUNCTION_TABLE[$28]($29);
      var $31=$5;
      var $32=(($31)&255);
      var $33=$1;
      var $34=(($33+204)|0);
      var $35=(($34+($32<<2))|0);
      var $36=HEAP[$35];
      HEAP[$36]=$30;
      __label__ = 5; break;
    case 5: 
      __label__ = 74; break;
    case 6: 
      var $39=$1;
      var $40=(($39+236)|0);
      var $41=HEAP[$40];
      var $42=(($41 << 24) >> 24)!=0;
      if ($42) { __label__ = 15; break; } else { __label__ = 7; break; }
    case 7: 
      var $44=$5;
      var $45=(($44)&255);
      var $46=(($45)|0)==2;
      if ($46) { __label__ = 12; break; } else { __label__ = 8; break; }
    case 8: 
      var $48=$5;
      var $49=(($48)&255);
      var $50=(($49)|0)==3;
      if ($50) { __label__ = 12; break; } else { __label__ = 9; break; }
    case 9: 
      var $52=$5;
      var $53=(($52)&255);
      var $54=(($53)|0)==6;
      if ($54) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $56=$4;
      var $57=(($56)&255);
      var $58=(($57)|0)==1;
      if ($58) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $60=$4;
      var $61=(($60)&255);
      var $62=(($61)|0)==2;
      if ($62) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $64=$1;
      var $65=(($64+4)|0);
      var $66=(($65+32)|0);
      var $67=(($66+16)|0);
      var $68=(($67)|0);
      var $69=HEAP[$68];
      $seg=$69;
      __label__ = 14; break;
    case 13: 
      var $71=$1;
      var $72=(($71+4)|0);
      var $73=(($72+32)|0);
      var $74=(($73+24)|0);
      var $75=(($74)|0);
      var $76=HEAP[$75];
      $seg=$76;
      __label__ = 14; break;
    case 14: 
      __label__ = 16; break;
    case 15: 
      var $79=$1;
      var $80=(($79+238)|0);
      var $81=HEAP[$80];
      $seg=$81;
      __label__ = 16; break;
    case 16: 
      var $83=$4;
      var $84=(($83)&255);
      var $85=(($84)|0)==0;
      if ($85) { __label__ = 17; break; } else { __label__ = 41; break; }
    case 17: 
      var $87=$5;
      var $88=(($87)&255);
      var $89=(($88)|0)==6;
      if ($89) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $91=$1;
      var $92=_softx86_fetch_exec_byte($91);
      var $93=(($92)&255);
      $ofs=$93;
      var $94=$1;
      var $95=_softx86_fetch_exec_byte($94);
      var $96=(($95)&255);
      var $97=$96 << 8;
      var $98=$ofs;
      var $99=(($98)&65535);
      var $100=$99 | $97;
      var $101=(($100) & 65535);
      $ofs=$101;
      __label__ = 40; break;
    case 19: 
      var $103=$5;
      var $104=(($103)&255);
      var $105=(($104)|0)==0;
      if ($105) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $107=$1;
      var $108=(($107+4)|0);
      var $109=(($108)|0);
      var $110=(($109+12)|0);
      var $111=$110;
      var $112=(($111)|0);
      var $113=HEAP[$112];
      var $114=(($113)&65535);
      var $115=$1;
      var $116=(($115+4)|0);
      var $117=(($116)|0);
      var $118=(($117+24)|0);
      var $119=$118;
      var $120=(($119)|0);
      var $121=HEAP[$120];
      var $122=(($121)&65535);
      var $123=(($114+$122)|0);
      var $124=(($123) & 65535);
      $ofs=$124;
      __label__ = 39; break;
    case 21: 
      var $126=$5;
      var $127=(($126)&255);
      var $128=(($127)|0)==1;
      if ($128) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $130=$1;
      var $131=(($130+4)|0);
      var $132=(($131)|0);
      var $133=(($132+12)|0);
      var $134=$133;
      var $135=(($134)|0);
      var $136=HEAP[$135];
      var $137=(($136)&65535);
      var $138=$1;
      var $139=(($138+4)|0);
      var $140=(($139)|0);
      var $141=(($140+28)|0);
      var $142=$141;
      var $143=(($142)|0);
      var $144=HEAP[$143];
      var $145=(($144)&65535);
      var $146=(($137+$145)|0);
      var $147=(($146) & 65535);
      $ofs=$147;
      __label__ = 38; break;
    case 23: 
      var $149=$5;
      var $150=(($149)&255);
      var $151=(($150)|0)==2;
      if ($151) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $153=$1;
      var $154=(($153+4)|0);
      var $155=(($154)|0);
      var $156=(($155+20)|0);
      var $157=$156;
      var $158=(($157)|0);
      var $159=HEAP[$158];
      var $160=(($159)&65535);
      var $161=$1;
      var $162=(($161+4)|0);
      var $163=(($162)|0);
      var $164=(($163+24)|0);
      var $165=$164;
      var $166=(($165)|0);
      var $167=HEAP[$166];
      var $168=(($167)&65535);
      var $169=(($160+$168)|0);
      var $170=(($169) & 65535);
      $ofs=$170;
      __label__ = 37; break;
    case 25: 
      var $172=$5;
      var $173=(($172)&255);
      var $174=(($173)|0)==3;
      if ($174) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $176=$1;
      var $177=(($176+4)|0);
      var $178=(($177)|0);
      var $179=(($178+20)|0);
      var $180=$179;
      var $181=(($180)|0);
      var $182=HEAP[$181];
      var $183=(($182)&65535);
      var $184=$1;
      var $185=(($184+4)|0);
      var $186=(($185)|0);
      var $187=(($186+28)|0);
      var $188=$187;
      var $189=(($188)|0);
      var $190=HEAP[$189];
      var $191=(($190)&65535);
      var $192=(($183+$191)|0);
      var $193=(($192) & 65535);
      $ofs=$193;
      __label__ = 36; break;
    case 27: 
      var $195=$5;
      var $196=(($195)&255);
      var $197=(($196)|0)==4;
      if ($197) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $199=$1;
      var $200=(($199+4)|0);
      var $201=(($200)|0);
      var $202=(($201+24)|0);
      var $203=$202;
      var $204=(($203)|0);
      var $205=HEAP[$204];
      $ofs=$205;
      __label__ = 35; break;
    case 29: 
      var $207=$5;
      var $208=(($207)&255);
      var $209=(($208)|0)==5;
      if ($209) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $211=$1;
      var $212=(($211+4)|0);
      var $213=(($212)|0);
      var $214=(($213+28)|0);
      var $215=$214;
      var $216=(($215)|0);
      var $217=HEAP[$216];
      $ofs=$217;
      __label__ = 34; break;
    case 31: 
      var $219=$5;
      var $220=(($219)&255);
      var $221=(($220)|0)==7;
      if ($221) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $223=$1;
      var $224=(($223+4)|0);
      var $225=(($224)|0);
      var $226=(($225+12)|0);
      var $227=$226;
      var $228=(($227)|0);
      var $229=HEAP[$228];
      $ofs=$229;
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 70; break;
    case 41: 
      var $239=$5;
      var $240=(($239)&255);
      var $241=(($240)|0)==0;
      if ($241) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $243=$1;
      var $244=(($243+4)|0);
      var $245=(($244)|0);
      var $246=(($245+12)|0);
      var $247=$246;
      var $248=(($247)|0);
      var $249=HEAP[$248];
      var $250=(($249)&65535);
      var $251=$1;
      var $252=(($251+4)|0);
      var $253=(($252)|0);
      var $254=(($253+24)|0);
      var $255=$254;
      var $256=(($255)|0);
      var $257=HEAP[$256];
      var $258=(($257)&65535);
      var $259=(($250+$258)|0);
      var $260=(($259) & 65535);
      $ofs=$260;
      __label__ = 64; break;
    case 43: 
      var $262=$5;
      var $263=(($262)&255);
      var $264=(($263)|0)==1;
      if ($264) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $266=$1;
      var $267=(($266+4)|0);
      var $268=(($267)|0);
      var $269=(($268+12)|0);
      var $270=$269;
      var $271=(($270)|0);
      var $272=HEAP[$271];
      var $273=(($272)&65535);
      var $274=$1;
      var $275=(($274+4)|0);
      var $276=(($275)|0);
      var $277=(($276+28)|0);
      var $278=$277;
      var $279=(($278)|0);
      var $280=HEAP[$279];
      var $281=(($280)&65535);
      var $282=(($273+$281)|0);
      var $283=(($282) & 65535);
      $ofs=$283;
      __label__ = 63; break;
    case 45: 
      var $285=$5;
      var $286=(($285)&255);
      var $287=(($286)|0)==2;
      if ($287) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $289=$1;
      var $290=(($289+4)|0);
      var $291=(($290)|0);
      var $292=(($291+20)|0);
      var $293=$292;
      var $294=(($293)|0);
      var $295=HEAP[$294];
      var $296=(($295)&65535);
      var $297=$1;
      var $298=(($297+4)|0);
      var $299=(($298)|0);
      var $300=(($299+24)|0);
      var $301=$300;
      var $302=(($301)|0);
      var $303=HEAP[$302];
      var $304=(($303)&65535);
      var $305=(($296+$304)|0);
      var $306=(($305) & 65535);
      $ofs=$306;
      __label__ = 62; break;
    case 47: 
      var $308=$5;
      var $309=(($308)&255);
      var $310=(($309)|0)==3;
      if ($310) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $312=$1;
      var $313=(($312+4)|0);
      var $314=(($313)|0);
      var $315=(($314+20)|0);
      var $316=$315;
      var $317=(($316)|0);
      var $318=HEAP[$317];
      var $319=(($318)&65535);
      var $320=$1;
      var $321=(($320+4)|0);
      var $322=(($321)|0);
      var $323=(($322+28)|0);
      var $324=$323;
      var $325=(($324)|0);
      var $326=HEAP[$325];
      var $327=(($326)&65535);
      var $328=(($319+$327)|0);
      var $329=(($328) & 65535);
      $ofs=$329;
      __label__ = 61; break;
    case 49: 
      var $331=$5;
      var $332=(($331)&255);
      var $333=(($332)|0)==4;
      if ($333) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $335=$1;
      var $336=(($335+4)|0);
      var $337=(($336)|0);
      var $338=(($337+24)|0);
      var $339=$338;
      var $340=(($339)|0);
      var $341=HEAP[$340];
      $ofs=$341;
      __label__ = 60; break;
    case 51: 
      var $343=$5;
      var $344=(($343)&255);
      var $345=(($344)|0)==5;
      if ($345) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $347=$1;
      var $348=(($347+4)|0);
      var $349=(($348)|0);
      var $350=(($349+28)|0);
      var $351=$350;
      var $352=(($351)|0);
      var $353=HEAP[$352];
      $ofs=$353;
      __label__ = 59; break;
    case 53: 
      var $355=$5;
      var $356=(($355)&255);
      var $357=(($356)|0)==6;
      if ($357) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $359=$1;
      var $360=(($359+4)|0);
      var $361=(($360)|0);
      var $362=(($361+20)|0);
      var $363=$362;
      var $364=(($363)|0);
      var $365=HEAP[$364];
      $ofs=$365;
      __label__ = 58; break;
    case 55: 
      var $367=$5;
      var $368=(($367)&255);
      var $369=(($368)|0)==7;
      if ($369) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $371=$1;
      var $372=(($371+4)|0);
      var $373=(($372)|0);
      var $374=(($373+12)|0);
      var $375=$374;
      var $376=(($375)|0);
      var $377=HEAP[$376];
      $ofs=$377;
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      var $386=$4;
      var $387=(($386)&255);
      var $388=(($387)|0)==1;
      if ($388) { __label__ = 65; break; } else { __label__ = 68; break; }
    case 65: 
      var $390=$1;
      var $391=_softx86_fetch_exec_byte($390);
      var $392=(($391)&255);
      $xx=$392;
      var $393=$xx;
      var $394=(($393)&65535);
      var $395=$394 & 128;
      var $396=(($395)|0)!=0;
      if ($396) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $398=$xx;
      var $399=(($398)&65535);
      var $400=$399 | 65280;
      var $401=(($400) & 65535);
      $xx=$401;
      __label__ = 67; break;
    case 67: 
      __label__ = 69; break;
    case 68: 
      var $404=$1;
      var $405=_softx86_fetch_exec_byte($404);
      var $406=(($405)&255);
      $xx=$406;
      var $407=$1;
      var $408=_softx86_fetch_exec_byte($407);
      var $409=(($408)&255);
      var $410=$409 << 8;
      var $411=$xx;
      var $412=(($411)&65535);
      var $413=$412 | $410;
      var $414=(($413) & 65535);
      $xx=$414;
      __label__ = 69; break;
    case 69: 
      var $416=$ofs;
      var $417=(($416)&65535);
      var $418=$xx;
      var $419=(($418)&65535);
      var $420=(($417+$419)|0);
      var $421=$420 & 65535;
      var $422=(($421) & 65535);
      $ofs=$422;
      __label__ = 70; break;
    case 70: 
      var $424=$2;
      var $425=(($424 << 24) >> 24)!=0;
      if ($425) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $427=$seg;
      var $428=(($427)&65535);
      var $429=$428 << 4;
      var $430=$ofs;
      var $431=(($430)&65535);
      var $432=(($429+$431)|0);
      $lo=$432;
      var $433=$7;
      var $434=$1;
      var $435=FUNCTION_TABLE[$433]($434);
      HEAP[$rmv]=$435;
      var $436=$1;
      var $437=$lo;
      var $438=$rmv;
      var $439=_softx86_write($436, 0, $437, $438, 2);
      __label__ = 73; break;
    case 72: 
      var $441=$seg;
      var $442=(($441)&65535);
      var $443=$442 << 4;
      var $444=$ofs;
      var $445=(($444)&65535);
      var $446=(($443+$445)|0);
      $lo=$446;
      var $447=$6;
      var $448=$1;
      var $449=FUNCTION_TABLE[$447]($448);
      HEAP[$rmv1]=$449;
      var $450=$1;
      var $451=$lo;
      var $452=_softx86_write($450, 0, $451, $rmv1, 1);
      __label__ = 73; break;
    case 73: 
      __label__ = 74; break;
    case 74: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modrmonly_wo["X"]=1;

function _sx86_exec_full_modrmonly_callfar($ctx, $d32, $mod, $rm, $op16, $op32) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      var $rmv=__stackBase__;
      var $rmv2=__stackBase__+2;
      $1=$ctx;
      $2=$d32;
      $3=$mod;
      $4=$rm;
      $5=$op16;
      $6=$op32;
      var $7=$3;
      var $8=(($7)&255);
      var $9=(($8)|0)==3;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 68; break;
    case 3: 
      var $12=$1;
      var $13=(($12+236)|0);
      var $14=HEAP[$13];
      var $15=(($14 << 24) >> 24)!=0;
      if ($15) { __label__ = 12; break; } else { __label__ = 4; break; }
    case 4: 
      var $17=$4;
      var $18=(($17)&255);
      var $19=(($18)|0)==2;
      if ($19) { __label__ = 9; break; } else { __label__ = 5; break; }
    case 5: 
      var $21=$4;
      var $22=(($21)&255);
      var $23=(($22)|0)==3;
      if ($23) { __label__ = 9; break; } else { __label__ = 6; break; }
    case 6: 
      var $25=$4;
      var $26=(($25)&255);
      var $27=(($26)|0)==6;
      if ($27) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $29=$3;
      var $30=(($29)&255);
      var $31=(($30)|0)==1;
      if ($31) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $33=$3;
      var $34=(($33)&255);
      var $35=(($34)|0)==2;
      if ($35) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $37=$1;
      var $38=(($37+4)|0);
      var $39=(($38+32)|0);
      var $40=(($39+16)|0);
      var $41=(($40)|0);
      var $42=HEAP[$41];
      $seg=$42;
      __label__ = 11; break;
    case 10: 
      var $44=$1;
      var $45=(($44+4)|0);
      var $46=(($45+32)|0);
      var $47=(($46+24)|0);
      var $48=(($47)|0);
      var $49=HEAP[$48];
      $seg=$49;
      __label__ = 11; break;
    case 11: 
      __label__ = 13; break;
    case 12: 
      var $52=$1;
      var $53=(($52+238)|0);
      var $54=HEAP[$53];
      $seg=$54;
      __label__ = 13; break;
    case 13: 
      var $56=$3;
      var $57=(($56)&255);
      var $58=(($57)|0)==0;
      if ($58) { __label__ = 14; break; } else { __label__ = 38; break; }
    case 14: 
      var $60=$4;
      var $61=(($60)&255);
      var $62=(($61)|0)==6;
      if ($62) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $64=$1;
      var $65=_softx86_fetch_exec_byte($64);
      var $66=(($65)&255);
      $ofs=$66;
      var $67=$1;
      var $68=_softx86_fetch_exec_byte($67);
      var $69=(($68)&255);
      var $70=$69 << 8;
      var $71=$ofs;
      var $72=(($71)&65535);
      var $73=$72 | $70;
      var $74=(($73) & 65535);
      $ofs=$74;
      __label__ = 37; break;
    case 16: 
      var $76=$4;
      var $77=(($76)&255);
      var $78=(($77)|0)==0;
      if ($78) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $80=$1;
      var $81=(($80+4)|0);
      var $82=(($81)|0);
      var $83=(($82+12)|0);
      var $84=$83;
      var $85=(($84)|0);
      var $86=HEAP[$85];
      var $87=(($86)&65535);
      var $88=$1;
      var $89=(($88+4)|0);
      var $90=(($89)|0);
      var $91=(($90+24)|0);
      var $92=$91;
      var $93=(($92)|0);
      var $94=HEAP[$93];
      var $95=(($94)&65535);
      var $96=(($87+$95)|0);
      var $97=(($96) & 65535);
      $ofs=$97;
      __label__ = 36; break;
    case 18: 
      var $99=$4;
      var $100=(($99)&255);
      var $101=(($100)|0)==1;
      if ($101) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $103=$1;
      var $104=(($103+4)|0);
      var $105=(($104)|0);
      var $106=(($105+12)|0);
      var $107=$106;
      var $108=(($107)|0);
      var $109=HEAP[$108];
      var $110=(($109)&65535);
      var $111=$1;
      var $112=(($111+4)|0);
      var $113=(($112)|0);
      var $114=(($113+28)|0);
      var $115=$114;
      var $116=(($115)|0);
      var $117=HEAP[$116];
      var $118=(($117)&65535);
      var $119=(($110+$118)|0);
      var $120=(($119) & 65535);
      $ofs=$120;
      __label__ = 35; break;
    case 20: 
      var $122=$4;
      var $123=(($122)&255);
      var $124=(($123)|0)==2;
      if ($124) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $126=$1;
      var $127=(($126+4)|0);
      var $128=(($127)|0);
      var $129=(($128+20)|0);
      var $130=$129;
      var $131=(($130)|0);
      var $132=HEAP[$131];
      var $133=(($132)&65535);
      var $134=$1;
      var $135=(($134+4)|0);
      var $136=(($135)|0);
      var $137=(($136+24)|0);
      var $138=$137;
      var $139=(($138)|0);
      var $140=HEAP[$139];
      var $141=(($140)&65535);
      var $142=(($133+$141)|0);
      var $143=(($142) & 65535);
      $ofs=$143;
      __label__ = 34; break;
    case 22: 
      var $145=$4;
      var $146=(($145)&255);
      var $147=(($146)|0)==3;
      if ($147) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $149=$1;
      var $150=(($149+4)|0);
      var $151=(($150)|0);
      var $152=(($151+20)|0);
      var $153=$152;
      var $154=(($153)|0);
      var $155=HEAP[$154];
      var $156=(($155)&65535);
      var $157=$1;
      var $158=(($157+4)|0);
      var $159=(($158)|0);
      var $160=(($159+28)|0);
      var $161=$160;
      var $162=(($161)|0);
      var $163=HEAP[$162];
      var $164=(($163)&65535);
      var $165=(($156+$164)|0);
      var $166=(($165) & 65535);
      $ofs=$166;
      __label__ = 33; break;
    case 24: 
      var $168=$4;
      var $169=(($168)&255);
      var $170=(($169)|0)==4;
      if ($170) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $172=$1;
      var $173=(($172+4)|0);
      var $174=(($173)|0);
      var $175=(($174+24)|0);
      var $176=$175;
      var $177=(($176)|0);
      var $178=HEAP[$177];
      $ofs=$178;
      __label__ = 32; break;
    case 26: 
      var $180=$4;
      var $181=(($180)&255);
      var $182=(($181)|0)==5;
      if ($182) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $184=$1;
      var $185=(($184+4)|0);
      var $186=(($185)|0);
      var $187=(($186+28)|0);
      var $188=$187;
      var $189=(($188)|0);
      var $190=HEAP[$189];
      $ofs=$190;
      __label__ = 31; break;
    case 28: 
      var $192=$4;
      var $193=(($192)&255);
      var $194=(($193)|0)==7;
      if ($194) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $196=$1;
      var $197=(($196+4)|0);
      var $198=(($197)|0);
      var $199=(($198+12)|0);
      var $200=$199;
      var $201=(($200)|0);
      var $202=HEAP[$201];
      $ofs=$202;
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 67; break;
    case 38: 
      var $212=$4;
      var $213=(($212)&255);
      var $214=(($213)|0)==0;
      if ($214) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $216=$1;
      var $217=(($216+4)|0);
      var $218=(($217)|0);
      var $219=(($218+12)|0);
      var $220=$219;
      var $221=(($220)|0);
      var $222=HEAP[$221];
      var $223=(($222)&65535);
      var $224=$1;
      var $225=(($224+4)|0);
      var $226=(($225)|0);
      var $227=(($226+24)|0);
      var $228=$227;
      var $229=(($228)|0);
      var $230=HEAP[$229];
      var $231=(($230)&65535);
      var $232=(($223+$231)|0);
      var $233=(($232) & 65535);
      $ofs=$233;
      __label__ = 61; break;
    case 40: 
      var $235=$4;
      var $236=(($235)&255);
      var $237=(($236)|0)==1;
      if ($237) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $239=$1;
      var $240=(($239+4)|0);
      var $241=(($240)|0);
      var $242=(($241+12)|0);
      var $243=$242;
      var $244=(($243)|0);
      var $245=HEAP[$244];
      var $246=(($245)&65535);
      var $247=$1;
      var $248=(($247+4)|0);
      var $249=(($248)|0);
      var $250=(($249+28)|0);
      var $251=$250;
      var $252=(($251)|0);
      var $253=HEAP[$252];
      var $254=(($253)&65535);
      var $255=(($246+$254)|0);
      var $256=(($255) & 65535);
      $ofs=$256;
      __label__ = 60; break;
    case 42: 
      var $258=$4;
      var $259=(($258)&255);
      var $260=(($259)|0)==2;
      if ($260) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $262=$1;
      var $263=(($262+4)|0);
      var $264=(($263)|0);
      var $265=(($264+20)|0);
      var $266=$265;
      var $267=(($266)|0);
      var $268=HEAP[$267];
      var $269=(($268)&65535);
      var $270=$1;
      var $271=(($270+4)|0);
      var $272=(($271)|0);
      var $273=(($272+24)|0);
      var $274=$273;
      var $275=(($274)|0);
      var $276=HEAP[$275];
      var $277=(($276)&65535);
      var $278=(($269+$277)|0);
      var $279=(($278) & 65535);
      $ofs=$279;
      __label__ = 59; break;
    case 44: 
      var $281=$4;
      var $282=(($281)&255);
      var $283=(($282)|0)==3;
      if ($283) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $285=$1;
      var $286=(($285+4)|0);
      var $287=(($286)|0);
      var $288=(($287+20)|0);
      var $289=$288;
      var $290=(($289)|0);
      var $291=HEAP[$290];
      var $292=(($291)&65535);
      var $293=$1;
      var $294=(($293+4)|0);
      var $295=(($294)|0);
      var $296=(($295+28)|0);
      var $297=$296;
      var $298=(($297)|0);
      var $299=HEAP[$298];
      var $300=(($299)&65535);
      var $301=(($292+$300)|0);
      var $302=(($301) & 65535);
      $ofs=$302;
      __label__ = 58; break;
    case 46: 
      var $304=$4;
      var $305=(($304)&255);
      var $306=(($305)|0)==4;
      if ($306) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $308=$1;
      var $309=(($308+4)|0);
      var $310=(($309)|0);
      var $311=(($310+24)|0);
      var $312=$311;
      var $313=(($312)|0);
      var $314=HEAP[$313];
      $ofs=$314;
      __label__ = 57; break;
    case 48: 
      var $316=$4;
      var $317=(($316)&255);
      var $318=(($317)|0)==5;
      if ($318) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $320=$1;
      var $321=(($320+4)|0);
      var $322=(($321)|0);
      var $323=(($322+28)|0);
      var $324=$323;
      var $325=(($324)|0);
      var $326=HEAP[$325];
      $ofs=$326;
      __label__ = 56; break;
    case 50: 
      var $328=$4;
      var $329=(($328)&255);
      var $330=(($329)|0)==6;
      if ($330) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $332=$1;
      var $333=(($332+4)|0);
      var $334=(($333)|0);
      var $335=(($334+20)|0);
      var $336=$335;
      var $337=(($336)|0);
      var $338=HEAP[$337];
      $ofs=$338;
      __label__ = 55; break;
    case 52: 
      var $340=$4;
      var $341=(($340)&255);
      var $342=(($341)|0)==7;
      if ($342) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $344=$1;
      var $345=(($344+4)|0);
      var $346=(($345)|0);
      var $347=(($346+12)|0);
      var $348=$347;
      var $349=(($348)|0);
      var $350=HEAP[$349];
      $ofs=$350;
      __label__ = 54; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      var $359=$3;
      var $360=(($359)&255);
      var $361=(($360)|0)==1;
      if ($361) { __label__ = 62; break; } else { __label__ = 65; break; }
    case 62: 
      var $363=$1;
      var $364=_softx86_fetch_exec_byte($363);
      var $365=(($364)&255);
      $xx=$365;
      var $366=$xx;
      var $367=(($366)&65535);
      var $368=$367 & 128;
      var $369=(($368)|0)!=0;
      if ($369) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: 
      var $371=$xx;
      var $372=(($371)&65535);
      var $373=$372 | 65280;
      var $374=(($373) & 65535);
      $xx=$374;
      __label__ = 64; break;
    case 64: 
      __label__ = 66; break;
    case 65: 
      var $377=$1;
      var $378=_softx86_fetch_exec_byte($377);
      var $379=(($378)&255);
      $xx=$379;
      var $380=$1;
      var $381=_softx86_fetch_exec_byte($380);
      var $382=(($381)&255);
      var $383=$382 << 8;
      var $384=$xx;
      var $385=(($384)&65535);
      var $386=$385 | $383;
      var $387=(($386) & 65535);
      $xx=$387;
      __label__ = 66; break;
    case 66: 
      var $389=$ofs;
      var $390=(($389)&65535);
      var $391=$xx;
      var $392=(($391)&65535);
      var $393=(($390+$392)|0);
      var $394=$393 & 65535;
      var $395=(($394) & 65535);
      $ofs=$395;
      __label__ = 67; break;
    case 67: 
      var $397=$seg;
      var $398=(($397)&65535);
      var $399=$398 << 4;
      var $400=$ofs;
      var $401=(($400)&65535);
      var $402=(($399+$401)|0);
      $lo=$402;
      var $403=$1;
      var $404=$lo;
      var $405=$rmv;
      var $406=_softx86_fetch($403, 0, $404, $405, 2);
      var $407=$lo;
      var $408=(($407+2)|0);
      $lo=$408;
      var $409=$1;
      var $410=$lo;
      var $411=$rmv2;
      var $412=_softx86_fetch($409, 0, $410, $411, 2);
      var $413=$5;
      var $414=$1;
      var $415=HEAP[$rmv2];
      var $416=HEAP[$rmv];
      FUNCTION_TABLE[$413]($414, $415, $416);
      __label__ = 68; break;
    case 68: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modrmonly_callfar["X"]=1;
// Warning: 64 bit AND - precision limit may be hit on llvm line 18329
// Warning: 64 bit XOR - precision limit may be hit on llvm line 18332

function _softx86_parity8($ret) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $b;
      var $p;
      $1=$ret;
      $p=1;
      $b=0;
      __label__ = 2; break;
    case 2: 
      var $3=$b;
      var $4=(($3)|0) < 8;
      if ($4) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $6=$1;
      var $7=(($6)&255);
      var $8=$7 & 1;
      var $9=$p;
      var $10=$9 ^ $8;
      $p=$10;
      var $11=$1;
      var $12=(($11)&255);
      var $13=$12 >> 1;
      var $14=(($13) & 255);
      $1=$14;
      __label__ = 4; break;
    case 4: 
      var $16=$b;
      var $17=(($16+1)|0);
      $b=$17;
      __label__ = 2; break;
    case 5: 
      var $19=$p;
      ;
      return $19;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_parity16($ret) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $b;
      var $p;
      $1=$ret;
      $p=1;
      $b=0;
      __label__ = 2; break;
    case 2: 
      var $3=$b;
      var $4=(($3)|0) < 16;
      if ($4) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $6=$1;
      var $7=(($6)&65535);
      var $8=$7 & 1;
      var $9=$p;
      var $10=$9 ^ $8;
      $p=$10;
      var $11=$1;
      var $12=(($11)&65535);
      var $13=$12 >> 1;
      var $14=(($13) & 65535);
      $1=$14;
      __label__ = 4; break;
    case 4: 
      var $16=$b;
      var $17=(($16+1)|0);
      $b=$17;
      __label__ = 2; break;
    case 5: 
      var $19=$p;
      ;
      return $19;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_parity32($ret) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $b;
      var $p;
      $1=$ret;
      $p=1;
      $b=0;
      __label__ = 2; break;
    case 2: 
      var $3=$b;
      var $4=(($3)|0) < 32;
      if ($4) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $6=$1;
      var $7=$6 & 1;
      var $8=$p;
      var $9=$8 ^ $7;
      $p=$9;
      var $10=$1;
      var $11=$10 >>> 1;
      $1=$11;
      __label__ = 4; break;
    case 4: 
      var $13=$b;
      var $14=(($13+1)|0);
      $b=$14;
      __label__ = 2; break;
    case 5: 
      var $16=$p;
      ;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}


function _softx86_parity64($ret) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $b;
      var $p;
      $1=$ret;
      $p=1;
      $b=0;
      __label__ = 2; break;
    case 2: 
      var $3=$b;
      var $4=(($3)|0) < 64;
      if ($4) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $6=$1;
      var $7=Runtime.and64($6, 1);
      var $8=$p;
      var $9=(($8)|0);
      var $10=Runtime.xor64($9, $7);
      var $11=(($10) & 4294967295);
      $p=$11;
      var $12=$1;
      var $13=(tempBigIntI=($12 >= 0 ? $12 : 18446744073709552000+$12)/2,tempBigIntI-tempBigIntI%1);
      $1=$13;
      __label__ = 4; break;
    case 4: 
      var $15=$b;
      var $16=(($15+1)|0);
      $b=$16;
      __label__ = 2; break;
    case 5: 
      var $18=$p;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function _sx86_exec_full_modregrm_xchg($ctx, $w16, $d32, $mod, $reg, $rm) {
  var __stackBase__  = STACKTOP; STACKTOP += 6; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $tmp;
      var $tmp1;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      var $tmp2=__stackBase__;
      var $mem=__stackBase__+2;
      var $tmp3=__stackBase__+4;
      var $mem4=__stackBase__+5;
      $1=$ctx;
      $2=$w16;
      $3=$d32;
      $4=$mod;
      $5=$reg;
      $6=$rm;
      var $7=$4;
      var $8=(($7)&255);
      var $9=(($8)|0)==3;
      if ($9) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $11=$2;
      var $12=(($11 << 24) >> 24)!=0;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$5;
      var $15=(($14)&255);
      var $16=$1;
      var $17=(($16+4)|0);
      var $18=(($17)|0);
      var $19=(($18+($15<<2))|0);
      var $20=$19;
      var $21=(($20)|0);
      var $22=HEAP[$21];
      $tmp=$22;
      var $23=$6;
      var $24=(($23)&255);
      var $25=$1;
      var $26=(($25+4)|0);
      var $27=(($26)|0);
      var $28=(($27+($24<<2))|0);
      var $29=$28;
      var $30=(($29)|0);
      var $31=HEAP[$30];
      var $32=$5;
      var $33=(($32)&255);
      var $34=$1;
      var $35=(($34+4)|0);
      var $36=(($35)|0);
      var $37=(($36+($33<<2))|0);
      var $38=$37;
      var $39=(($38)|0);
      HEAP[$39]=$31;
      var $40=$tmp;
      var $41=$6;
      var $42=(($41)&255);
      var $43=$1;
      var $44=(($43+4)|0);
      var $45=(($44)|0);
      var $46=(($45+($42<<2))|0);
      var $47=$46;
      var $48=(($47)|0);
      HEAP[$48]=$40;
      __label__ = 5; break;
    case 4: 
      var $50=$5;
      var $51=(($50)&255);
      var $52=$1;
      var $53=(($52+204)|0);
      var $54=(($53+($51<<2))|0);
      var $55=HEAP[$54];
      var $56=HEAP[$55];
      $tmp1=$56;
      var $57=$6;
      var $58=(($57)&255);
      var $59=$1;
      var $60=(($59+204)|0);
      var $61=(($60+($58<<2))|0);
      var $62=HEAP[$61];
      var $63=HEAP[$62];
      var $64=$5;
      var $65=(($64)&255);
      var $66=$1;
      var $67=(($66+204)|0);
      var $68=(($67+($65<<2))|0);
      var $69=HEAP[$68];
      HEAP[$69]=$63;
      var $70=$tmp1;
      var $71=$6;
      var $72=(($71)&255);
      var $73=$1;
      var $74=(($73+204)|0);
      var $75=(($74+($72<<2))|0);
      var $76=HEAP[$75];
      HEAP[$76]=$70;
      __label__ = 5; break;
    case 5: 
      __label__ = 74; break;
    case 6: 
      var $79=$1;
      var $80=(($79+236)|0);
      var $81=HEAP[$80];
      var $82=(($81 << 24) >> 24)!=0;
      if ($82) { __label__ = 15; break; } else { __label__ = 7; break; }
    case 7: 
      var $84=$6;
      var $85=(($84)&255);
      var $86=(($85)|0)==2;
      if ($86) { __label__ = 12; break; } else { __label__ = 8; break; }
    case 8: 
      var $88=$6;
      var $89=(($88)&255);
      var $90=(($89)|0)==3;
      if ($90) { __label__ = 12; break; } else { __label__ = 9; break; }
    case 9: 
      var $92=$6;
      var $93=(($92)&255);
      var $94=(($93)|0)==6;
      if ($94) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $96=$4;
      var $97=(($96)&255);
      var $98=(($97)|0)==1;
      if ($98) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $100=$4;
      var $101=(($100)&255);
      var $102=(($101)|0)==2;
      if ($102) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $104=$1;
      var $105=(($104+4)|0);
      var $106=(($105+32)|0);
      var $107=(($106+16)|0);
      var $108=(($107)|0);
      var $109=HEAP[$108];
      $seg=$109;
      __label__ = 14; break;
    case 13: 
      var $111=$1;
      var $112=(($111+4)|0);
      var $113=(($112+32)|0);
      var $114=(($113+24)|0);
      var $115=(($114)|0);
      var $116=HEAP[$115];
      $seg=$116;
      __label__ = 14; break;
    case 14: 
      __label__ = 16; break;
    case 15: 
      var $119=$1;
      var $120=(($119+238)|0);
      var $121=HEAP[$120];
      $seg=$121;
      __label__ = 16; break;
    case 16: 
      var $123=$4;
      var $124=(($123)&255);
      var $125=(($124)|0)==0;
      if ($125) { __label__ = 17; break; } else { __label__ = 41; break; }
    case 17: 
      var $127=$6;
      var $128=(($127)&255);
      var $129=(($128)|0)==6;
      if ($129) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $131=$1;
      var $132=_softx86_fetch_exec_byte($131);
      var $133=(($132)&255);
      $ofs=$133;
      var $134=$1;
      var $135=_softx86_fetch_exec_byte($134);
      var $136=(($135)&255);
      var $137=$136 << 8;
      var $138=$ofs;
      var $139=(($138)&65535);
      var $140=$139 | $137;
      var $141=(($140) & 65535);
      $ofs=$141;
      __label__ = 40; break;
    case 19: 
      var $143=$6;
      var $144=(($143)&255);
      var $145=(($144)|0)==0;
      if ($145) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $147=$1;
      var $148=(($147+4)|0);
      var $149=(($148)|0);
      var $150=(($149+12)|0);
      var $151=$150;
      var $152=(($151)|0);
      var $153=HEAP[$152];
      var $154=(($153)&65535);
      var $155=$1;
      var $156=(($155+4)|0);
      var $157=(($156)|0);
      var $158=(($157+24)|0);
      var $159=$158;
      var $160=(($159)|0);
      var $161=HEAP[$160];
      var $162=(($161)&65535);
      var $163=(($154+$162)|0);
      var $164=(($163) & 65535);
      $ofs=$164;
      __label__ = 39; break;
    case 21: 
      var $166=$6;
      var $167=(($166)&255);
      var $168=(($167)|0)==1;
      if ($168) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $170=$1;
      var $171=(($170+4)|0);
      var $172=(($171)|0);
      var $173=(($172+12)|0);
      var $174=$173;
      var $175=(($174)|0);
      var $176=HEAP[$175];
      var $177=(($176)&65535);
      var $178=$1;
      var $179=(($178+4)|0);
      var $180=(($179)|0);
      var $181=(($180+28)|0);
      var $182=$181;
      var $183=(($182)|0);
      var $184=HEAP[$183];
      var $185=(($184)&65535);
      var $186=(($177+$185)|0);
      var $187=(($186) & 65535);
      $ofs=$187;
      __label__ = 38; break;
    case 23: 
      var $189=$6;
      var $190=(($189)&255);
      var $191=(($190)|0)==2;
      if ($191) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $193=$1;
      var $194=(($193+4)|0);
      var $195=(($194)|0);
      var $196=(($195+20)|0);
      var $197=$196;
      var $198=(($197)|0);
      var $199=HEAP[$198];
      var $200=(($199)&65535);
      var $201=$1;
      var $202=(($201+4)|0);
      var $203=(($202)|0);
      var $204=(($203+24)|0);
      var $205=$204;
      var $206=(($205)|0);
      var $207=HEAP[$206];
      var $208=(($207)&65535);
      var $209=(($200+$208)|0);
      var $210=(($209) & 65535);
      $ofs=$210;
      __label__ = 37; break;
    case 25: 
      var $212=$6;
      var $213=(($212)&255);
      var $214=(($213)|0)==3;
      if ($214) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $216=$1;
      var $217=(($216+4)|0);
      var $218=(($217)|0);
      var $219=(($218+20)|0);
      var $220=$219;
      var $221=(($220)|0);
      var $222=HEAP[$221];
      var $223=(($222)&65535);
      var $224=$1;
      var $225=(($224+4)|0);
      var $226=(($225)|0);
      var $227=(($226+28)|0);
      var $228=$227;
      var $229=(($228)|0);
      var $230=HEAP[$229];
      var $231=(($230)&65535);
      var $232=(($223+$231)|0);
      var $233=(($232) & 65535);
      $ofs=$233;
      __label__ = 36; break;
    case 27: 
      var $235=$6;
      var $236=(($235)&255);
      var $237=(($236)|0)==4;
      if ($237) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $239=$1;
      var $240=(($239+4)|0);
      var $241=(($240)|0);
      var $242=(($241+24)|0);
      var $243=$242;
      var $244=(($243)|0);
      var $245=HEAP[$244];
      $ofs=$245;
      __label__ = 35; break;
    case 29: 
      var $247=$6;
      var $248=(($247)&255);
      var $249=(($248)|0)==5;
      if ($249) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $251=$1;
      var $252=(($251+4)|0);
      var $253=(($252)|0);
      var $254=(($253+28)|0);
      var $255=$254;
      var $256=(($255)|0);
      var $257=HEAP[$256];
      $ofs=$257;
      __label__ = 34; break;
    case 31: 
      var $259=$6;
      var $260=(($259)&255);
      var $261=(($260)|0)==7;
      if ($261) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $263=$1;
      var $264=(($263+4)|0);
      var $265=(($264)|0);
      var $266=(($265+12)|0);
      var $267=$266;
      var $268=(($267)|0);
      var $269=HEAP[$268];
      $ofs=$269;
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 70; break;
    case 41: 
      var $279=$6;
      var $280=(($279)&255);
      var $281=(($280)|0)==0;
      if ($281) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $283=$1;
      var $284=(($283+4)|0);
      var $285=(($284)|0);
      var $286=(($285+12)|0);
      var $287=$286;
      var $288=(($287)|0);
      var $289=HEAP[$288];
      var $290=(($289)&65535);
      var $291=$1;
      var $292=(($291+4)|0);
      var $293=(($292)|0);
      var $294=(($293+24)|0);
      var $295=$294;
      var $296=(($295)|0);
      var $297=HEAP[$296];
      var $298=(($297)&65535);
      var $299=(($290+$298)|0);
      var $300=(($299) & 65535);
      $ofs=$300;
      __label__ = 64; break;
    case 43: 
      var $302=$6;
      var $303=(($302)&255);
      var $304=(($303)|0)==1;
      if ($304) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $306=$1;
      var $307=(($306+4)|0);
      var $308=(($307)|0);
      var $309=(($308+12)|0);
      var $310=$309;
      var $311=(($310)|0);
      var $312=HEAP[$311];
      var $313=(($312)&65535);
      var $314=$1;
      var $315=(($314+4)|0);
      var $316=(($315)|0);
      var $317=(($316+28)|0);
      var $318=$317;
      var $319=(($318)|0);
      var $320=HEAP[$319];
      var $321=(($320)&65535);
      var $322=(($313+$321)|0);
      var $323=(($322) & 65535);
      $ofs=$323;
      __label__ = 63; break;
    case 45: 
      var $325=$6;
      var $326=(($325)&255);
      var $327=(($326)|0)==2;
      if ($327) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $329=$1;
      var $330=(($329+4)|0);
      var $331=(($330)|0);
      var $332=(($331+20)|0);
      var $333=$332;
      var $334=(($333)|0);
      var $335=HEAP[$334];
      var $336=(($335)&65535);
      var $337=$1;
      var $338=(($337+4)|0);
      var $339=(($338)|0);
      var $340=(($339+24)|0);
      var $341=$340;
      var $342=(($341)|0);
      var $343=HEAP[$342];
      var $344=(($343)&65535);
      var $345=(($336+$344)|0);
      var $346=(($345) & 65535);
      $ofs=$346;
      __label__ = 62; break;
    case 47: 
      var $348=$6;
      var $349=(($348)&255);
      var $350=(($349)|0)==3;
      if ($350) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $352=$1;
      var $353=(($352+4)|0);
      var $354=(($353)|0);
      var $355=(($354+20)|0);
      var $356=$355;
      var $357=(($356)|0);
      var $358=HEAP[$357];
      var $359=(($358)&65535);
      var $360=$1;
      var $361=(($360+4)|0);
      var $362=(($361)|0);
      var $363=(($362+28)|0);
      var $364=$363;
      var $365=(($364)|0);
      var $366=HEAP[$365];
      var $367=(($366)&65535);
      var $368=(($359+$367)|0);
      var $369=(($368) & 65535);
      $ofs=$369;
      __label__ = 61; break;
    case 49: 
      var $371=$6;
      var $372=(($371)&255);
      var $373=(($372)|0)==4;
      if ($373) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $375=$1;
      var $376=(($375+4)|0);
      var $377=(($376)|0);
      var $378=(($377+24)|0);
      var $379=$378;
      var $380=(($379)|0);
      var $381=HEAP[$380];
      $ofs=$381;
      __label__ = 60; break;
    case 51: 
      var $383=$6;
      var $384=(($383)&255);
      var $385=(($384)|0)==5;
      if ($385) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $387=$1;
      var $388=(($387+4)|0);
      var $389=(($388)|0);
      var $390=(($389+28)|0);
      var $391=$390;
      var $392=(($391)|0);
      var $393=HEAP[$392];
      $ofs=$393;
      __label__ = 59; break;
    case 53: 
      var $395=$6;
      var $396=(($395)&255);
      var $397=(($396)|0)==6;
      if ($397) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $399=$1;
      var $400=(($399+4)|0);
      var $401=(($400)|0);
      var $402=(($401+20)|0);
      var $403=$402;
      var $404=(($403)|0);
      var $405=HEAP[$404];
      $ofs=$405;
      __label__ = 58; break;
    case 55: 
      var $407=$6;
      var $408=(($407)&255);
      var $409=(($408)|0)==7;
      if ($409) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $411=$1;
      var $412=(($411+4)|0);
      var $413=(($412)|0);
      var $414=(($413+12)|0);
      var $415=$414;
      var $416=(($415)|0);
      var $417=HEAP[$416];
      $ofs=$417;
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      var $426=$4;
      var $427=(($426)&255);
      var $428=(($427)|0)==1;
      if ($428) { __label__ = 65; break; } else { __label__ = 68; break; }
    case 65: 
      var $430=$1;
      var $431=_softx86_fetch_exec_byte($430);
      var $432=(($431)&255);
      $xx=$432;
      var $433=$xx;
      var $434=(($433)&65535);
      var $435=$434 & 128;
      var $436=(($435)|0)!=0;
      if ($436) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $438=$xx;
      var $439=(($438)&65535);
      var $440=$439 | 65280;
      var $441=(($440) & 65535);
      $xx=$441;
      __label__ = 67; break;
    case 67: 
      __label__ = 69; break;
    case 68: 
      var $444=$1;
      var $445=_softx86_fetch_exec_byte($444);
      var $446=(($445)&255);
      $xx=$446;
      var $447=$1;
      var $448=_softx86_fetch_exec_byte($447);
      var $449=(($448)&255);
      var $450=$449 << 8;
      var $451=$xx;
      var $452=(($451)&65535);
      var $453=$452 | $450;
      var $454=(($453) & 65535);
      $xx=$454;
      __label__ = 69; break;
    case 69: 
      var $456=$ofs;
      var $457=(($456)&65535);
      var $458=$xx;
      var $459=(($458)&65535);
      var $460=(($457+$459)|0);
      var $461=$460 & 65535;
      var $462=(($461) & 65535);
      $ofs=$462;
      __label__ = 70; break;
    case 70: 
      var $464=$2;
      var $465=(($464 << 24) >> 24)!=0;
      if ($465) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $467=$seg;
      var $468=(($467)&65535);
      var $469=$468 << 4;
      var $470=$ofs;
      var $471=(($470)&65535);
      var $472=(($469+$471)|0);
      $lo=$472;
      var $473=$1;
      var $474=$lo;
      var $475=$mem;
      var $476=_softx86_fetch($473, 0, $474, $475, 2);
      var $477=$5;
      var $478=(($477)&255);
      var $479=$1;
      var $480=(($479+4)|0);
      var $481=(($480)|0);
      var $482=(($481+($478<<2))|0);
      var $483=$482;
      var $484=(($483)|0);
      var $485=HEAP[$484];
      HEAP[$tmp2]=$485;
      var $486=$1;
      var $487=$lo;
      var $488=$tmp2;
      var $489=_softx86_write($486, 0, $487, $488, 2);
      var $490=HEAP[$mem];
      var $491=$5;
      var $492=(($491)&255);
      var $493=$1;
      var $494=(($493+4)|0);
      var $495=(($494)|0);
      var $496=(($495+($492<<2))|0);
      var $497=$496;
      var $498=(($497)|0);
      HEAP[$498]=$490;
      __label__ = 73; break;
    case 72: 
      var $500=$seg;
      var $501=(($500)&65535);
      var $502=$501 << 4;
      var $503=$ofs;
      var $504=(($503)&65535);
      var $505=(($502+$504)|0);
      $lo=$505;
      var $506=$1;
      var $507=$lo;
      var $508=_softx86_fetch($506, 0, $507, $mem4, 1);
      var $509=$5;
      var $510=(($509)&255);
      var $511=$1;
      var $512=(($511+204)|0);
      var $513=(($512+($510<<2))|0);
      var $514=HEAP[$513];
      var $515=HEAP[$514];
      HEAP[$tmp3]=$515;
      var $516=$1;
      var $517=$lo;
      var $518=_softx86_write($516, 0, $517, $tmp3, 1);
      var $519=HEAP[$mem4];
      var $520=$5;
      var $521=(($520)&255);
      var $522=$1;
      var $523=(($522+204)|0);
      var $524=(($523+($521<<2))|0);
      var $525=HEAP[$524];
      HEAP[$525]=$519;
      __label__ = 73; break;
    case 73: 
      __label__ = 74; break;
    case 74: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modregrm_xchg["X"]=1;

function _sx86_exec_full_modrmonly_memx($ctx, $mod, $rm, $sz, $op64) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      var $tmp=__stackBase__;
      $1=$ctx;
      $2=$mod;
      $3=$rm;
      $4=$sz;
      $5=$op64;
      var $6=$4;
      var $7=(($6)|0) > 16;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 70; break;
    case 3: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=(($11)|0)==3;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 70; break;
    case 5: 
      var $15=$1;
      var $16=(($15+236)|0);
      var $17=HEAP[$16];
      var $18=(($17 << 24) >> 24)!=0;
      if ($18) { __label__ = 14; break; } else { __label__ = 6; break; }
    case 6: 
      var $20=$3;
      var $21=(($20)&255);
      var $22=(($21)|0)==2;
      if ($22) { __label__ = 11; break; } else { __label__ = 7; break; }
    case 7: 
      var $24=$3;
      var $25=(($24)&255);
      var $26=(($25)|0)==3;
      if ($26) { __label__ = 11; break; } else { __label__ = 8; break; }
    case 8: 
      var $28=$3;
      var $29=(($28)&255);
      var $30=(($29)|0)==6;
      if ($30) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $32=$2;
      var $33=(($32)&255);
      var $34=(($33)|0)==1;
      if ($34) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $36=$2;
      var $37=(($36)&255);
      var $38=(($37)|0)==2;
      if ($38) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $40=$1;
      var $41=(($40+4)|0);
      var $42=(($41+32)|0);
      var $43=(($42+16)|0);
      var $44=(($43)|0);
      var $45=HEAP[$44];
      $seg=$45;
      __label__ = 13; break;
    case 12: 
      var $47=$1;
      var $48=(($47+4)|0);
      var $49=(($48+32)|0);
      var $50=(($49+24)|0);
      var $51=(($50)|0);
      var $52=HEAP[$51];
      $seg=$52;
      __label__ = 13; break;
    case 13: 
      __label__ = 15; break;
    case 14: 
      var $55=$1;
      var $56=(($55+238)|0);
      var $57=HEAP[$56];
      $seg=$57;
      __label__ = 15; break;
    case 15: 
      var $59=$2;
      var $60=(($59)&255);
      var $61=(($60)|0)==0;
      if ($61) { __label__ = 16; break; } else { __label__ = 40; break; }
    case 16: 
      var $63=$3;
      var $64=(($63)&255);
      var $65=(($64)|0)==6;
      if ($65) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $67=$1;
      var $68=_softx86_fetch_exec_byte($67);
      var $69=(($68)&255);
      $ofs=$69;
      var $70=$1;
      var $71=_softx86_fetch_exec_byte($70);
      var $72=(($71)&255);
      var $73=$72 << 8;
      var $74=$ofs;
      var $75=(($74)&65535);
      var $76=$75 | $73;
      var $77=(($76) & 65535);
      $ofs=$77;
      __label__ = 39; break;
    case 18: 
      var $79=$3;
      var $80=(($79)&255);
      var $81=(($80)|0)==0;
      if ($81) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $83=$1;
      var $84=(($83+4)|0);
      var $85=(($84)|0);
      var $86=(($85+12)|0);
      var $87=$86;
      var $88=(($87)|0);
      var $89=HEAP[$88];
      var $90=(($89)&65535);
      var $91=$1;
      var $92=(($91+4)|0);
      var $93=(($92)|0);
      var $94=(($93+24)|0);
      var $95=$94;
      var $96=(($95)|0);
      var $97=HEAP[$96];
      var $98=(($97)&65535);
      var $99=(($90+$98)|0);
      var $100=(($99) & 65535);
      $ofs=$100;
      __label__ = 38; break;
    case 20: 
      var $102=$3;
      var $103=(($102)&255);
      var $104=(($103)|0)==1;
      if ($104) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $106=$1;
      var $107=(($106+4)|0);
      var $108=(($107)|0);
      var $109=(($108+12)|0);
      var $110=$109;
      var $111=(($110)|0);
      var $112=HEAP[$111];
      var $113=(($112)&65535);
      var $114=$1;
      var $115=(($114+4)|0);
      var $116=(($115)|0);
      var $117=(($116+28)|0);
      var $118=$117;
      var $119=(($118)|0);
      var $120=HEAP[$119];
      var $121=(($120)&65535);
      var $122=(($113+$121)|0);
      var $123=(($122) & 65535);
      $ofs=$123;
      __label__ = 37; break;
    case 22: 
      var $125=$3;
      var $126=(($125)&255);
      var $127=(($126)|0)==2;
      if ($127) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $129=$1;
      var $130=(($129+4)|0);
      var $131=(($130)|0);
      var $132=(($131+20)|0);
      var $133=$132;
      var $134=(($133)|0);
      var $135=HEAP[$134];
      var $136=(($135)&65535);
      var $137=$1;
      var $138=(($137+4)|0);
      var $139=(($138)|0);
      var $140=(($139+24)|0);
      var $141=$140;
      var $142=(($141)|0);
      var $143=HEAP[$142];
      var $144=(($143)&65535);
      var $145=(($136+$144)|0);
      var $146=(($145) & 65535);
      $ofs=$146;
      __label__ = 36; break;
    case 24: 
      var $148=$3;
      var $149=(($148)&255);
      var $150=(($149)|0)==3;
      if ($150) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $152=$1;
      var $153=(($152+4)|0);
      var $154=(($153)|0);
      var $155=(($154+20)|0);
      var $156=$155;
      var $157=(($156)|0);
      var $158=HEAP[$157];
      var $159=(($158)&65535);
      var $160=$1;
      var $161=(($160+4)|0);
      var $162=(($161)|0);
      var $163=(($162+28)|0);
      var $164=$163;
      var $165=(($164)|0);
      var $166=HEAP[$165];
      var $167=(($166)&65535);
      var $168=(($159+$167)|0);
      var $169=(($168) & 65535);
      $ofs=$169;
      __label__ = 35; break;
    case 26: 
      var $171=$3;
      var $172=(($171)&255);
      var $173=(($172)|0)==4;
      if ($173) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $175=$1;
      var $176=(($175+4)|0);
      var $177=(($176)|0);
      var $178=(($177+24)|0);
      var $179=$178;
      var $180=(($179)|0);
      var $181=HEAP[$180];
      $ofs=$181;
      __label__ = 34; break;
    case 28: 
      var $183=$3;
      var $184=(($183)&255);
      var $185=(($184)|0)==5;
      if ($185) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $187=$1;
      var $188=(($187+4)|0);
      var $189=(($188)|0);
      var $190=(($189+28)|0);
      var $191=$190;
      var $192=(($191)|0);
      var $193=HEAP[$192];
      $ofs=$193;
      __label__ = 33; break;
    case 30: 
      var $195=$3;
      var $196=(($195)&255);
      var $197=(($196)|0)==7;
      if ($197) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $199=$1;
      var $200=(($199+4)|0);
      var $201=(($200)|0);
      var $202=(($201+12)|0);
      var $203=$202;
      var $204=(($203)|0);
      var $205=HEAP[$204];
      $ofs=$205;
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      __label__ = 69; break;
    case 40: 
      var $215=$3;
      var $216=(($215)&255);
      var $217=(($216)|0)==0;
      if ($217) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $219=$1;
      var $220=(($219+4)|0);
      var $221=(($220)|0);
      var $222=(($221+12)|0);
      var $223=$222;
      var $224=(($223)|0);
      var $225=HEAP[$224];
      var $226=(($225)&65535);
      var $227=$1;
      var $228=(($227+4)|0);
      var $229=(($228)|0);
      var $230=(($229+24)|0);
      var $231=$230;
      var $232=(($231)|0);
      var $233=HEAP[$232];
      var $234=(($233)&65535);
      var $235=(($226+$234)|0);
      var $236=(($235) & 65535);
      $ofs=$236;
      __label__ = 63; break;
    case 42: 
      var $238=$3;
      var $239=(($238)&255);
      var $240=(($239)|0)==1;
      if ($240) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $242=$1;
      var $243=(($242+4)|0);
      var $244=(($243)|0);
      var $245=(($244+12)|0);
      var $246=$245;
      var $247=(($246)|0);
      var $248=HEAP[$247];
      var $249=(($248)&65535);
      var $250=$1;
      var $251=(($250+4)|0);
      var $252=(($251)|0);
      var $253=(($252+28)|0);
      var $254=$253;
      var $255=(($254)|0);
      var $256=HEAP[$255];
      var $257=(($256)&65535);
      var $258=(($249+$257)|0);
      var $259=(($258) & 65535);
      $ofs=$259;
      __label__ = 62; break;
    case 44: 
      var $261=$3;
      var $262=(($261)&255);
      var $263=(($262)|0)==2;
      if ($263) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $265=$1;
      var $266=(($265+4)|0);
      var $267=(($266)|0);
      var $268=(($267+20)|0);
      var $269=$268;
      var $270=(($269)|0);
      var $271=HEAP[$270];
      var $272=(($271)&65535);
      var $273=$1;
      var $274=(($273+4)|0);
      var $275=(($274)|0);
      var $276=(($275+24)|0);
      var $277=$276;
      var $278=(($277)|0);
      var $279=HEAP[$278];
      var $280=(($279)&65535);
      var $281=(($272+$280)|0);
      var $282=(($281) & 65535);
      $ofs=$282;
      __label__ = 61; break;
    case 46: 
      var $284=$3;
      var $285=(($284)&255);
      var $286=(($285)|0)==3;
      if ($286) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $288=$1;
      var $289=(($288+4)|0);
      var $290=(($289)|0);
      var $291=(($290+20)|0);
      var $292=$291;
      var $293=(($292)|0);
      var $294=HEAP[$293];
      var $295=(($294)&65535);
      var $296=$1;
      var $297=(($296+4)|0);
      var $298=(($297)|0);
      var $299=(($298+28)|0);
      var $300=$299;
      var $301=(($300)|0);
      var $302=HEAP[$301];
      var $303=(($302)&65535);
      var $304=(($295+$303)|0);
      var $305=(($304) & 65535);
      $ofs=$305;
      __label__ = 60; break;
    case 48: 
      var $307=$3;
      var $308=(($307)&255);
      var $309=(($308)|0)==4;
      if ($309) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $311=$1;
      var $312=(($311+4)|0);
      var $313=(($312)|0);
      var $314=(($313+24)|0);
      var $315=$314;
      var $316=(($315)|0);
      var $317=HEAP[$316];
      $ofs=$317;
      __label__ = 59; break;
    case 50: 
      var $319=$3;
      var $320=(($319)&255);
      var $321=(($320)|0)==5;
      if ($321) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $323=$1;
      var $324=(($323+4)|0);
      var $325=(($324)|0);
      var $326=(($325+28)|0);
      var $327=$326;
      var $328=(($327)|0);
      var $329=HEAP[$328];
      $ofs=$329;
      __label__ = 58; break;
    case 52: 
      var $331=$3;
      var $332=(($331)&255);
      var $333=(($332)|0)==6;
      if ($333) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $335=$1;
      var $336=(($335+4)|0);
      var $337=(($336)|0);
      var $338=(($337+20)|0);
      var $339=$338;
      var $340=(($339)|0);
      var $341=HEAP[$340];
      $ofs=$341;
      __label__ = 57; break;
    case 54: 
      var $343=$3;
      var $344=(($343)&255);
      var $345=(($344)|0)==7;
      if ($345) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $347=$1;
      var $348=(($347+4)|0);
      var $349=(($348)|0);
      var $350=(($349+12)|0);
      var $351=$350;
      var $352=(($351)|0);
      var $353=HEAP[$352];
      $ofs=$353;
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      var $362=$2;
      var $363=(($362)&255);
      var $364=(($363)|0)==1;
      if ($364) { __label__ = 64; break; } else { __label__ = 67; break; }
    case 64: 
      var $366=$1;
      var $367=_softx86_fetch_exec_byte($366);
      var $368=(($367)&255);
      $xx=$368;
      var $369=$xx;
      var $370=(($369)&65535);
      var $371=$370 & 128;
      var $372=(($371)|0)!=0;
      if ($372) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      var $374=$xx;
      var $375=(($374)&65535);
      var $376=$375 | 65280;
      var $377=(($376) & 65535);
      $xx=$377;
      __label__ = 66; break;
    case 66: 
      __label__ = 68; break;
    case 67: 
      var $380=$1;
      var $381=_softx86_fetch_exec_byte($380);
      var $382=(($381)&255);
      $xx=$382;
      var $383=$1;
      var $384=_softx86_fetch_exec_byte($383);
      var $385=(($384)&255);
      var $386=$385 << 8;
      var $387=$xx;
      var $388=(($387)&65535);
      var $389=$388 | $386;
      var $390=(($389) & 65535);
      $xx=$390;
      __label__ = 68; break;
    case 68: 
      var $392=$ofs;
      var $393=(($392)&65535);
      var $394=$xx;
      var $395=(($394)&65535);
      var $396=(($393+$395)|0);
      var $397=$396 & 65535;
      var $398=(($397) & 65535);
      $ofs=$398;
      __label__ = 69; break;
    case 69: 
      var $400=$seg;
      var $401=(($400)&65535);
      var $402=$401 << 4;
      var $403=$ofs;
      var $404=(($403)&65535);
      var $405=(($402+$404)|0);
      $lo=$405;
      var $406=$1;
      var $407=$lo;
      var $408=(($tmp)|0);
      var $409=$4;
      var $410=_softx86_fetch($406, 0, $407, $408, $409);
      var $411=$5;
      var $412=$1;
      var $413=(($tmp)|0);
      var $414=$4;
      FUNCTION_TABLE[$411]($412, $413, $414);
      __label__ = 70; break;
    case 70: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modrmonly_memx["X"]=1;

function _sx86_exec_full_modsregrm_rw($ctx, $mod, $reg, $rm, $opswap, $op16) {
  var __stackBase__  = STACKTOP; STACKTOP += 2; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $regv;
      var $rmv=__stackBase__;
      var $seg;
      var $ofs;
      var $lo;
      var $xx;
      $1=$ctx;
      $2=$mod;
      $3=$reg;
      $4=$rm;
      $5=$opswap;
      $6=$op16;
      var $7=$3;
      var $8=(($7)&255);
      var $9=(($8)|0) >= 4;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 76; break;
    case 3: 
      var $12=$2;
      var $13=(($12)&255);
      var $14=(($13)|0)==3;
      if ($14) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $16=$3;
      var $17=(($16)&255);
      var $18=$1;
      var $19=(($18+4)|0);
      var $20=(($19+32)|0);
      var $21=(($20+($17<<3))|0);
      var $22=(($21)|0);
      var $23=HEAP[$22];
      $regv=$23;
      var $24=$4;
      var $25=(($24)&255);
      var $26=$1;
      var $27=(($26+4)|0);
      var $28=(($27)|0);
      var $29=(($28+($25<<2))|0);
      var $30=$29;
      var $31=(($30)|0);
      var $32=HEAP[$31];
      HEAP[$rmv]=$32;
      var $33=$5;
      var $34=(($33 << 24) >> 24)!=0;
      if ($34) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $36=$1;
      var $37=$3;
      var $38=(($37)&255);
      var $39=HEAP[$rmv];
      var $40=(($39)&65535);
      var $41=_softx86_setsegval($36, $38, $40);
      __label__ = 7; break;
    case 6: 
      var $43=$6;
      var $44=$1;
      var $45=HEAP[$rmv];
      var $46=$regv;
      var $47=FUNCTION_TABLE[$43]($44, $45, $46);
      var $48=$4;
      var $49=(($48)&255);
      var $50=$1;
      var $51=(($50+4)|0);
      var $52=(($51)|0);
      var $53=(($52+($49<<2))|0);
      var $54=$53;
      var $55=(($54)|0);
      HEAP[$55]=$47;
      __label__ = 7; break;
    case 7: 
      __label__ = 76; break;
    case 8: 
      var $58=$1;
      var $59=(($58+236)|0);
      var $60=HEAP[$59];
      var $61=(($60 << 24) >> 24)!=0;
      if ($61) { __label__ = 17; break; } else { __label__ = 9; break; }
    case 9: 
      var $63=$4;
      var $64=(($63)&255);
      var $65=(($64)|0)==2;
      if ($65) { __label__ = 14; break; } else { __label__ = 10; break; }
    case 10: 
      var $67=$4;
      var $68=(($67)&255);
      var $69=(($68)|0)==3;
      if ($69) { __label__ = 14; break; } else { __label__ = 11; break; }
    case 11: 
      var $71=$4;
      var $72=(($71)&255);
      var $73=(($72)|0)==6;
      if ($73) { __label__ = 12; break; } else { __label__ = 15; break; }
    case 12: 
      var $75=$2;
      var $76=(($75)&255);
      var $77=(($76)|0)==1;
      if ($77) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $79=$2;
      var $80=(($79)&255);
      var $81=(($80)|0)==2;
      if ($81) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $83=$1;
      var $84=(($83+4)|0);
      var $85=(($84+32)|0);
      var $86=(($85+16)|0);
      var $87=(($86)|0);
      var $88=HEAP[$87];
      $seg=$88;
      __label__ = 16; break;
    case 15: 
      var $90=$1;
      var $91=(($90+4)|0);
      var $92=(($91+32)|0);
      var $93=(($92+24)|0);
      var $94=(($93)|0);
      var $95=HEAP[$94];
      $seg=$95;
      __label__ = 16; break;
    case 16: 
      __label__ = 18; break;
    case 17: 
      var $98=$1;
      var $99=(($98+238)|0);
      var $100=HEAP[$99];
      $seg=$100;
      __label__ = 18; break;
    case 18: 
      var $102=$2;
      var $103=(($102)&255);
      var $104=(($103)|0)==0;
      if ($104) { __label__ = 19; break; } else { __label__ = 43; break; }
    case 19: 
      var $106=$4;
      var $107=(($106)&255);
      var $108=(($107)|0)==6;
      if ($108) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $110=$1;
      var $111=_softx86_fetch_exec_byte($110);
      var $112=(($111)&255);
      $ofs=$112;
      var $113=$1;
      var $114=_softx86_fetch_exec_byte($113);
      var $115=(($114)&255);
      var $116=$115 << 8;
      var $117=$ofs;
      var $118=(($117)&65535);
      var $119=$118 | $116;
      var $120=(($119) & 65535);
      $ofs=$120;
      __label__ = 42; break;
    case 21: 
      var $122=$4;
      var $123=(($122)&255);
      var $124=(($123)|0)==0;
      if ($124) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $126=$1;
      var $127=(($126+4)|0);
      var $128=(($127)|0);
      var $129=(($128+12)|0);
      var $130=$129;
      var $131=(($130)|0);
      var $132=HEAP[$131];
      var $133=(($132)&65535);
      var $134=$1;
      var $135=(($134+4)|0);
      var $136=(($135)|0);
      var $137=(($136+24)|0);
      var $138=$137;
      var $139=(($138)|0);
      var $140=HEAP[$139];
      var $141=(($140)&65535);
      var $142=(($133+$141)|0);
      var $143=(($142) & 65535);
      $ofs=$143;
      __label__ = 41; break;
    case 23: 
      var $145=$4;
      var $146=(($145)&255);
      var $147=(($146)|0)==1;
      if ($147) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $149=$1;
      var $150=(($149+4)|0);
      var $151=(($150)|0);
      var $152=(($151+12)|0);
      var $153=$152;
      var $154=(($153)|0);
      var $155=HEAP[$154];
      var $156=(($155)&65535);
      var $157=$1;
      var $158=(($157+4)|0);
      var $159=(($158)|0);
      var $160=(($159+28)|0);
      var $161=$160;
      var $162=(($161)|0);
      var $163=HEAP[$162];
      var $164=(($163)&65535);
      var $165=(($156+$164)|0);
      var $166=(($165) & 65535);
      $ofs=$166;
      __label__ = 40; break;
    case 25: 
      var $168=$4;
      var $169=(($168)&255);
      var $170=(($169)|0)==2;
      if ($170) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $172=$1;
      var $173=(($172+4)|0);
      var $174=(($173)|0);
      var $175=(($174+20)|0);
      var $176=$175;
      var $177=(($176)|0);
      var $178=HEAP[$177];
      var $179=(($178)&65535);
      var $180=$1;
      var $181=(($180+4)|0);
      var $182=(($181)|0);
      var $183=(($182+24)|0);
      var $184=$183;
      var $185=(($184)|0);
      var $186=HEAP[$185];
      var $187=(($186)&65535);
      var $188=(($179+$187)|0);
      var $189=(($188) & 65535);
      $ofs=$189;
      __label__ = 39; break;
    case 27: 
      var $191=$4;
      var $192=(($191)&255);
      var $193=(($192)|0)==3;
      if ($193) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $195=$1;
      var $196=(($195+4)|0);
      var $197=(($196)|0);
      var $198=(($197+20)|0);
      var $199=$198;
      var $200=(($199)|0);
      var $201=HEAP[$200];
      var $202=(($201)&65535);
      var $203=$1;
      var $204=(($203+4)|0);
      var $205=(($204)|0);
      var $206=(($205+28)|0);
      var $207=$206;
      var $208=(($207)|0);
      var $209=HEAP[$208];
      var $210=(($209)&65535);
      var $211=(($202+$210)|0);
      var $212=(($211) & 65535);
      $ofs=$212;
      __label__ = 38; break;
    case 29: 
      var $214=$4;
      var $215=(($214)&255);
      var $216=(($215)|0)==4;
      if ($216) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $218=$1;
      var $219=(($218+4)|0);
      var $220=(($219)|0);
      var $221=(($220+24)|0);
      var $222=$221;
      var $223=(($222)|0);
      var $224=HEAP[$223];
      $ofs=$224;
      __label__ = 37; break;
    case 31: 
      var $226=$4;
      var $227=(($226)&255);
      var $228=(($227)|0)==5;
      if ($228) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $230=$1;
      var $231=(($230+4)|0);
      var $232=(($231)|0);
      var $233=(($232+28)|0);
      var $234=$233;
      var $235=(($234)|0);
      var $236=HEAP[$235];
      $ofs=$236;
      __label__ = 36; break;
    case 33: 
      var $238=$4;
      var $239=(($238)&255);
      var $240=(($239)|0)==7;
      if ($240) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $242=$1;
      var $243=(($242+4)|0);
      var $244=(($243)|0);
      var $245=(($244+12)|0);
      var $246=$245;
      var $247=(($246)|0);
      var $248=HEAP[$247];
      $ofs=$248;
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 72; break;
    case 43: 
      var $258=$4;
      var $259=(($258)&255);
      var $260=(($259)|0)==0;
      if ($260) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $262=$1;
      var $263=(($262+4)|0);
      var $264=(($263)|0);
      var $265=(($264+12)|0);
      var $266=$265;
      var $267=(($266)|0);
      var $268=HEAP[$267];
      var $269=(($268)&65535);
      var $270=$1;
      var $271=(($270+4)|0);
      var $272=(($271)|0);
      var $273=(($272+24)|0);
      var $274=$273;
      var $275=(($274)|0);
      var $276=HEAP[$275];
      var $277=(($276)&65535);
      var $278=(($269+$277)|0);
      var $279=(($278) & 65535);
      $ofs=$279;
      __label__ = 66; break;
    case 45: 
      var $281=$4;
      var $282=(($281)&255);
      var $283=(($282)|0)==1;
      if ($283) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $285=$1;
      var $286=(($285+4)|0);
      var $287=(($286)|0);
      var $288=(($287+12)|0);
      var $289=$288;
      var $290=(($289)|0);
      var $291=HEAP[$290];
      var $292=(($291)&65535);
      var $293=$1;
      var $294=(($293+4)|0);
      var $295=(($294)|0);
      var $296=(($295+28)|0);
      var $297=$296;
      var $298=(($297)|0);
      var $299=HEAP[$298];
      var $300=(($299)&65535);
      var $301=(($292+$300)|0);
      var $302=(($301) & 65535);
      $ofs=$302;
      __label__ = 65; break;
    case 47: 
      var $304=$4;
      var $305=(($304)&255);
      var $306=(($305)|0)==2;
      if ($306) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $308=$1;
      var $309=(($308+4)|0);
      var $310=(($309)|0);
      var $311=(($310+20)|0);
      var $312=$311;
      var $313=(($312)|0);
      var $314=HEAP[$313];
      var $315=(($314)&65535);
      var $316=$1;
      var $317=(($316+4)|0);
      var $318=(($317)|0);
      var $319=(($318+24)|0);
      var $320=$319;
      var $321=(($320)|0);
      var $322=HEAP[$321];
      var $323=(($322)&65535);
      var $324=(($315+$323)|0);
      var $325=(($324) & 65535);
      $ofs=$325;
      __label__ = 64; break;
    case 49: 
      var $327=$4;
      var $328=(($327)&255);
      var $329=(($328)|0)==3;
      if ($329) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $331=$1;
      var $332=(($331+4)|0);
      var $333=(($332)|0);
      var $334=(($333+20)|0);
      var $335=$334;
      var $336=(($335)|0);
      var $337=HEAP[$336];
      var $338=(($337)&65535);
      var $339=$1;
      var $340=(($339+4)|0);
      var $341=(($340)|0);
      var $342=(($341+28)|0);
      var $343=$342;
      var $344=(($343)|0);
      var $345=HEAP[$344];
      var $346=(($345)&65535);
      var $347=(($338+$346)|0);
      var $348=(($347) & 65535);
      $ofs=$348;
      __label__ = 63; break;
    case 51: 
      var $350=$4;
      var $351=(($350)&255);
      var $352=(($351)|0)==4;
      if ($352) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $354=$1;
      var $355=(($354+4)|0);
      var $356=(($355)|0);
      var $357=(($356+24)|0);
      var $358=$357;
      var $359=(($358)|0);
      var $360=HEAP[$359];
      $ofs=$360;
      __label__ = 62; break;
    case 53: 
      var $362=$4;
      var $363=(($362)&255);
      var $364=(($363)|0)==5;
      if ($364) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $366=$1;
      var $367=(($366+4)|0);
      var $368=(($367)|0);
      var $369=(($368+28)|0);
      var $370=$369;
      var $371=(($370)|0);
      var $372=HEAP[$371];
      $ofs=$372;
      __label__ = 61; break;
    case 55: 
      var $374=$4;
      var $375=(($374)&255);
      var $376=(($375)|0)==6;
      if ($376) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $378=$1;
      var $379=(($378+4)|0);
      var $380=(($379)|0);
      var $381=(($380+20)|0);
      var $382=$381;
      var $383=(($382)|0);
      var $384=HEAP[$383];
      $ofs=$384;
      __label__ = 60; break;
    case 57: 
      var $386=$4;
      var $387=(($386)&255);
      var $388=(($387)|0)==7;
      if ($388) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $390=$1;
      var $391=(($390+4)|0);
      var $392=(($391)|0);
      var $393=(($392+12)|0);
      var $394=$393;
      var $395=(($394)|0);
      var $396=HEAP[$395];
      $ofs=$396;
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $405=$2;
      var $406=(($405)&255);
      var $407=(($406)|0)==1;
      if ($407) { __label__ = 67; break; } else { __label__ = 70; break; }
    case 67: 
      var $409=$1;
      var $410=_softx86_fetch_exec_byte($409);
      var $411=(($410)&255);
      $xx=$411;
      var $412=$xx;
      var $413=(($412)&65535);
      var $414=$413 & 128;
      var $415=(($414)|0)!=0;
      if ($415) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $417=$xx;
      var $418=(($417)&65535);
      var $419=$418 | 65280;
      var $420=(($419) & 65535);
      $xx=$420;
      __label__ = 69; break;
    case 69: 
      __label__ = 71; break;
    case 70: 
      var $423=$1;
      var $424=_softx86_fetch_exec_byte($423);
      var $425=(($424)&255);
      $xx=$425;
      var $426=$1;
      var $427=_softx86_fetch_exec_byte($426);
      var $428=(($427)&255);
      var $429=$428 << 8;
      var $430=$xx;
      var $431=(($430)&65535);
      var $432=$431 | $429;
      var $433=(($432) & 65535);
      $xx=$433;
      __label__ = 71; break;
    case 71: 
      var $435=$ofs;
      var $436=(($435)&65535);
      var $437=$xx;
      var $438=(($437)&65535);
      var $439=(($436+$438)|0);
      var $440=$439 & 65535;
      var $441=(($440) & 65535);
      $ofs=$441;
      __label__ = 72; break;
    case 72: 
      var $443=$3;
      var $444=(($443)&255);
      var $445=$1;
      var $446=(($445+4)|0);
      var $447=(($446+32)|0);
      var $448=(($447+($444<<3))|0);
      var $449=(($448)|0);
      var $450=HEAP[$449];
      $regv=$450;
      var $451=$seg;
      var $452=(($451)&65535);
      var $453=$452 << 4;
      var $454=$ofs;
      var $455=(($454)&65535);
      var $456=(($453+$455)|0);
      $lo=$456;
      var $457=$1;
      var $458=$lo;
      var $459=$rmv;
      var $460=_softx86_fetch($457, 0, $458, $459, 2);
      var $461=$5;
      var $462=(($461 << 24) >> 24)!=0;
      if ($462) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      var $464=$1;
      var $465=$3;
      var $466=(($465)&255);
      var $467=HEAP[$rmv];
      var $468=(($467)&65535);
      var $469=_softx86_setsegval($464, $466, $468);
      __label__ = 75; break;
    case 74: 
      var $471=$6;
      var $472=$1;
      var $473=HEAP[$rmv];
      var $474=$regv;
      var $475=FUNCTION_TABLE[$471]($472, $473, $474);
      HEAP[$rmv]=$475;
      var $476=$1;
      var $477=$lo;
      var $478=$rmv;
      var $479=_softx86_write($476, 0, $477, $478, 2);
      __label__ = 75; break;
    case 75: 
      __label__ = 76; break;
    case 76: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_exec_full_modsregrm_rw["X"]=1;

function _sx86_dec_full_modregrm($ctx, $is_word, $dat32, $mod, $reg, $rm, $op1, $op2) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $o;
      $1=$ctx;
      $2=$is_word;
      $3=$dat32;
      $4=$mod;
      $5=$reg;
      $6=$rm;
      $7=$op1;
      $8=$op2;
      var $9=$2;
      var $10=(($9 << 24) >> 24)!=0;
      if ($10) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $12=$3;
      var $13=(($12 << 24) >> 24)!=0;
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $15=$8;
      var $16=$5;
      var $17=(($16)&255);
      var $18=((_sx86_regs32+($17<<2))|0);
      var $19=HEAP[$18];
      var $20=_sprintf($15, ((STRING_TABLE.__str123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$19,tempInt));
      __label__ = 5; break;
    case 4: 
      var $22=$8;
      var $23=$5;
      var $24=(($23)&255);
      var $25=((_sx86_regs16+($24<<2))|0);
      var $26=HEAP[$25];
      var $27=_sprintf($22, ((STRING_TABLE.__str123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$26,tempInt));
      __label__ = 5; break;
    case 5: 
      __label__ = 7; break;
    case 6: 
      var $30=$8;
      var $31=$5;
      var $32=(($31)&255);
      var $33=((_sx86_regs8+($32<<2))|0);
      var $34=HEAP[$33];
      var $35=_sprintf($30, ((STRING_TABLE.__str123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$34,tempInt));
      __label__ = 7; break;
    case 7: 
      var $37=$4;
      var $38=(($37)&255);
      var $39=(($38)|0)==3;
      if ($39) { __label__ = 8; break; } else { __label__ = 15; break; }
    case 8: 
      var $41=$2;
      var $42=(($41 << 24) >> 24)!=0;
      if ($42) { __label__ = 9; break; } else { __label__ = 13; break; }
    case 9: 
      var $44=$3;
      var $45=(($44 << 24) >> 24)!=0;
      if ($45) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $47=$7;
      var $48=$6;
      var $49=(($48)&255);
      var $50=((_sx86_regs32+($49<<2))|0);
      var $51=HEAP[$50];
      var $52=_sprintf($47, ((STRING_TABLE.__str123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$51,tempInt));
      __label__ = 12; break;
    case 11: 
      var $54=$7;
      var $55=$6;
      var $56=(($55)&255);
      var $57=((_sx86_regs16+($56<<2))|0);
      var $58=HEAP[$57];
      var $59=_sprintf($54, ((STRING_TABLE.__str123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$58,tempInt));
      __label__ = 12; break;
    case 12: 
      __label__ = 14; break;
    case 13: 
      var $62=$7;
      var $63=$6;
      var $64=(($63)&255);
      var $65=((_sx86_regs8+($64<<2))|0);
      var $66=HEAP[$65];
      var $67=_sprintf($62, ((STRING_TABLE.__str123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$66,tempInt));
      __label__ = 14; break;
    case 14: 
      __label__ = 29; break;
    case 15: 
      var $70=$4;
      var $71=(($70)&255);
      var $72=(($71)|0)==0;
      if ($72) { __label__ = 16; break; } else { __label__ = 20; break; }
    case 16: 
      var $74=$6;
      var $75=(($74)&255);
      var $76=(($75)|0)==6;
      if ($76) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $78=$1;
      var $79=_softx86_fetch_dec_byte($78);
      var $80=(($79)&255);
      $o=$80;
      var $81=$1;
      var $82=_softx86_fetch_dec_byte($81);
      var $83=(($82)&255);
      var $84=$83 << 8;
      var $85=$o;
      var $86=(($85)&65535);
      var $87=$86 | $84;
      var $88=(($87) & 65535);
      $o=$88;
      var $89=$7;
      var $90=$o;
      var $91=(($90)&65535);
      var $92=_sprintf($89, ((STRING_TABLE.__str1124)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$91,tempInt));
      __label__ = 19; break;
    case 18: 
      var $94=$7;
      var $95=$6;
      var $96=(($95)&255);
      var $97=((_sx86_regsaddr16_16+($96<<2))|0);
      var $98=HEAP[$97];
      var $99=_sprintf($94, ((STRING_TABLE.__str2125)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$98,tempInt));
      __label__ = 19; break;
    case 19: 
      __label__ = 28; break;
    case 20: 
      var $102=$4;
      var $103=(($102)&255);
      var $104=(($103)|0)==1;
      if ($104) { __label__ = 21; break; } else { __label__ = 24; break; }
    case 21: 
      var $106=$1;
      var $107=_softx86_fetch_dec_byte($106);
      var $108=(($107)&255);
      $o=$108;
      var $109=$o;
      var $110=(($109)&65535);
      var $111=$110 & 128;
      var $112=(($111)|0)!=0;
      if ($112) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $114=$o;
      var $115=(($114)&65535);
      var $116=$115 | 65280;
      var $117=(($116) & 65535);
      $o=$117;
      __label__ = 23; break;
    case 23: 
      __label__ = 27; break;
    case 24: 
      var $120=$4;
      var $121=(($120)&255);
      var $122=(($121)|0)==2;
      if ($122) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $124=$1;
      var $125=_softx86_fetch_dec_byte($124);
      var $126=(($125)&255);
      $o=$126;
      var $127=$1;
      var $128=_softx86_fetch_dec_byte($127);
      var $129=(($128)&255);
      var $130=$129 << 8;
      var $131=$o;
      var $132=(($131)&65535);
      var $133=$132 | $130;
      var $134=(($133) & 65535);
      $o=$134;
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $137=$7;
      var $138=$6;
      var $139=(($138)&255);
      var $140=((_sx86_regsaddr16_16+($139<<2))|0);
      var $141=HEAP[$140];
      var $142=$o;
      var $143=(($142)&65535);
      var $144=_sprintf($137, ((STRING_TABLE.__str3126)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$141,HEAP[tempInt+4]=$143,tempInt));
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_dec_full_modregrm["X"]=1;

function _op_mov8($ctx, $src, $val) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$ctx;
  $2=$src;
  $3=$val;
  var $4=$3;
  ;
  return $4;
}


function _op_mov16($ctx, $src, $val) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$ctx;
  $2=$src;
  $3=$val;
  var $4=$3;
  ;
  return $4;
}


function _op_mov32($ctx, $src, $val) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$ctx;
  $2=$src;
  $3=$val;
  var $4=$3;
  ;
  return $4;
}


function _sx86_dec_full_modrmonly($ctx, $is_word, $dat32, $mod, $rm, $op1) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $o;
      $1=$ctx;
      $2=$is_word;
      $3=$dat32;
      $4=$mod;
      $5=$rm;
      $6=$op1;
      var $7=$4;
      var $8=(($7)&255);
      var $9=(($8)|0)==3;
      if ($9) { __label__ = 2; break; } else { __label__ = 9; break; }
    case 2: 
      var $11=$2;
      var $12=(($11 << 24) >> 24)!=0;
      if ($12) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $14=$3;
      var $15=(($14 << 24) >> 24)!=0;
      if ($15) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $17=$6;
      var $18=$5;
      var $19=(($18)&255);
      var $20=((_sx86_regs32+($19<<2))|0);
      var $21=HEAP[$20];
      var $22=_sprintf($17, ((STRING_TABLE.__str123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$21,tempInt));
      __label__ = 6; break;
    case 5: 
      var $24=$6;
      var $25=$5;
      var $26=(($25)&255);
      var $27=((_sx86_regs16+($26<<2))|0);
      var $28=HEAP[$27];
      var $29=_sprintf($24, ((STRING_TABLE.__str123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$28,tempInt));
      __label__ = 6; break;
    case 6: 
      __label__ = 8; break;
    case 7: 
      var $32=$6;
      var $33=$5;
      var $34=(($33)&255);
      var $35=((_sx86_regs8+($34<<2))|0);
      var $36=HEAP[$35];
      var $37=_sprintf($32, ((STRING_TABLE.__str123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$36,tempInt));
      __label__ = 8; break;
    case 8: 
      __label__ = 23; break;
    case 9: 
      var $40=$4;
      var $41=(($40)&255);
      var $42=(($41)|0)==0;
      if ($42) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: 
      var $44=$5;
      var $45=(($44)&255);
      var $46=(($45)|0)==6;
      if ($46) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $48=$1;
      var $49=_softx86_fetch_dec_byte($48);
      var $50=(($49)&255);
      $o=$50;
      var $51=$1;
      var $52=_softx86_fetch_dec_byte($51);
      var $53=(($52)&255);
      var $54=$53 << 8;
      var $55=$o;
      var $56=(($55)&65535);
      var $57=$56 | $54;
      var $58=(($57) & 65535);
      $o=$58;
      var $59=$6;
      var $60=$o;
      var $61=(($60)&65535);
      var $62=_sprintf($59, ((STRING_TABLE.__str1124)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$61,tempInt));
      __label__ = 13; break;
    case 12: 
      var $64=$6;
      var $65=$5;
      var $66=(($65)&255);
      var $67=((_sx86_regsaddr16_16+($66<<2))|0);
      var $68=HEAP[$67];
      var $69=_sprintf($64, ((STRING_TABLE.__str2125)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$68,tempInt));
      __label__ = 13; break;
    case 13: 
      __label__ = 22; break;
    case 14: 
      var $72=$4;
      var $73=(($72)&255);
      var $74=(($73)|0)==1;
      if ($74) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $76=$1;
      var $77=_softx86_fetch_dec_byte($76);
      var $78=(($77)&255);
      $o=$78;
      var $79=$o;
      var $80=(($79)&65535);
      var $81=$80 & 128;
      var $82=(($81)|0)!=0;
      if ($82) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $84=$o;
      var $85=(($84)&65535);
      var $86=$85 | 65280;
      var $87=(($86) & 65535);
      $o=$87;
      __label__ = 17; break;
    case 17: 
      __label__ = 21; break;
    case 18: 
      var $90=$4;
      var $91=(($90)&255);
      var $92=(($91)|0)==2;
      if ($92) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $94=$1;
      var $95=_softx86_fetch_dec_byte($94);
      var $96=(($95)&255);
      $o=$96;
      var $97=$1;
      var $98=_softx86_fetch_dec_byte($97);
      var $99=(($98)&255);
      var $100=$99 << 8;
      var $101=$o;
      var $102=(($101)&65535);
      var $103=$102 | $100;
      var $104=(($103) & 65535);
      $o=$104;
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $107=$6;
      var $108=$5;
      var $109=(($108)&255);
      var $110=((_sx86_regsaddr16_16+($109<<2))|0);
      var $111=HEAP[$110];
      var $112=$o;
      var $113=(($112)&65535);
      var $114=_sprintf($107, ((STRING_TABLE.__str3126)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$111,HEAP[tempInt+4]=$113,tempInt));
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_dec_full_modrmonly["X"]=1;

function _sx86_dec_full_modsregrm($ctx, $mod, $reg, $rm, $op1, $op2) {
  var __stackBase__  = STACKTOP; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $o;
      $1=$ctx;
      $2=$mod;
      $3=$reg;
      $4=$rm;
      $5=$op1;
      $6=$op2;
      var $7=$6;
      var $8=$3;
      var $9=(($8)&255);
      var $10=((_sx86_segregs+($9<<2))|0);
      var $11=HEAP[$10];
      var $12=_sprintf($7, ((STRING_TABLE.__str123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$11,tempInt));
      var $13=$2;
      var $14=(($13)&255);
      var $15=(($14)|0)==3;
      if ($15) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $17=$5;
      var $18=$4;
      var $19=(($18)&255);
      var $20=((_sx86_regs16+($19<<2))|0);
      var $21=HEAP[$20];
      var $22=_sprintf($17, ((STRING_TABLE.__str123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$21,tempInt));
      __label__ = 17; break;
    case 3: 
      var $24=$2;
      var $25=(($24)&255);
      var $26=(($25)|0)==0;
      if ($26) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $28=$4;
      var $29=(($28)&255);
      var $30=(($29)|0)==6;
      if ($30) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $32=$1;
      var $33=_softx86_fetch_dec_byte($32);
      var $34=(($33)&255);
      $o=$34;
      var $35=$1;
      var $36=_softx86_fetch_dec_byte($35);
      var $37=(($36)&255);
      var $38=$37 << 8;
      var $39=$o;
      var $40=(($39)&65535);
      var $41=$40 | $38;
      var $42=(($41) & 65535);
      $o=$42;
      var $43=$5;
      var $44=$o;
      var $45=(($44)&65535);
      var $46=_sprintf($43, ((STRING_TABLE.__str1124)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$45,tempInt));
      __label__ = 7; break;
    case 6: 
      var $48=$5;
      var $49=$4;
      var $50=(($49)&255);
      var $51=((_sx86_regsaddr16_16+($50<<2))|0);
      var $52=HEAP[$51];
      var $53=_sprintf($48, ((STRING_TABLE.__str2125)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$52,tempInt));
      __label__ = 7; break;
    case 7: 
      __label__ = 16; break;
    case 8: 
      var $56=$2;
      var $57=(($56)&255);
      var $58=(($57)|0)==1;
      if ($58) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $60=$1;
      var $61=_softx86_fetch_dec_byte($60);
      var $62=(($61)&255);
      $o=$62;
      var $63=$o;
      var $64=(($63)&65535);
      var $65=$64 & 128;
      var $66=(($65)|0)!=0;
      if ($66) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $68=$o;
      var $69=(($68)&65535);
      var $70=$69 | 65280;
      var $71=(($70) & 65535);
      $o=$71;
      __label__ = 11; break;
    case 11: 
      __label__ = 15; break;
    case 12: 
      var $74=$2;
      var $75=(($74)&255);
      var $76=(($75)|0)==2;
      if ($76) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $78=$1;
      var $79=_softx86_fetch_dec_byte($78);
      var $80=(($79)&255);
      $o=$80;
      var $81=$1;
      var $82=_softx86_fetch_dec_byte($81);
      var $83=(($82)&255);
      var $84=$83 << 8;
      var $85=$o;
      var $86=(($85)&65535);
      var $87=$86 | $84;
      var $88=(($87) & 65535);
      $o=$88;
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $91=$5;
      var $92=$4;
      var $93=(($92)&255);
      var $94=((_sx86_regsaddr16_16+($93<<2))|0);
      var $95=HEAP[$94];
      var $96=$o;
      var $97=(($96)&65535);
      var $98=_sprintf($91, ((STRING_TABLE.__str3126)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$95,HEAP[tempInt+4]=$97,tempInt));
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sx86_dec_full_modsregrm["X"]=1;

function _Sfx86OpcodeExec_mov($opcode, $ctx) {
  var __stackBase__  = STACKTOP; STACKTOP += 6; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $lo;
      var $seg;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $opswap2;
      var $mod3;
      var $reg4;
      var $rm5;
      var $o;
      var $mem=__stackBase__;
      var $mem6=__stackBase__+2;
      var $o7;
      var $mem8=__stackBase__+3;
      var $mem9=__stackBase__+5;
      var $b;
      var $w;
      $2=$opcode;
      $3=$ctx;
      var $4=$3;
      var $5=(($4+236)|0);
      var $6=HEAP[$5];
      var $7=(($6 << 24) >> 24)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $9=$3;
      var $10=(($9+4)|0);
      var $11=(($10+32)|0);
      var $12=(($11+24)|0);
      var $13=(($12)|0);
      var $14=HEAP[$13];
      $seg=$14;
      __label__ = 4; break;
    case 3: 
      var $16=$3;
      var $17=(($16+238)|0);
      var $18=HEAP[$17];
      $seg=$18;
      __label__ = 4; break;
    case 4: 
      var $20=$2;
      var $21=(($20)&255);
      var $22=$21 & 252;
      var $23=(($22)|0)==136;
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $25=$2;
      var $26=(($25)&255);
      var $27=$26 & 1;
      var $28=(($27) & 255);
      $w16=$28;
      var $29=$2;
      var $30=(($29)&255);
      var $31=$30 & 2;
      var $32=$31 >> 1;
      var $33=(($32) & 255);
      $opswap=$33;
      var $34=$3;
      var $35=_softx86_fetch_exec_byte($34);
      $x=$35;
      var $36=$x;
      var $37=(($36)&255);
      var $38=$37 >> 6;
      var $39=(($38) & 255);
      $mod=$39;
      var $40=$x;
      var $41=(($40)&255);
      var $42=$41 >> 3;
      var $43=$42 & 7;
      var $44=(($43) & 255);
      $reg=$44;
      var $45=$x;
      var $46=(($45)&255);
      var $47=$46 & 7;
      var $48=(($47) & 255);
      $rm=$48;
      var $49=$3;
      var $50=$w16;
      var $51=$mod;
      var $52=$reg;
      var $53=$rm;
      var $54=$opswap;
      _sx86_exec_full_modregrm_rw($49, $50, 0, $51, $52, $53, $54, 52, 54, 56);
      $1=1;
      __label__ = 29; break;
    case 6: 
      var $56=$2;
      var $57=(($56)&255);
      var $58=(($57)|0)==140;
      if ($58) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $60=$2;
      var $61=(($60)&255);
      var $62=(($61)|0)==142;
      if ($62) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $64=$2;
      var $65=(($64)&255);
      var $66=$65 & 2;
      var $67=$66 >> 1;
      var $68=(($67) & 255);
      $opswap2=$68;
      var $69=$3;
      var $70=_softx86_fetch_exec_byte($69);
      $x1=$70;
      var $71=$x1;
      var $72=(($71)&255);
      var $73=$72 >> 6;
      var $74=(($73) & 255);
      $mod3=$74;
      var $75=$x1;
      var $76=(($75)&255);
      var $77=$76 >> 3;
      var $78=$77 & 7;
      var $79=(($78) & 255);
      $reg4=$79;
      var $80=$x1;
      var $81=(($80)&255);
      var $82=$81 & 7;
      var $83=(($82) & 255);
      $rm5=$83;
      var $84=$3;
      var $85=$mod3;
      var $86=$reg4;
      var $87=$rm5;
      var $88=$opswap2;
      _sx86_exec_full_modsregrm_rw($84, $85, $86, $87, $88, 54);
      $1=1;
      __label__ = 29; break;
    case 9: 
      var $90=$2;
      var $91=(($90)&255);
      var $92=$91 & 254;
      var $93=(($92)|0)==160;
      if ($93) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: 
      var $95=$3;
      var $96=_softx86_fetch_exec_byte($95);
      var $97=(($96)&255);
      $o=$97;
      var $98=$3;
      var $99=_softx86_fetch_exec_byte($98);
      var $100=(($99)&255);
      var $101=$100 << 8;
      var $102=$o;
      var $103=(($102)&65535);
      var $104=$103 | $101;
      var $105=(($104) & 65535);
      $o=$105;
      var $106=$seg;
      var $107=(($106)&65535);
      var $108=$107 << 4;
      var $109=$o;
      var $110=(($109)&65535);
      var $111=(($108+$110)|0);
      $lo=$111;
      var $112=$2;
      var $113=(($112)&255);
      var $114=$113 & 1;
      var $115=(($114)|0)!=0;
      if ($115) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $117=$3;
      var $118=$lo;
      var $119=$mem;
      var $120=_softx86_fetch($117, 0, $118, $119, 2);
      var $121=HEAP[$mem];
      var $122=$3;
      var $123=(($122+4)|0);
      var $124=(($123)|0);
      var $125=(($124)|0);
      var $126=$125;
      var $127=(($126)|0);
      HEAP[$127]=$121;
      __label__ = 13; break;
    case 12: 
      var $129=$3;
      var $130=$lo;
      var $131=_softx86_fetch($129, 0, $130, $mem6, 1);
      var $132=HEAP[$mem6];
      var $133=$3;
      var $134=(($133+4)|0);
      var $135=(($134)|0);
      var $136=(($135)|0);
      var $137=$136;
      var $138=(($137)|0);
      HEAP[$138]=$132;
      __label__ = 13; break;
    case 13: 
      $1=1;
      __label__ = 29; break;
    case 14: 
      var $141=$2;
      var $142=(($141)&255);
      var $143=$142 & 254;
      var $144=(($143)|0)==162;
      if ($144) { __label__ = 15; break; } else { __label__ = 19; break; }
    case 15: 
      var $146=$3;
      var $147=_softx86_fetch_exec_byte($146);
      var $148=(($147)&255);
      $o7=$148;
      var $149=$3;
      var $150=_softx86_fetch_exec_byte($149);
      var $151=(($150)&255);
      var $152=$151 << 8;
      var $153=$o7;
      var $154=(($153)&65535);
      var $155=$154 | $152;
      var $156=(($155) & 65535);
      $o7=$156;
      var $157=$seg;
      var $158=(($157)&65535);
      var $159=$158 << 4;
      var $160=$o7;
      var $161=(($160)&65535);
      var $162=(($159+$161)|0);
      $lo=$162;
      var $163=$2;
      var $164=(($163)&255);
      var $165=$164 & 1;
      var $166=(($165)|0)!=0;
      if ($166) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $168=$3;
      var $169=(($168+4)|0);
      var $170=(($169)|0);
      var $171=(($170)|0);
      var $172=$171;
      var $173=(($172)|0);
      var $174=HEAP[$173];
      HEAP[$mem8]=$174;
      var $175=$3;
      var $176=$lo;
      var $177=$mem8;
      var $178=_softx86_write($175, 0, $176, $177, 2);
      __label__ = 18; break;
    case 17: 
      var $180=$3;
      var $181=(($180+4)|0);
      var $182=(($181)|0);
      var $183=(($182)|0);
      var $184=$183;
      var $185=(($184)|0);
      var $186=HEAP[$185];
      HEAP[$mem9]=$186;
      var $187=$3;
      var $188=$lo;
      var $189=_softx86_write($187, 0, $188, $mem9, 1);
      __label__ = 18; break;
    case 18: 
      $1=1;
      __label__ = 29; break;
    case 19: 
      var $192=$2;
      var $193=(($192)&255);
      var $194=$193 & 248;
      var $195=(($194)|0)==176;
      if ($195) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $197=$3;
      var $198=_softx86_fetch_exec_byte($197);
      $b=$198;
      var $199=$b;
      var $200=$2;
      var $201=(($200)&255);
      var $202=(($201-176)|0);
      var $203=$3;
      var $204=(($203+204)|0);
      var $205=(($204+($202<<2))|0);
      var $206=HEAP[$205];
      HEAP[$206]=$199;
      $1=1;
      __label__ = 29; break;
    case 21: 
      var $208=$2;
      var $209=(($208)&255);
      var $210=$209 & 248;
      var $211=(($210)|0)==184;
      if ($211) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $213=$3;
      var $214=_softx86_fetch_exec_byte($213);
      var $215=(($214)&255);
      $w=$215;
      var $216=$3;
      var $217=_softx86_fetch_exec_byte($216);
      var $218=(($217)&255);
      var $219=$218 << 8;
      var $220=$w;
      var $221=(($220)&65535);
      var $222=$221 | $219;
      var $223=(($222) & 65535);
      $w=$223;
      var $224=$w;
      var $225=$2;
      var $226=(($225)&255);
      var $227=(($226-184)|0);
      var $228=$3;
      var $229=(($228+4)|0);
      var $230=(($229)|0);
      var $231=(($230+($227<<2))|0);
      var $232=$231;
      var $233=(($232)|0);
      HEAP[$233]=$224;
      $1=1;
      __label__ = 29; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      $1=0;
      __label__ = 29; break;
    case 29: 
      var $241=$1;
      STACKTOP = __stackBase__;
      return $241;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_mov["X"]=1;

function _Sfx86OpcodeDec_mov($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $opswap2;
      var $mod3;
      var $reg4;
      var $rm5;
      var $o;
      var $o6;
      var $b;
      var $w;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 252;
      var $8=(($7)|0)==136;
      if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$2;
      var $15=(($14)&255);
      var $16=$15 & 2;
      var $17=$16 >> 1;
      var $18=(($17) & 255);
      $opswap=$18;
      var $19=$3;
      var $20=_softx86_fetch_dec_byte($19);
      $x=$20;
      var $21=$x;
      var $22=(($21)&255);
      var $23=$22 >> 6;
      var $24=(($23) & 255);
      $mod=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 >> 3;
      var $28=$27 & 7;
      var $29=(($28) & 255);
      $reg=$29;
      var $30=$x;
      var $31=(($30)&255);
      var $32=$31 & 7;
      var $33=(($32) & 255);
      $rm=$33;
      var $34=$3;
      var $35=$w16;
      var $36=$mod;
      var $37=$reg;
      var $38=$rm;
      _sx86_dec_full_modregrm($34, $35, 0, $36, $37, $38, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $39=$opswap;
      var $40=(($39 << 24) >> 24)!=0;
      if ($40) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $42=$4;
      var $43=_sprintf($42, ((STRING_TABLE.__str155)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      __label__ = 5; break;
    case 4: 
      var $45=$4;
      var $46=_sprintf($45, ((STRING_TABLE.__str155)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=((_op2_tmp)|0),tempInt));
      __label__ = 5; break;
    case 5: 
      $1=1;
      __label__ = 26; break;
    case 6: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=(($50)|0)==140;
      if ($51) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $53=$2;
      var $54=(($53)&255);
      var $55=(($54)|0)==142;
      if ($55) { __label__ = 8; break; } else { __label__ = 12; break; }
    case 8: 
      var $57=$2;
      var $58=(($57)&255);
      var $59=$58 & 2;
      var $60=$59 >> 1;
      var $61=(($60) & 255);
      $opswap2=$61;
      var $62=$3;
      var $63=_softx86_fetch_dec_byte($62);
      $x1=$63;
      var $64=$x1;
      var $65=(($64)&255);
      var $66=$65 >> 6;
      var $67=(($66) & 255);
      $mod3=$67;
      var $68=$x1;
      var $69=(($68)&255);
      var $70=$69 >> 3;
      var $71=$70 & 7;
      var $72=(($71) & 255);
      $reg4=$72;
      var $73=$x1;
      var $74=(($73)&255);
      var $75=$74 & 7;
      var $76=(($75) & 255);
      $rm5=$76;
      var $77=$3;
      var $78=$mod3;
      var $79=$reg4;
      var $80=$rm5;
      _sx86_dec_full_modsregrm($77, $78, $79, $80, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $81=$opswap2;
      var $82=(($81 << 24) >> 24)!=0;
      if ($82) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $84=$4;
      var $85=_sprintf($84, ((STRING_TABLE.__str155)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      __label__ = 11; break;
    case 10: 
      var $87=$4;
      var $88=_sprintf($87, ((STRING_TABLE.__str155)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=((_op2_tmp)|0),tempInt));
      __label__ = 11; break;
    case 11: 
      $1=1;
      __label__ = 26; break;
    case 12: 
      var $91=$2;
      var $92=(($91)&255);
      var $93=$92 & 254;
      var $94=(($93)|0)==160;
      if ($94) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $96=$3;
      var $97=_softx86_fetch_dec_byte($96);
      var $98=(($97)&255);
      $o=$98;
      var $99=$3;
      var $100=_softx86_fetch_dec_byte($99);
      var $101=(($100)&255);
      var $102=$101 << 8;
      var $103=$o;
      var $104=(($103)&65535);
      var $105=$104 | $102;
      var $106=(($105) & 65535);
      $o=$106;
      var $107=$4;
      var $108=$2;
      var $109=(($108)&255);
      var $110=(($109)|0)==161;
      var $111=$110 ? (((STRING_TABLE.__str2157)|0)) : (((STRING_TABLE.__str3158)|0));
      var $112=$o;
      var $113=(($112)&65535);
      var $114=_sprintf($107, ((STRING_TABLE.__str1156)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$111,HEAP[tempInt+4]=$113,tempInt));
      $1=1;
      __label__ = 26; break;
    case 14: 
      var $116=$2;
      var $117=(($116)&255);
      var $118=$117 & 254;
      var $119=(($118)|0)==162;
      if ($119) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $121=$3;
      var $122=_softx86_fetch_dec_byte($121);
      var $123=(($122)&255);
      $o6=$123;
      var $124=$3;
      var $125=_softx86_fetch_dec_byte($124);
      var $126=(($125)&255);
      var $127=$126 << 8;
      var $128=$o6;
      var $129=(($128)&65535);
      var $130=$129 | $127;
      var $131=(($130) & 65535);
      $o6=$131;
      var $132=$4;
      var $133=$o6;
      var $134=(($133)&65535);
      var $135=$2;
      var $136=(($135)&255);
      var $137=(($136)|0)==163;
      var $138=$137 ? (((STRING_TABLE.__str2157)|0)) : (((STRING_TABLE.__str3158)|0));
      var $139=_sprintf($132, ((STRING_TABLE.__str4159)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$134,HEAP[tempInt+4]=$138,tempInt));
      $1=1;
      __label__ = 26; break;
    case 16: 
      var $141=$2;
      var $142=(($141)&255);
      var $143=$142 & 248;
      var $144=(($143)|0)==176;
      if ($144) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $146=$3;
      var $147=_softx86_fetch_dec_byte($146);
      $b=$147;
      var $148=$4;
      var $149=$2;
      var $150=(($149)&255);
      var $151=(($150-176)|0);
      var $152=((_sx86_regs8+($151<<2))|0);
      var $153=HEAP[$152];
      var $154=$b;
      var $155=(($154)&255);
      var $156=_sprintf($148, ((STRING_TABLE.__str5160)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$153,HEAP[tempInt+4]=$155,tempInt));
      $1=1;
      __label__ = 26; break;
    case 18: 
      var $158=$2;
      var $159=(($158)&255);
      var $160=$159 & 248;
      var $161=(($160)|0)==184;
      if ($161) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $163=$3;
      var $164=_softx86_fetch_dec_byte($163);
      var $165=(($164)&255);
      $w=$165;
      var $166=$3;
      var $167=_softx86_fetch_dec_byte($166);
      var $168=(($167)&255);
      var $169=$168 << 8;
      var $170=$w;
      var $171=(($170)&65535);
      var $172=$171 | $169;
      var $173=(($172) & 65535);
      $w=$173;
      var $174=$4;
      var $175=$2;
      var $176=(($175)&255);
      var $177=(($176-184)|0);
      var $178=((_sx86_regs16+($177<<2))|0);
      var $179=HEAP[$178];
      var $180=$w;
      var $181=(($180)&65535);
      var $182=_sprintf($174, ((STRING_TABLE.__str6161)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$179,HEAP[tempInt+4]=$181,tempInt));
      $1=1;
      __label__ = 26; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      $1=0;
      __label__ = 26; break;
    case 26: 
      var $190=$1;
      ;
      return $190;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_mov["X"]=1;

function _Sfx86OpcodeExec_xlat($opcode, $ctx) {
  var __stackBase__  = STACKTOP; STACKTOP += 1; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $seg;
      var $d=__stackBase__;
      var $ofs;
      $2=$opcode;
      $3=$ctx;
      var $4=$3;
      var $5=(($4+236)|0);
      var $6=HEAP[$5];
      var $7=(($6 << 24) >> 24)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $9=$3;
      var $10=(($9+4)|0);
      var $11=(($10+32)|0);
      var $12=(($11+24)|0);
      var $13=(($12)|0);
      var $14=HEAP[$13];
      $seg=$14;
      __label__ = 4; break;
    case 3: 
      var $16=$3;
      var $17=(($16+238)|0);
      var $18=HEAP[$17];
      $seg=$18;
      __label__ = 4; break;
    case 4: 
      var $20=$2;
      var $21=(($20)&255);
      var $22=$21 & 252;
      var $23=(($22)|0)==215;
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $25=$3;
      var $26=(($25+4)|0);
      var $27=(($26)|0);
      var $28=(($27+12)|0);
      var $29=$28;
      var $30=(($29)|0);
      var $31=HEAP[$30];
      var $32=(($31)&65535);
      $ofs=$32;
      var $33=$3;
      var $34=(($33+4)|0);
      var $35=(($34)|0);
      var $36=(($35)|0);
      var $37=$36;
      var $38=(($37)|0);
      var $39=HEAP[$38];
      var $40=(($39)&255);
      var $41=$ofs;
      var $42=(($41+$40)|0);
      $ofs=$42;
      var $43=$ofs;
      var $44=$43 & 65535;
      $ofs=$44;
      var $45=$seg;
      var $46=(($45)&65535);
      var $47=$46 << 4;
      var $48=$ofs;
      var $49=(($47+$48)|0);
      $ofs=$49;
      var $50=$3;
      var $51=$ofs;
      var $52=_softx86_fetch($50, 0, $51, $d, 1);
      var $53=HEAP[$d];
      var $54=$3;
      var $55=(($54+4)|0);
      var $56=(($55)|0);
      var $57=(($56)|0);
      var $58=$57;
      var $59=(($58)|0);
      HEAP[$59]=$53;
      $1=1;
      __label__ = 7; break;
    case 6: 
      $1=0;
      __label__ = 7; break;
    case 7: 
      var $62=$1;
      STACKTOP = __stackBase__;
      return $62;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_xlat["X"]=1;

function _Sfx86OpcodeDec_xlat($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 252;
      var $8=(($7)|0)==215;
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $10=$4;
      var $11=_strcpy($10, ((STRING_TABLE.__str7162)|0));
      $1=1;
      __label__ = 4; break;
    case 3: 
      $1=0;
      __label__ = 4; break;
    case 4: 
      var $14=$1;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}


function _op_les16($ctx, $seg, $ofs) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$ctx;
  $2=$seg;
  $3=$ofs;
  var $4=$1;
  var $5=$2;
  var $6=(($5)&65535);
  var $7=_softx86_setsegval($4, 0, $6);
  var $8=$3;
  ;
  return $8;
}


function _op_les32($ctx, $seg, $ofs) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$ctx;
  $2=$seg;
  $3=$ofs;
  var $4=$1;
  var $5=$2;
  var $6=_softx86_setsegval($4, 0, $5);
  var $7=$3;
  ;
  return $7;
}


function _op_lds16($ctx, $seg, $ofs) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$ctx;
  $2=$seg;
  $3=$ofs;
  var $4=$1;
  var $5=$2;
  var $6=(($5)&65535);
  var $7=_softx86_setsegval($4, 3, $6);
  var $8=$3;
  ;
  return $8;
}


function _op_lds32($ctx, $seg, $ofs) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$ctx;
  $2=$seg;
  $3=$ofs;
  var $4=$1;
  var $5=$2;
  var $6=_softx86_setsegval($4, 3, $5);
  var $7=$3;
  ;
  return $7;
}


function _Sfx86OpcodeExec_les($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $mod2;
      var $reg3;
      var $rm4;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==196;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$3;
      var $9=_softx86_fetch_exec_byte($8);
      $x=$9;
      var $10=$x;
      var $11=(($10)&255);
      var $12=$11 >> 6;
      var $13=(($12) & 255);
      $mod=$13;
      var $14=$x;
      var $15=(($14)&255);
      var $16=$15 >> 3;
      var $17=$16 & 7;
      var $18=(($17) & 255);
      $reg=$18;
      var $19=$x;
      var $20=(($19)&255);
      var $21=$20 & 7;
      var $22=(($21) & 255);
      $rm=$22;
      var $23=$3;
      var $24=$mod;
      var $25=$reg;
      var $26=$rm;
      _sx86_exec_full_modregrm_far($23, 0, $24, $25, $26, 58, 60);
      $1=1;
      __label__ = 6; break;
    case 3: 
      var $28=$2;
      var $29=(($28)&255);
      var $30=(($29)|0)==197;
      if ($30) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $32=$3;
      var $33=_softx86_fetch_exec_byte($32);
      $x1=$33;
      var $34=$x1;
      var $35=(($34)&255);
      var $36=$35 >> 6;
      var $37=(($36) & 255);
      $mod2=$37;
      var $38=$x1;
      var $39=(($38)&255);
      var $40=$39 >> 3;
      var $41=$40 & 7;
      var $42=(($41) & 255);
      $reg3=$42;
      var $43=$x1;
      var $44=(($43)&255);
      var $45=$44 & 7;
      var $46=(($45) & 255);
      $rm4=$46;
      var $47=$3;
      var $48=$mod2;
      var $49=$reg3;
      var $50=$rm4;
      _sx86_exec_full_modregrm_far($47, 0, $48, $49, $50, 62, 64);
      $1=1;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $53=$1;
      ;
      return $53;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_les["X"]=1;

function _Sfx86OpcodeDec_les($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $mod2;
      var $reg3;
      var $rm4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==196;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$3;
      var $10=_softx86_fetch_dec_byte($9);
      $x=$10;
      var $11=$x;
      var $12=(($11)&255);
      var $13=$12 >> 6;
      var $14=(($13) & 255);
      $mod=$14;
      var $15=$x;
      var $16=(($15)&255);
      var $17=$16 >> 3;
      var $18=$17 & 7;
      var $19=(($18) & 255);
      $reg=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 & 7;
      var $23=(($22) & 255);
      $rm=$23;
      var $24=$3;
      var $25=$mod;
      var $26=$reg;
      var $27=$rm;
      _sx86_dec_full_modregrm($24, 1, 0, $25, $26, $27, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $28=$4;
      var $29=_sprintf($28, ((STRING_TABLE.__str8163)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      $1=1;
      __label__ = 6; break;
    case 3: 
      var $31=$2;
      var $32=(($31)&255);
      var $33=(($32)|0)==197;
      if ($33) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $35=$3;
      var $36=_softx86_fetch_dec_byte($35);
      $x1=$36;
      var $37=$x1;
      var $38=(($37)&255);
      var $39=$38 >> 6;
      var $40=(($39) & 255);
      $mod2=$40;
      var $41=$x1;
      var $42=(($41)&255);
      var $43=$42 >> 3;
      var $44=$43 & 7;
      var $45=(($44) & 255);
      $reg3=$45;
      var $46=$x1;
      var $47=(($46)&255);
      var $48=$47 & 7;
      var $49=(($48) & 255);
      $rm4=$49;
      var $50=$3;
      var $51=$mod2;
      var $52=$reg3;
      var $53=$rm4;
      _sx86_dec_full_modregrm($50, 1, 0, $51, $52, $53, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $54=$4;
      var $55=_sprintf($54, ((STRING_TABLE.__str9164)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      $1=1;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $58=$1;
      ;
      return $58;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_les["X"]=1;

function _Sfx86OpcodeExec_io($opcode, $ctx) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ionum;
      var $w16;
      var $rw=__stackBase__;
      var $rb=__stackBase__+2;
      var $w161;
      var $rw2=__stackBase__+3;
      var $rb3=__stackBase__+5;
      var $ionum4;
      var $w165;
      var $rw6=__stackBase__+6;
      var $rb7=__stackBase__+8;
      var $w168;
      var $rw9=__stackBase__+9;
      var $rb10=__stackBase__+11;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 254;
      var $7=(($6)|0)==228;
      if ($7) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$3;
      var $14=_softx86_fetch_exec_byte($13);
      $ionum=$14;
      var $15=$w16;
      var $16=(($15 << 24) >> 24)!=0;
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $18=$3;
      var $19=(($18+128)|0);
      var $20=(($19+4)|0);
      var $21=HEAP[$20];
      var $22=$3;
      var $23=$22;
      var $24=$ionum;
      var $25=(($24)&255);
      var $26=$rw;
      FUNCTION_TABLE[$21]($23, $25, $26, 2);
      var $27=HEAP[$rw];
      var $28=$3;
      var $29=(($28+4)|0);
      var $30=(($29)|0);
      var $31=(($30)|0);
      var $32=$31;
      var $33=(($32)|0);
      HEAP[$33]=$27;
      __label__ = 5; break;
    case 4: 
      var $35=$3;
      var $36=(($35+128)|0);
      var $37=(($36+4)|0);
      var $38=HEAP[$37];
      var $39=$3;
      var $40=$39;
      var $41=$ionum;
      var $42=(($41)&255);
      FUNCTION_TABLE[$38]($40, $42, $rb, 1);
      var $43=HEAP[$rb];
      var $44=$3;
      var $45=(($44+4)|0);
      var $46=(($45)|0);
      var $47=(($46)|0);
      var $48=$47;
      var $49=(($48)|0);
      HEAP[$49]=$43;
      __label__ = 5; break;
    case 5: 
      $1=1;
      __label__ = 25; break;
    case 6: 
      var $52=$2;
      var $53=(($52)&255);
      var $54=$53 & 254;
      var $55=(($54)|0)==236;
      if ($55) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $57=$2;
      var $58=(($57)&255);
      var $59=$58 & 1;
      var $60=(($59) & 255);
      $w161=$60;
      var $61=$w161;
      var $62=(($61 << 24) >> 24)!=0;
      if ($62) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $64=$3;
      var $65=(($64+128)|0);
      var $66=(($65+4)|0);
      var $67=HEAP[$66];
      var $68=$3;
      var $69=$68;
      var $70=$3;
      var $71=(($70+4)|0);
      var $72=(($71)|0);
      var $73=(($72+8)|0);
      var $74=$73;
      var $75=(($74)|0);
      var $76=HEAP[$75];
      var $77=(($76)&65535);
      var $78=$rw2;
      FUNCTION_TABLE[$67]($69, $77, $78, 2);
      var $79=HEAP[$rw2];
      var $80=$3;
      var $81=(($80+4)|0);
      var $82=(($81)|0);
      var $83=(($82)|0);
      var $84=$83;
      var $85=(($84)|0);
      HEAP[$85]=$79;
      __label__ = 10; break;
    case 9: 
      var $87=$3;
      var $88=(($87+128)|0);
      var $89=(($88+4)|0);
      var $90=HEAP[$89];
      var $91=$3;
      var $92=$91;
      var $93=$3;
      var $94=(($93+4)|0);
      var $95=(($94)|0);
      var $96=(($95+8)|0);
      var $97=$96;
      var $98=(($97)|0);
      var $99=HEAP[$98];
      var $100=(($99)&65535);
      FUNCTION_TABLE[$90]($92, $100, $rb3, 1);
      var $101=HEAP[$rb3];
      var $102=$3;
      var $103=(($102+4)|0);
      var $104=(($103)|0);
      var $105=(($104)|0);
      var $106=$105;
      var $107=(($106)|0);
      HEAP[$107]=$101;
      __label__ = 10; break;
    case 10: 
      $1=1;
      __label__ = 25; break;
    case 11: 
      var $110=$2;
      var $111=(($110)&255);
      var $112=$111 & 254;
      var $113=(($112)|0)==230;
      if ($113) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $115=$2;
      var $116=(($115)&255);
      var $117=$116 & 1;
      var $118=(($117) & 255);
      $w165=$118;
      var $119=$3;
      var $120=_softx86_fetch_exec_byte($119);
      $ionum4=$120;
      var $121=$w165;
      var $122=(($121 << 24) >> 24)!=0;
      if ($122) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $124=$3;
      var $125=(($124+4)|0);
      var $126=(($125)|0);
      var $127=(($126)|0);
      var $128=$127;
      var $129=(($128)|0);
      var $130=HEAP[$129];
      HEAP[$rw6]=$130;
      var $131=$3;
      var $132=(($131+128)|0);
      var $133=(($132+12)|0);
      var $134=HEAP[$133];
      var $135=$3;
      var $136=$135;
      var $137=$ionum4;
      var $138=(($137)&255);
      var $139=$rw6;
      FUNCTION_TABLE[$134]($136, $138, $139, 2);
      __label__ = 15; break;
    case 14: 
      var $141=$3;
      var $142=(($141+4)|0);
      var $143=(($142)|0);
      var $144=(($143)|0);
      var $145=$144;
      var $146=(($145)|0);
      var $147=HEAP[$146];
      HEAP[$rb7]=$147;
      var $148=$3;
      var $149=(($148+128)|0);
      var $150=(($149+12)|0);
      var $151=HEAP[$150];
      var $152=$3;
      var $153=$152;
      var $154=$ionum4;
      var $155=(($154)&255);
      FUNCTION_TABLE[$151]($153, $155, $rb7, 1);
      __label__ = 15; break;
    case 15: 
      $1=1;
      __label__ = 25; break;
    case 16: 
      var $158=$2;
      var $159=(($158)&255);
      var $160=$159 & 254;
      var $161=(($160)|0)==238;
      if ($161) { __label__ = 17; break; } else { __label__ = 21; break; }
    case 17: 
      var $163=$2;
      var $164=(($163)&255);
      var $165=$164 & 1;
      var $166=(($165) & 255);
      $w168=$166;
      var $167=$w168;
      var $168=(($167 << 24) >> 24)!=0;
      if ($168) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $170=$3;
      var $171=(($170+4)|0);
      var $172=(($171)|0);
      var $173=(($172)|0);
      var $174=$173;
      var $175=(($174)|0);
      var $176=HEAP[$175];
      HEAP[$rw9]=$176;
      var $177=$3;
      var $178=(($177+128)|0);
      var $179=(($178+12)|0);
      var $180=HEAP[$179];
      var $181=$3;
      var $182=$181;
      var $183=$3;
      var $184=(($183+4)|0);
      var $185=(($184)|0);
      var $186=(($185+8)|0);
      var $187=$186;
      var $188=(($187)|0);
      var $189=HEAP[$188];
      var $190=(($189)&65535);
      var $191=$rw9;
      FUNCTION_TABLE[$180]($182, $190, $191, 2);
      __label__ = 20; break;
    case 19: 
      var $193=$3;
      var $194=(($193+4)|0);
      var $195=(($194)|0);
      var $196=(($195)|0);
      var $197=$196;
      var $198=(($197)|0);
      var $199=HEAP[$198];
      HEAP[$rb10]=$199;
      var $200=$3;
      var $201=(($200+128)|0);
      var $202=(($201+12)|0);
      var $203=HEAP[$202];
      var $204=$3;
      var $205=$204;
      var $206=$3;
      var $207=(($206+4)|0);
      var $208=(($207)|0);
      var $209=(($208+8)|0);
      var $210=$209;
      var $211=(($210)|0);
      var $212=HEAP[$211];
      var $213=(($212)&65535);
      FUNCTION_TABLE[$203]($205, $213, $rb10, 1);
      __label__ = 20; break;
    case 20: 
      $1=1;
      __label__ = 25; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      $1=0;
      __label__ = 25; break;
    case 25: 
      var $220=$1;
      STACKTOP = __stackBase__;
      return $220;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_io["X"]=1;

function _Sfx86OpcodeDec_io($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ionum;
      var $w16;
      var $w161;
      var $ionum2;
      var $w163;
      var $w164;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 254;
      var $8=(($7)|0)==228;
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$3;
      var $15=_softx86_fetch_dec_byte($14);
      $ionum=$15;
      var $16=$4;
      var $17=$w16;
      var $18=(($17)&255);
      var $19=(($18)|0)!=0;
      var $20=$19 ? (((STRING_TABLE.__str1178)|0)) : (((STRING_TABLE.__str2179)|0));
      var $21=$ionum;
      var $22=(($21)&255);
      var $23=_sprintf($16, ((STRING_TABLE.__str177)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$20,HEAP[tempInt+4]=$22,tempInt));
      $1=1;
      __label__ = 13; break;
    case 3: 
      var $25=$2;
      var $26=(($25)&255);
      var $27=$26 & 254;
      var $28=(($27)|0)==236;
      if ($28) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $30=$2;
      var $31=(($30)&255);
      var $32=$31 & 1;
      var $33=(($32) & 255);
      $w161=$33;
      var $34=$4;
      var $35=$w161;
      var $36=(($35)&255);
      var $37=(($36)|0)!=0;
      var $38=$37 ? (((STRING_TABLE.__str1178)|0)) : (((STRING_TABLE.__str2179)|0));
      var $39=_sprintf($34, ((STRING_TABLE.__str3180)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$38,tempInt));
      $1=1;
      __label__ = 13; break;
    case 5: 
      var $41=$2;
      var $42=(($41)&255);
      var $43=$42 & 254;
      var $44=(($43)|0)==230;
      if ($44) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $46=$2;
      var $47=(($46)&255);
      var $48=$47 & 1;
      var $49=(($48) & 255);
      $w163=$49;
      var $50=$3;
      var $51=_softx86_fetch_dec_byte($50);
      $ionum2=$51;
      var $52=$4;
      var $53=$ionum2;
      var $54=(($53)&255);
      var $55=$w163;
      var $56=(($55)&255);
      var $57=(($56)|0)!=0;
      var $58=$57 ? (((STRING_TABLE.__str1178)|0)) : (((STRING_TABLE.__str2179)|0));
      var $59=_sprintf($52, ((STRING_TABLE.__str4181)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$54,HEAP[tempInt+4]=$58,tempInt));
      $1=1;
      __label__ = 13; break;
    case 7: 
      var $61=$2;
      var $62=(($61)&255);
      var $63=$62 & 254;
      var $64=(($63)|0)==238;
      if ($64) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $66=$2;
      var $67=(($66)&255);
      var $68=$67 & 1;
      var $69=(($68) & 255);
      $w164=$69;
      var $70=$4;
      var $71=$w164;
      var $72=(($71)&255);
      var $73=(($72)|0)!=0;
      var $74=$73 ? (((STRING_TABLE.__str1178)|0)) : (((STRING_TABLE.__str2179)|0));
      var $75=_sprintf($70, ((STRING_TABLE.__str5182)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$74,tempInt));
      $1=1;
      __label__ = 13; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      $1=0;
      __label__ = 13; break;
    case 13: 
      var $81=$1;
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_io["X"]=1;

function _op_dec8($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $ret;
      $1=$ctx;
      $2=$src;
      var $3=$2;
      var $4=(($3)&255);
      var $5=(($4-1)|0);
      var $6=(($5) & 255);
      $ret=$6;
      var $7=$ret;
      var $8=(($7)&255);
      var $9=$8 & 128;
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $12=$1;
      var $13=(($12+4)|0);
      var $14=(($13+96)|0);
      var $15=$14;
      var $16=HEAP[$15];
      var $17=$16 | 128;
      HEAP[$15]=$17;
      __label__ = 4; break;
    case 3: 
      var $19=$1;
      var $20=(($19+4)|0);
      var $21=(($20+96)|0);
      var $22=$21;
      var $23=HEAP[$22];
      var $24=$23 & -129;
      HEAP[$22]=$24;
      __label__ = 4; break;
    case 4: 
      var $26=$ret;
      var $27=(($26 << 24) >> 24)!=0;
      if ($27) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $29=$1;
      var $30=(($29+4)|0);
      var $31=(($30+96)|0);
      var $32=$31;
      var $33=HEAP[$32];
      var $34=$33 | 64;
      HEAP[$32]=$34;
      __label__ = 7; break;
    case 6: 
      var $36=$1;
      var $37=(($36+4)|0);
      var $38=(($37+96)|0);
      var $39=$38;
      var $40=HEAP[$39];
      var $41=$40 & -65;
      HEAP[$39]=$41;
      __label__ = 7; break;
    case 7: 
      var $43=$2;
      var $44=(($43)&255);
      var $45=$44 & 15;
      var $46=(($45)|0) < 1;
      if ($46) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $48=$1;
      var $49=(($48+4)|0);
      var $50=(($49+96)|0);
      var $51=$50;
      var $52=HEAP[$51];
      var $53=$52 | 16;
      HEAP[$51]=$53;
      __label__ = 10; break;
    case 9: 
      var $55=$1;
      var $56=(($55+4)|0);
      var $57=(($56+96)|0);
      var $58=$57;
      var $59=HEAP[$58];
      var $60=$59 & -17;
      HEAP[$58]=$60;
      __label__ = 10; break;
    case 10: 
      var $62=$ret;
      var $63=_softx86_parity8($62);
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $66=$1;
      var $67=(($66+4)|0);
      var $68=(($67+96)|0);
      var $69=$68;
      var $70=HEAP[$69];
      var $71=$70 | 4;
      HEAP[$69]=$71;
      __label__ = 13; break;
    case 12: 
      var $73=$1;
      var $74=(($73+4)|0);
      var $75=(($74+96)|0);
      var $76=$75;
      var $77=HEAP[$76];
      var $78=$77 & -5;
      HEAP[$76]=$78;
      __label__ = 13; break;
    case 13: 
      var $80=$ret;
      ;
      return $80;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_dec8["X"]=1;

function _op_dec16($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $ret;
      $1=$ctx;
      $2=$src;
      var $3=$2;
      var $4=(($3)&65535);
      var $5=(($4-1)|0);
      var $6=(($5) & 65535);
      $ret=$6;
      var $7=$ret;
      var $8=(($7)&65535);
      var $9=$8 & 32768;
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $12=$1;
      var $13=(($12+4)|0);
      var $14=(($13+96)|0);
      var $15=$14;
      var $16=HEAP[$15];
      var $17=$16 | 128;
      HEAP[$15]=$17;
      __label__ = 4; break;
    case 3: 
      var $19=$1;
      var $20=(($19+4)|0);
      var $21=(($20+96)|0);
      var $22=$21;
      var $23=HEAP[$22];
      var $24=$23 & -129;
      HEAP[$22]=$24;
      __label__ = 4; break;
    case 4: 
      var $26=$ret;
      var $27=(($26 << 16) >> 16)!=0;
      if ($27) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $29=$1;
      var $30=(($29+4)|0);
      var $31=(($30+96)|0);
      var $32=$31;
      var $33=HEAP[$32];
      var $34=$33 | 64;
      HEAP[$32]=$34;
      __label__ = 7; break;
    case 6: 
      var $36=$1;
      var $37=(($36+4)|0);
      var $38=(($37+96)|0);
      var $39=$38;
      var $40=HEAP[$39];
      var $41=$40 & -65;
      HEAP[$39]=$41;
      __label__ = 7; break;
    case 7: 
      var $43=$2;
      var $44=(($43)&65535);
      var $45=$44 & 15;
      var $46=(($45)|0) < 1;
      if ($46) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $48=$1;
      var $49=(($48+4)|0);
      var $50=(($49+96)|0);
      var $51=$50;
      var $52=HEAP[$51];
      var $53=$52 | 16;
      HEAP[$51]=$53;
      __label__ = 10; break;
    case 9: 
      var $55=$1;
      var $56=(($55+4)|0);
      var $57=(($56+96)|0);
      var $58=$57;
      var $59=HEAP[$58];
      var $60=$59 & -17;
      HEAP[$58]=$60;
      __label__ = 10; break;
    case 10: 
      var $62=$ret;
      var $63=_softx86_parity16($62);
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $66=$1;
      var $67=(($66+4)|0);
      var $68=(($67+96)|0);
      var $69=$68;
      var $70=HEAP[$69];
      var $71=$70 | 4;
      HEAP[$69]=$71;
      __label__ = 13; break;
    case 12: 
      var $73=$1;
      var $74=(($73+4)|0);
      var $75=(($74+96)|0);
      var $76=$75;
      var $77=HEAP[$76];
      var $78=$77 & -5;
      HEAP[$76]=$78;
      __label__ = 13; break;
    case 13: 
      var $80=$ret;
      ;
      return $80;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_dec16["X"]=1;

function _op_dec32($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $ret;
      $1=$ctx;
      $2=$src;
      var $3=$2;
      var $4=(($3-1)|0);
      $ret=$4;
      var $5=$ret;
      var $6=$5 & -2147483648;
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$1;
      var $10=(($9+4)|0);
      var $11=(($10+96)|0);
      var $12=$11;
      var $13=HEAP[$12];
      var $14=$13 | 128;
      HEAP[$12]=$14;
      __label__ = 4; break;
    case 3: 
      var $16=$1;
      var $17=(($16+4)|0);
      var $18=(($17+96)|0);
      var $19=$18;
      var $20=HEAP[$19];
      var $21=$20 & -129;
      HEAP[$19]=$21;
      __label__ = 4; break;
    case 4: 
      var $23=$ret;
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $26=$1;
      var $27=(($26+4)|0);
      var $28=(($27+96)|0);
      var $29=$28;
      var $30=HEAP[$29];
      var $31=$30 | 64;
      HEAP[$29]=$31;
      __label__ = 7; break;
    case 6: 
      var $33=$1;
      var $34=(($33+4)|0);
      var $35=(($34+96)|0);
      var $36=$35;
      var $37=HEAP[$36];
      var $38=$37 & -65;
      HEAP[$36]=$38;
      __label__ = 7; break;
    case 7: 
      var $40=$2;
      var $41=$40 & 15;
      var $42=(($41)>>>0) < 1;
      if ($42) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $44=$1;
      var $45=(($44+4)|0);
      var $46=(($45+96)|0);
      var $47=$46;
      var $48=HEAP[$47];
      var $49=$48 | 16;
      HEAP[$47]=$49;
      __label__ = 10; break;
    case 9: 
      var $51=$1;
      var $52=(($51+4)|0);
      var $53=(($52+96)|0);
      var $54=$53;
      var $55=HEAP[$54];
      var $56=$55 & -17;
      HEAP[$54]=$56;
      __label__ = 10; break;
    case 10: 
      var $58=$ret;
      var $59=(($58) & 65535);
      var $60=_softx86_parity16($59);
      var $61=(($60)|0)!=0;
      if ($61) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $63=$1;
      var $64=(($63+4)|0);
      var $65=(($64+96)|0);
      var $66=$65;
      var $67=HEAP[$66];
      var $68=$67 | 4;
      HEAP[$66]=$68;
      __label__ = 13; break;
    case 12: 
      var $70=$1;
      var $71=(($70+4)|0);
      var $72=(($71+96)|0);
      var $73=$72;
      var $74=HEAP[$73];
      var $75=$74 & -5;
      HEAP[$73]=$75;
      __label__ = 13; break;
    case 13: 
      var $77=$ret;
      ;
      return $77;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_dec32["X"]=1;

function _op_inc8($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $ret;
      $1=$ctx;
      $2=$src;
      var $3=$2;
      var $4=(($3)&255);
      var $5=(($4+1)|0);
      var $6=(($5) & 255);
      $ret=$6;
      var $7=$ret;
      var $8=(($7)&255);
      var $9=$8 & 128;
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $12=$1;
      var $13=(($12+4)|0);
      var $14=(($13+96)|0);
      var $15=$14;
      var $16=HEAP[$15];
      var $17=$16 | 128;
      HEAP[$15]=$17;
      __label__ = 4; break;
    case 3: 
      var $19=$1;
      var $20=(($19+4)|0);
      var $21=(($20+96)|0);
      var $22=$21;
      var $23=HEAP[$22];
      var $24=$23 & -129;
      HEAP[$22]=$24;
      __label__ = 4; break;
    case 4: 
      var $26=$ret;
      var $27=(($26 << 24) >> 24)!=0;
      if ($27) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $29=$1;
      var $30=(($29+4)|0);
      var $31=(($30+96)|0);
      var $32=$31;
      var $33=HEAP[$32];
      var $34=$33 | 64;
      HEAP[$32]=$34;
      __label__ = 7; break;
    case 6: 
      var $36=$1;
      var $37=(($36+4)|0);
      var $38=(($37+96)|0);
      var $39=$38;
      var $40=HEAP[$39];
      var $41=$40 & -65;
      HEAP[$39]=$41;
      __label__ = 7; break;
    case 7: 
      var $43=$2;
      var $44=(($43)&255);
      var $45=$44 & 15;
      var $46=(($45+1)|0);
      var $47=(($46)|0) >= 16;
      if ($47) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $49=$1;
      var $50=(($49+4)|0);
      var $51=(($50+96)|0);
      var $52=$51;
      var $53=HEAP[$52];
      var $54=$53 | 16;
      HEAP[$52]=$54;
      __label__ = 10; break;
    case 9: 
      var $56=$1;
      var $57=(($56+4)|0);
      var $58=(($57+96)|0);
      var $59=$58;
      var $60=HEAP[$59];
      var $61=$60 & -17;
      HEAP[$59]=$61;
      __label__ = 10; break;
    case 10: 
      var $63=$ret;
      var $64=_softx86_parity8($63);
      var $65=(($64)|0)!=0;
      if ($65) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $67=$1;
      var $68=(($67+4)|0);
      var $69=(($68+96)|0);
      var $70=$69;
      var $71=HEAP[$70];
      var $72=$71 | 4;
      HEAP[$70]=$72;
      __label__ = 13; break;
    case 12: 
      var $74=$1;
      var $75=(($74+4)|0);
      var $76=(($75+96)|0);
      var $77=$76;
      var $78=HEAP[$77];
      var $79=$78 & -5;
      HEAP[$77]=$79;
      __label__ = 13; break;
    case 13: 
      var $81=$ret;
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_inc8["X"]=1;

function _op_inc16($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $ret;
      $1=$ctx;
      $2=$src;
      var $3=$2;
      var $4=(($3)&65535);
      var $5=(($4+1)|0);
      var $6=(($5) & 65535);
      $ret=$6;
      var $7=$ret;
      var $8=(($7)&65535);
      var $9=$8 & 32768;
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $12=$1;
      var $13=(($12+4)|0);
      var $14=(($13+96)|0);
      var $15=$14;
      var $16=HEAP[$15];
      var $17=$16 | 128;
      HEAP[$15]=$17;
      __label__ = 4; break;
    case 3: 
      var $19=$1;
      var $20=(($19+4)|0);
      var $21=(($20+96)|0);
      var $22=$21;
      var $23=HEAP[$22];
      var $24=$23 & -129;
      HEAP[$22]=$24;
      __label__ = 4; break;
    case 4: 
      var $26=$ret;
      var $27=(($26 << 16) >> 16)!=0;
      if ($27) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $29=$1;
      var $30=(($29+4)|0);
      var $31=(($30+96)|0);
      var $32=$31;
      var $33=HEAP[$32];
      var $34=$33 | 64;
      HEAP[$32]=$34;
      __label__ = 7; break;
    case 6: 
      var $36=$1;
      var $37=(($36+4)|0);
      var $38=(($37+96)|0);
      var $39=$38;
      var $40=HEAP[$39];
      var $41=$40 & -65;
      HEAP[$39]=$41;
      __label__ = 7; break;
    case 7: 
      var $43=$2;
      var $44=(($43)&65535);
      var $45=$44 & 15;
      var $46=(($45+1)|0);
      var $47=(($46)|0) >= 16;
      if ($47) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $49=$1;
      var $50=(($49+4)|0);
      var $51=(($50+96)|0);
      var $52=$51;
      var $53=HEAP[$52];
      var $54=$53 | 16;
      HEAP[$52]=$54;
      __label__ = 10; break;
    case 9: 
      var $56=$1;
      var $57=(($56+4)|0);
      var $58=(($57+96)|0);
      var $59=$58;
      var $60=HEAP[$59];
      var $61=$60 & -17;
      HEAP[$59]=$61;
      __label__ = 10; break;
    case 10: 
      var $63=$ret;
      var $64=_softx86_parity16($63);
      var $65=(($64)|0)!=0;
      if ($65) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $67=$1;
      var $68=(($67+4)|0);
      var $69=(($68+96)|0);
      var $70=$69;
      var $71=HEAP[$70];
      var $72=$71 | 4;
      HEAP[$70]=$72;
      __label__ = 13; break;
    case 12: 
      var $74=$1;
      var $75=(($74+4)|0);
      var $76=(($75+96)|0);
      var $77=$76;
      var $78=HEAP[$77];
      var $79=$78 & -5;
      HEAP[$77]=$79;
      __label__ = 13; break;
    case 13: 
      var $81=$ret;
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_inc16["X"]=1;

function _op_inc32($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $ret;
      $1=$ctx;
      $2=$src;
      var $3=$2;
      var $4=(($3+1)|0);
      $ret=$4;
      var $5=$ret;
      var $6=$5 & -2147483648;
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$1;
      var $10=(($9+4)|0);
      var $11=(($10+96)|0);
      var $12=$11;
      var $13=HEAP[$12];
      var $14=$13 | 128;
      HEAP[$12]=$14;
      __label__ = 4; break;
    case 3: 
      var $16=$1;
      var $17=(($16+4)|0);
      var $18=(($17+96)|0);
      var $19=$18;
      var $20=HEAP[$19];
      var $21=$20 & -129;
      HEAP[$19]=$21;
      __label__ = 4; break;
    case 4: 
      var $23=$ret;
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $26=$1;
      var $27=(($26+4)|0);
      var $28=(($27+96)|0);
      var $29=$28;
      var $30=HEAP[$29];
      var $31=$30 | 64;
      HEAP[$29]=$31;
      __label__ = 7; break;
    case 6: 
      var $33=$1;
      var $34=(($33+4)|0);
      var $35=(($34+96)|0);
      var $36=$35;
      var $37=HEAP[$36];
      var $38=$37 & -65;
      HEAP[$36]=$38;
      __label__ = 7; break;
    case 7: 
      var $40=$2;
      var $41=$40 & 15;
      var $42=(($41+1)|0);
      var $43=(($42)>>>0) >= 16;
      if ($43) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $45=$1;
      var $46=(($45+4)|0);
      var $47=(($46+96)|0);
      var $48=$47;
      var $49=HEAP[$48];
      var $50=$49 | 16;
      HEAP[$48]=$50;
      __label__ = 10; break;
    case 9: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 & -17;
      HEAP[$55]=$57;
      __label__ = 10; break;
    case 10: 
      var $59=$ret;
      var $60=(($59) & 65535);
      var $61=_softx86_parity16($60);
      var $62=(($61)|0)!=0;
      if ($62) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $64=$1;
      var $65=(($64+4)|0);
      var $66=(($65+96)|0);
      var $67=$66;
      var $68=HEAP[$67];
      var $69=$68 | 4;
      HEAP[$67]=$69;
      __label__ = 13; break;
    case 12: 
      var $71=$1;
      var $72=(($71+4)|0);
      var $73=(($72+96)|0);
      var $74=$73;
      var $75=HEAP[$74];
      var $76=$75 & -5;
      HEAP[$74]=$76;
      __label__ = 13; break;
    case 13: 
      var $78=$ret;
      ;
      return $78;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_inc32["X"]=1;

function _Sfx86OpcodeExec_inc($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $w;
      var $i;
      var $w1;
      var $i2;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 248;
      var $7=(($6)|0)==64;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=(($10-64)|0);
      var $12=(($11) & 65535);
      $i=$12;
      var $13=$i;
      var $14=(($13)&65535);
      var $15=$3;
      var $16=(($15+4)|0);
      var $17=(($16)|0);
      var $18=(($17+($14<<2))|0);
      var $19=$18;
      var $20=(($19)|0);
      var $21=HEAP[$20];
      $w=$21;
      var $22=$3;
      var $23=$w;
      var $24=_op_inc16($22, $23);
      var $25=$i;
      var $26=(($25)&65535);
      var $27=$3;
      var $28=(($27+4)|0);
      var $29=(($28)|0);
      var $30=(($29+($26<<2))|0);
      var $31=$30;
      var $32=(($31)|0);
      HEAP[$32]=$24;
      $1=1;
      __label__ = 7; break;
    case 3: 
      var $34=$2;
      var $35=(($34)&255);
      var $36=$35 & 248;
      var $37=(($36)|0)==72;
      if ($37) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $39=$2;
      var $40=(($39)&255);
      var $41=(($40-72)|0);
      var $42=(($41) & 65535);
      $i2=$42;
      var $43=$i2;
      var $44=(($43)&65535);
      var $45=$3;
      var $46=(($45+4)|0);
      var $47=(($46)|0);
      var $48=(($47+($44<<2))|0);
      var $49=$48;
      var $50=(($49)|0);
      var $51=HEAP[$50];
      $w1=$51;
      var $52=$3;
      var $53=$w1;
      var $54=_op_dec16($52, $53);
      var $55=$i2;
      var $56=(($55)&65535);
      var $57=$3;
      var $58=(($57+4)|0);
      var $59=(($58)|0);
      var $60=(($59+($56<<2))|0);
      var $61=$60;
      var $62=(($61)|0);
      HEAP[$62]=$54;
      $1=1;
      __label__ = 7; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      $1=0;
      __label__ = 7; break;
    case 7: 
      var $66=$1;
      ;
      return $66;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_inc["X"]=1;

function _Sfx86OpcodeDec_inc($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 248;
      var $8=(($7)|0)==64;
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $10=$4;
      var $11=$2;
      var $12=(($11)&255);
      var $13=(($12-64)|0);
      var $14=((_sx86_regs16+($13<<2))|0);
      var $15=HEAP[$14];
      var $16=_sprintf($10, ((STRING_TABLE.__str187)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$15,tempInt));
      $1=1;
      __label__ = 7; break;
    case 3: 
      var $18=$2;
      var $19=(($18)&255);
      var $20=$19 & 248;
      var $21=(($20)|0)==72;
      if ($21) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $23=$4;
      var $24=$2;
      var $25=(($24)&255);
      var $26=(($25-72)|0);
      var $27=((_sx86_regs16+($26<<2))|0);
      var $28=HEAP[$27];
      var $29=_sprintf($23, ((STRING_TABLE.__str1188)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$28,tempInt));
      $1=1;
      __label__ = 7; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      $1=0;
      __label__ = 7; break;
    case 7: 
      var $33=$1;
      ;
      return $33;
    default: assert(0, "bad label: " + __label__);
  }
}


function _op_ncall16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$1;
  var $5=(($4+4)|0);
  var $6=(($5+100)|0);
  var $7=HEAP[$6];
  var $8=(($7) & 65535);
  _softx86_stack_pushw($3, $8);
  var $9=$1;
  var $10=$2;
  var $11=(($10)&65535);
  var $12=_softx86_set_near_instruction_ptr($9, $11);
  var $13=$2;
  ;
  return $13;
}


function _op_ncall32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$1;
  var $5=(($4+4)|0);
  var $6=(($5+100)|0);
  var $7=HEAP[$6];
  var $8=$7 >>> 16;
  var $9=$8 & 65535;
  var $10=(($9) & 65535);
  _softx86_stack_pushw($3, $10);
  var $11=$1;
  var $12=$1;
  var $13=(($12+4)|0);
  var $14=(($13+100)|0);
  var $15=HEAP[$14];
  var $16=$15 & 65535;
  var $17=(($16) & 65535);
  _softx86_stack_pushw($11, $17);
  var $18=$1;
  var $19=$2;
  var $20=_softx86_set_near_instruction_ptr($18, $19);
  var $21=$2;
  ;
  return $21;
}


function _op_popmem16($ctx) {
  ;
  var __label__;

  var $1;
  $1=$ctx;
  var $2=$1;
  var $3=_softx86_stack_popw($2);
  ;
  return $3;
}


function _op_popmem32($ctx) {
  ;
  var __label__;

  var $1;
  var $d;
  $1=$ctx;
  var $2=$1;
  var $3=_softx86_stack_popw($2);
  var $4=(($3)&65535);
  $d=$4;
  var $5=$1;
  var $6=_softx86_stack_popw($5);
  var $7=(($6)&65535);
  var $8=$7 << 16;
  var $9=$d;
  var $10=$9 | $8;
  $d=$10;
  var $11=$d;
  ;
  return $11;
}


function _op_pushmem16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  _softx86_stack_pushw($3, $4);
  var $5=$2;
  ;
  return $5;
}


function _op_pushmem32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$4 >>> 16;
  var $6=$5 & 65535;
  var $7=(($6) & 65535);
  _softx86_stack_pushw($3, $7);
  var $8=$1;
  var $9=$2;
  var $10=$9 & 65535;
  var $11=(($10) & 65535);
  _softx86_stack_pushw($8, $11);
  var $12=$2;
  ;
  return $12;
}


function _op_njmp16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=(($4)&65535);
  var $6=_softx86_set_near_instruction_ptr($3, $5);
  var $7=$2;
  ;
  return $7;
}


function _op_njmp32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_softx86_set_near_instruction_ptr($3, $4);
  var $6=$2;
  ;
  return $6;
}


function _op_fcall16($ctx, $seg, $ofs) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$ctx;
  $2=$seg;
  $3=$ofs;
  var $4=$1;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6+32)|0);
  var $8=(($7+8)|0);
  var $9=(($8)|0);
  var $10=HEAP[$9];
  _softx86_stack_pushw($4, $10);
  var $11=$1;
  var $12=$1;
  var $13=(($12+4)|0);
  var $14=(($13+100)|0);
  var $15=HEAP[$14];
  var $16=(($15) & 65535);
  _softx86_stack_pushw($11, $16);
  var $17=$1;
  var $18=$2;
  var $19=(($18)&65535);
  var $20=$3;
  var $21=(($20)&65535);
  var $22=_softx86_set_instruction_ptr($17, $19, $21);
  ;
  return;
}


function _op_fcall32($ctx, $seg, $ofs) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$ctx;
  $2=$seg;
  $3=$ofs;
  var $4=$1;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6+32)|0);
  var $8=(($7+8)|0);
  var $9=(($8)|0);
  var $10=HEAP[$9];
  _softx86_stack_pushw($4, $10);
  var $11=$1;
  var $12=$1;
  var $13=(($12+4)|0);
  var $14=(($13+100)|0);
  var $15=HEAP[$14];
  var $16=$15 & 65535;
  var $17=(($16) & 65535);
  _softx86_stack_pushw($11, $17);
  var $18=$1;
  var $19=$1;
  var $20=(($19+4)|0);
  var $21=(($20+100)|0);
  var $22=HEAP[$21];
  var $23=$22 >>> 16;
  var $24=$23 & 65535;
  var $25=(($24) & 65535);
  _softx86_stack_pushw($18, $25);
  var $26=$1;
  var $27=$2;
  var $28=$3;
  var $29=_softx86_set_instruction_ptr($26, $27, $28);
  ;
  return;
}


function _op_fjmp16($ctx, $seg, $ofs) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$ctx;
  $2=$seg;
  $3=$ofs;
  var $4=$1;
  var $5=$2;
  var $6=(($5)&65535);
  var $7=$3;
  var $8=(($7)&65535);
  var $9=_softx86_set_instruction_ptr($4, $6, $8);
  ;
  return;
}


function _op_fjmp32($ctx, $seg, $ofs) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$ctx;
  $2=$seg;
  $3=$ofs;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=_softx86_set_instruction_ptr($4, $5, $6);
  ;
  return;
}


function _Sfx86OpcodeExec_group80($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      var $op8;
      var $op16;
      var $op32;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 252;
      var $7=(($6)|0)==128;
      if ($7) { __label__ = 2; break; } else { __label__ = 30; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$3;
      var $14=_softx86_fetch_exec_byte($13);
      $x=$14;
      var $15=$x;
      var $16=(($15)&255);
      var $17=$16 >> 6;
      var $18=(($17) & 255);
      $mod=$18;
      var $19=$x;
      var $20=(($19)&255);
      var $21=$20 >> 3;
      var $22=$21 & 7;
      var $23=(($22) & 255);
      $reg=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 & 7;
      var $27=(($26) & 255);
      $rm=$27;
      var $28=$reg;
      var $29=(($28)&255);
      var $30=(($29)|0)==0;
      if ($30) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $op8=2;
      $op16=4;
      $op32=6;
      __label__ = 26; break;
    case 4: 
      var $33=$reg;
      var $34=(($33)&255);
      var $35=(($34)|0)==1;
      if ($35) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $op8=66;
      $op16=68;
      $op32=70;
      __label__ = 25; break;
    case 6: 
      var $38=$reg;
      var $39=(($38)&255);
      var $40=(($39)|0)==2;
      if ($40) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $op8=8;
      $op16=10;
      $op32=12;
      __label__ = 24; break;
    case 8: 
      var $43=$reg;
      var $44=(($43)&255);
      var $45=(($44)|0)==3;
      if ($45) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $op8=20;
      $op16=22;
      $op32=24;
      __label__ = 23; break;
    case 10: 
      var $48=$reg;
      var $49=(($48)&255);
      var $50=(($49)|0)==4;
      if ($50) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $op8=72;
      $op16=74;
      $op32=76;
      __label__ = 22; break;
    case 12: 
      var $53=$reg;
      var $54=(($53)&255);
      var $55=(($54)|0)==5;
      if ($55) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $op8=14;
      $op16=16;
      $op32=18;
      __label__ = 21; break;
    case 14: 
      var $58=$reg;
      var $59=(($58)&255);
      var $60=(($59)|0)==6;
      if ($60) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $op8=78;
      $op16=80;
      $op32=82;
      __label__ = 20; break;
    case 16: 
      var $63=$reg;
      var $64=(($63)&255);
      var $65=(($64)|0)==7;
      if ($65) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      $op8=14;
      $op16=16;
      $op32=18;
      __label__ = 19; break;
    case 18: 
      $1=0;
      __label__ = 31; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $76=$reg;
      var $77=(($76)&255);
      var $78=(($77)|0)==7;
      if ($78) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $80=$3;
      var $81=$w16;
      var $82=$mod;
      var $83=$rm;
      var $84=$op8;
      var $85=$op16;
      var $86=$op32;
      _sx86_exec_full_modrmonly_ro_imm($80, $81, 0, $82, $83, $84, $85, $86);
      __label__ = 29; break;
    case 28: 
      var $88=$3;
      var $89=$w16;
      var $90=$mod;
      var $91=$rm;
      var $92=$op8;
      var $93=$op16;
      var $94=$op32;
      _sx86_exec_full_modrmonly_rw_imm($88, $89, 0, $90, $91, $92, $93, $94);
      __label__ = 29; break;
    case 29: 
      $1=1;
      __label__ = 31; break;
    case 30: 
      $1=0;
      __label__ = 31; break;
    case 31: 
      var $98=$1;
      ;
      return $98;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_group80["X"]=1;

function _Sfx86OpcodeDec_group80($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      var $imm16;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 252;
      var $8=(($7)|0)==128;
      if ($8) { __label__ = 2; break; } else { __label__ = 29; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$3;
      var $15=_softx86_fetch_dec_byte($14);
      $x=$15;
      var $16=$x;
      var $17=(($16)&255);
      var $18=$17 >> 6;
      var $19=(($18) & 255);
      $mod=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 3;
      var $23=$22 & 7;
      var $24=(($23) & 255);
      $reg=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $rm=$28;
      var $29=$3;
      var $30=$w16;
      var $31=$mod;
      var $32=$rm;
      _sx86_dec_full_modrmonly($29, $30, 0, $31, $32, ((_op1_tmp)|0));
      var $33=$3;
      var $34=_softx86_fetch_dec_byte($33);
      var $35=(($34)&255);
      $imm16=$35;
      var $36=$w16;
      var $37=(($36 << 24) >> 24)!=0;
      if ($37) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $39=$3;
      var $40=_softx86_fetch_dec_byte($39);
      var $41=(($40)&255);
      var $42=$41 << 8;
      var $43=$imm16;
      var $44=(($43)&65535);
      var $45=$44 | $42;
      var $46=(($45) & 65535);
      $imm16=$46;
      __label__ = 4; break;
    case 4: 
      var $48=$reg;
      var $49=(($48)&255);
      var $50=(($49)|0)==0;
      if ($50) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $52=$4;
      var $53=$imm16;
      var $54=(($53)&65535);
      var $55=_sprintf($52, ((STRING_TABLE.__str193)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$54,tempInt));
      __label__ = 28; break;
    case 6: 
      var $57=$reg;
      var $58=(($57)&255);
      var $59=(($58)|0)==1;
      if ($59) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $61=$4;
      var $62=$imm16;
      var $63=(($62)&65535);
      var $64=_sprintf($61, ((STRING_TABLE.__str1194)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$63,tempInt));
      __label__ = 27; break;
    case 8: 
      var $66=$reg;
      var $67=(($66)&255);
      var $68=(($67)|0)==2;
      if ($68) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $70=$4;
      var $71=$imm16;
      var $72=(($71)&65535);
      var $73=_sprintf($70, ((STRING_TABLE.__str2195)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$72,tempInt));
      __label__ = 26; break;
    case 10: 
      var $75=$reg;
      var $76=(($75)&255);
      var $77=(($76)|0)==3;
      if ($77) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $79=$4;
      var $80=$imm16;
      var $81=(($80)&65535);
      var $82=_sprintf($79, ((STRING_TABLE.__str3196)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$81,tempInt));
      __label__ = 25; break;
    case 12: 
      var $84=$reg;
      var $85=(($84)&255);
      var $86=(($85)|0)==4;
      if ($86) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $88=$4;
      var $89=$imm16;
      var $90=(($89)&65535);
      var $91=_sprintf($88, ((STRING_TABLE.__str4197)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$90,tempInt));
      __label__ = 24; break;
    case 14: 
      var $93=$reg;
      var $94=(($93)&255);
      var $95=(($94)|0)==5;
      if ($95) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $97=$4;
      var $98=$imm16;
      var $99=(($98)&65535);
      var $100=_sprintf($97, ((STRING_TABLE.__str5198)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$99,tempInt));
      __label__ = 23; break;
    case 16: 
      var $102=$reg;
      var $103=(($102)&255);
      var $104=(($103)|0)==6;
      if ($104) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $106=$4;
      var $107=$imm16;
      var $108=(($107)&65535);
      var $109=_sprintf($106, ((STRING_TABLE.__str6199)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$108,tempInt));
      __label__ = 22; break;
    case 18: 
      var $111=$reg;
      var $112=(($111)&255);
      var $113=(($112)|0)==7;
      if ($113) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $115=$4;
      var $116=$imm16;
      var $117=(($116)&65535);
      var $118=_sprintf($115, ((STRING_TABLE.__str7200)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$117,tempInt));
      __label__ = 21; break;
    case 20: 
      $1=0;
      __label__ = 30; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      $1=1;
      __label__ = 30; break;
    case 29: 
      $1=0;
      __label__ = 30; break;
    case 30: 
      var $130=$1;
      ;
      return $130;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_group80["X"]=1;

function _Sfx86OpcodeExec_groupC0($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      var $op8;
      var $op16;
      var $op32;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 254;
      var $7=(($6)|0)==192;
      if ($7) { __label__ = 2; break; } else { __label__ = 24; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$3;
      var $14=_softx86_fetch_exec_byte($13);
      $x=$14;
      var $15=$x;
      var $16=(($15)&255);
      var $17=$16 >> 6;
      var $18=(($17) & 255);
      $mod=$18;
      var $19=$x;
      var $20=(($19)&255);
      var $21=$20 >> 3;
      var $22=$21 & 7;
      var $23=(($22) & 255);
      $reg=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 & 7;
      var $27=(($26) & 255);
      $rm=$27;
      var $28=$reg;
      var $29=(($28)&255);
      var $30=(($29)|0)==0;
      if ($30) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $op8=84;
      $op16=86;
      $op32=88;
      __label__ = 23; break;
    case 4: 
      var $33=$reg;
      var $34=(($33)&255);
      var $35=(($34)|0)==1;
      if ($35) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $op8=90;
      $op16=92;
      $op32=94;
      __label__ = 22; break;
    case 6: 
      var $38=$reg;
      var $39=(($38)&255);
      var $40=(($39)|0)==2;
      if ($40) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $op8=96;
      $op16=98;
      $op32=100;
      __label__ = 21; break;
    case 8: 
      var $43=$reg;
      var $44=(($43)&255);
      var $45=(($44)|0)==3;
      if ($45) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $op8=102;
      $op16=104;
      $op32=106;
      __label__ = 20; break;
    case 10: 
      var $48=$reg;
      var $49=(($48)&255);
      var $50=(($49)|0)==4;
      if ($50) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $op8=108;
      $op16=110;
      $op32=112;
      __label__ = 19; break;
    case 12: 
      var $53=$reg;
      var $54=(($53)&255);
      var $55=(($54)|0)==5;
      if ($55) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $op8=114;
      $op16=116;
      $op32=118;
      __label__ = 18; break;
    case 14: 
      var $58=$reg;
      var $59=(($58)&255);
      var $60=(($59)|0)==7;
      if ($60) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $op8=120;
      $op16=122;
      $op32=124;
      __label__ = 17; break;
    case 16: 
      $1=0;
      __label__ = 25; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $70=$3;
      var $71=$w16;
      var $72=$mod;
      var $73=$rm;
      var $74=$op8;
      var $75=$op16;
      var $76=$op32;
      _sx86_exec_full_modrmonly_rw_imm8($70, $71, 0, $72, $73, $74, $75, $76);
      $1=1;
      __label__ = 25; break;
    case 24: 
      $1=0;
      __label__ = 25; break;
    case 25: 
      var $79=$1;
      ;
      return $79;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_groupC0["X"]=1;

function _Sfx86OpcodeDec_groupC0($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      var $imm16;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 254;
      var $8=(($7)|0)==192;
      if ($8) { __label__ = 2; break; } else { __label__ = 24; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$3;
      var $15=_softx86_fetch_dec_byte($14);
      $x=$15;
      var $16=$x;
      var $17=(($16)&255);
      var $18=$17 >> 6;
      var $19=(($18) & 255);
      $mod=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 3;
      var $23=$22 & 7;
      var $24=(($23) & 255);
      $reg=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $rm=$28;
      var $29=$3;
      var $30=$w16;
      var $31=$mod;
      var $32=$rm;
      _sx86_dec_full_modrmonly($29, $30, 0, $31, $32, ((_op1_tmp)|0));
      var $33=$3;
      var $34=_softx86_fetch_dec_byte($33);
      var $35=(($34)&255);
      $imm16=$35;
      var $36=$reg;
      var $37=(($36)&255);
      var $38=(($37)|0)==0;
      if ($38) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $40=$4;
      var $41=$imm16;
      var $42=(($41)&65535);
      var $43=_sprintf($40, ((STRING_TABLE.__str8201)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$42,tempInt));
      __label__ = 23; break;
    case 4: 
      var $45=$reg;
      var $46=(($45)&255);
      var $47=(($46)|0)==1;
      if ($47) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $49=$4;
      var $50=$imm16;
      var $51=(($50)&65535);
      var $52=_sprintf($49, ((STRING_TABLE.__str9202)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$51,tempInt));
      __label__ = 22; break;
    case 6: 
      var $54=$reg;
      var $55=(($54)&255);
      var $56=(($55)|0)==2;
      if ($56) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $58=$4;
      var $59=$imm16;
      var $60=(($59)&65535);
      var $61=_sprintf($58, ((STRING_TABLE.__str10203)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$60,tempInt));
      __label__ = 21; break;
    case 8: 
      var $63=$reg;
      var $64=(($63)&255);
      var $65=(($64)|0)==3;
      if ($65) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $67=$4;
      var $68=$imm16;
      var $69=(($68)&65535);
      var $70=_sprintf($67, ((STRING_TABLE.__str11204)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$69,tempInt));
      __label__ = 20; break;
    case 10: 
      var $72=$reg;
      var $73=(($72)&255);
      var $74=(($73)|0)==4;
      if ($74) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $76=$4;
      var $77=$imm16;
      var $78=(($77)&65535);
      var $79=_sprintf($76, ((STRING_TABLE.__str12205)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$78,tempInt));
      __label__ = 19; break;
    case 12: 
      var $81=$reg;
      var $82=(($81)&255);
      var $83=(($82)|0)==5;
      if ($83) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $85=$4;
      var $86=$imm16;
      var $87=(($86)&65535);
      var $88=_sprintf($85, ((STRING_TABLE.__str13206)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$87,tempInt));
      __label__ = 18; break;
    case 14: 
      var $90=$reg;
      var $91=(($90)&255);
      var $92=(($91)|0)==7;
      if ($92) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $94=$4;
      var $95=$imm16;
      var $96=(($95)&65535);
      var $97=_sprintf($94, ((STRING_TABLE.__str14207)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$96,tempInt));
      __label__ = 17; break;
    case 16: 
      $1=0;
      __label__ = 25; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      $1=1;
      __label__ = 25; break;
    case 24: 
      $1=0;
      __label__ = 25; break;
    case 25: 
      var $108=$1;
      ;
      return $108;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_groupC0["X"]=1;

function _Sfx86OpcodeExec_groupD0($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      var $op8;
      var $op16;
      var $op32;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 254;
      var $7=(($6)|0)==208;
      if ($7) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 254;
      var $12=(($11)|0)==210;
      if ($12) { __label__ = 3; break; } else { __label__ = 46; break; }
    case 3: 
      var $14=$2;
      var $15=(($14)&255);
      var $16=$15 & 1;
      var $17=(($16) & 255);
      $w16=$17;
      var $18=$3;
      var $19=_softx86_fetch_exec_byte($18);
      $x=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 6;
      var $23=(($22) & 255);
      $mod=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 >> 3;
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $reg=$28;
      var $29=$x;
      var $30=(($29)&255);
      var $31=$30 & 7;
      var $32=(($31) & 255);
      $rm=$32;
      var $33=$reg;
      var $34=(($33)&255);
      var $35=(($34)|0)==0;
      if ($35) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $37=$2;
      var $38=(($37)&255);
      var $39=$38 & 254;
      var $40=(($39)|0)==210;
      if ($40) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $op8=126;
      $op16=128;
      $op32=130;
      __label__ = 7; break;
    case 6: 
      $op8=132;
      $op16=134;
      $op32=136;
      __label__ = 7; break;
    case 7: 
      __label__ = 45; break;
    case 8: 
      var $45=$reg;
      var $46=(($45)&255);
      var $47=(($46)|0)==1;
      if ($47) { __label__ = 9; break; } else { __label__ = 13; break; }
    case 9: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=$50 & 254;
      var $52=(($51)|0)==210;
      if ($52) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $op8=138;
      $op16=140;
      $op32=142;
      __label__ = 12; break;
    case 11: 
      $op8=144;
      $op16=146;
      $op32=148;
      __label__ = 12; break;
    case 12: 
      __label__ = 44; break;
    case 13: 
      var $57=$reg;
      var $58=(($57)&255);
      var $59=(($58)|0)==2;
      if ($59) { __label__ = 14; break; } else { __label__ = 18; break; }
    case 14: 
      var $61=$2;
      var $62=(($61)&255);
      var $63=$62 & 254;
      var $64=(($63)|0)==210;
      if ($64) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $op8=150;
      $op16=152;
      $op32=154;
      __label__ = 17; break;
    case 16: 
      $op8=156;
      $op16=158;
      $op32=160;
      __label__ = 17; break;
    case 17: 
      __label__ = 43; break;
    case 18: 
      var $69=$reg;
      var $70=(($69)&255);
      var $71=(($70)|0)==3;
      if ($71) { __label__ = 19; break; } else { __label__ = 23; break; }
    case 19: 
      var $73=$2;
      var $74=(($73)&255);
      var $75=$74 & 254;
      var $76=(($75)|0)==210;
      if ($76) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      $op8=162;
      $op16=164;
      $op32=166;
      __label__ = 22; break;
    case 21: 
      $op8=168;
      $op16=170;
      $op32=172;
      __label__ = 22; break;
    case 22: 
      __label__ = 42; break;
    case 23: 
      var $81=$reg;
      var $82=(($81)&255);
      var $83=(($82)|0)==4;
      if ($83) { __label__ = 24; break; } else { __label__ = 28; break; }
    case 24: 
      var $85=$2;
      var $86=(($85)&255);
      var $87=$86 & 254;
      var $88=(($87)|0)==210;
      if ($88) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      $op8=174;
      $op16=176;
      $op32=178;
      __label__ = 27; break;
    case 26: 
      $op8=180;
      $op16=182;
      $op32=184;
      __label__ = 27; break;
    case 27: 
      __label__ = 41; break;
    case 28: 
      var $93=$reg;
      var $94=(($93)&255);
      var $95=(($94)|0)==5;
      if ($95) { __label__ = 29; break; } else { __label__ = 33; break; }
    case 29: 
      var $97=$2;
      var $98=(($97)&255);
      var $99=$98 & 254;
      var $100=(($99)|0)==210;
      if ($100) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      $op8=186;
      $op16=188;
      $op32=190;
      __label__ = 32; break;
    case 31: 
      $op8=192;
      $op16=194;
      $op32=196;
      __label__ = 32; break;
    case 32: 
      __label__ = 40; break;
    case 33: 
      var $105=$reg;
      var $106=(($105)&255);
      var $107=(($106)|0)==7;
      if ($107) { __label__ = 34; break; } else { __label__ = 38; break; }
    case 34: 
      var $109=$2;
      var $110=(($109)&255);
      var $111=$110 & 254;
      var $112=(($111)|0)==210;
      if ($112) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      $op8=198;
      $op16=200;
      $op32=202;
      __label__ = 37; break;
    case 36: 
      $op8=204;
      $op16=206;
      $op32=208;
      __label__ = 37; break;
    case 37: 
      __label__ = 39; break;
    case 38: 
      $1=0;
      __label__ = 47; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      var $124=$3;
      var $125=$w16;
      var $126=$mod;
      var $127=$rm;
      var $128=$op8;
      var $129=$op16;
      var $130=$op32;
      _sx86_exec_full_modrmonly_rw($124, $125, 0, $126, $127, $128, $129, $130);
      $1=1;
      __label__ = 47; break;
    case 46: 
      $1=0;
      __label__ = 47; break;
    case 47: 
      var $133=$1;
      ;
      return $133;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_groupD0["X"]=1;

function _Sfx86OpcodeDec_groupD0($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 254;
      var $8=(($7)|0)==208;
      if ($8) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 254;
      var $13=(($12)|0)==210;
      if ($13) { __label__ = 3; break; } else { __label__ = 49; break; }
    case 3: 
      var $15=$2;
      var $16=(($15)&255);
      var $17=$16 & 1;
      var $18=(($17) & 255);
      $w16=$18;
      var $19=$3;
      var $20=_softx86_fetch_dec_byte($19);
      $x=$20;
      var $21=$x;
      var $22=(($21)&255);
      var $23=$22 >> 6;
      var $24=(($23) & 255);
      $mod=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 >> 3;
      var $28=$27 & 7;
      var $29=(($28) & 255);
      $reg=$29;
      var $30=$x;
      var $31=(($30)&255);
      var $32=$31 & 7;
      var $33=(($32) & 255);
      $rm=$33;
      var $34=$3;
      var $35=$w16;
      var $36=$mod;
      var $37=$rm;
      _sx86_dec_full_modrmonly($34, $35, 0, $36, $37, ((_op1_tmp)|0));
      var $38=$2;
      var $39=(($38)&255);
      var $40=$39 & 254;
      var $41=(($40)|0)==210;
      if ($41) { __label__ = 4; break; } else { __label__ = 26; break; }
    case 4: 
      var $43=$reg;
      var $44=(($43)&255);
      var $45=(($44)|0)==0;
      if ($45) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $47=$4;
      var $48=_sprintf($47, ((STRING_TABLE.__str15208)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 25; break;
    case 6: 
      var $50=$reg;
      var $51=(($50)&255);
      var $52=(($51)|0)==1;
      if ($52) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $54=$4;
      var $55=_sprintf($54, ((STRING_TABLE.__str16209)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 24; break;
    case 8: 
      var $57=$reg;
      var $58=(($57)&255);
      var $59=(($58)|0)==2;
      if ($59) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $61=$4;
      var $62=_sprintf($61, ((STRING_TABLE.__str17210)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 23; break;
    case 10: 
      var $64=$reg;
      var $65=(($64)&255);
      var $66=(($65)|0)==3;
      if ($66) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $68=$4;
      var $69=_sprintf($68, ((STRING_TABLE.__str18211)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 22; break;
    case 12: 
      var $71=$reg;
      var $72=(($71)&255);
      var $73=(($72)|0)==4;
      if ($73) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $75=$4;
      var $76=_sprintf($75, ((STRING_TABLE.__str19212)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 21; break;
    case 14: 
      var $78=$reg;
      var $79=(($78)&255);
      var $80=(($79)|0)==5;
      if ($80) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $82=$4;
      var $83=_sprintf($82, ((STRING_TABLE.__str20213)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 20; break;
    case 16: 
      var $85=$reg;
      var $86=(($85)&255);
      var $87=(($86)|0)==7;
      if ($87) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $89=$4;
      var $90=_sprintf($89, ((STRING_TABLE.__str21214)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 19; break;
    case 18: 
      $1=0;
      __label__ = 50; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 48; break;
    case 26: 
      var $100=$reg;
      var $101=(($100)&255);
      var $102=(($101)|0)==0;
      if ($102) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $104=$4;
      var $105=_sprintf($104, ((STRING_TABLE.__str22215)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 47; break;
    case 28: 
      var $107=$reg;
      var $108=(($107)&255);
      var $109=(($108)|0)==1;
      if ($109) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $111=$4;
      var $112=_sprintf($111, ((STRING_TABLE.__str23216)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 46; break;
    case 30: 
      var $114=$reg;
      var $115=(($114)&255);
      var $116=(($115)|0)==2;
      if ($116) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $118=$4;
      var $119=_sprintf($118, ((STRING_TABLE.__str24217)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 45; break;
    case 32: 
      var $121=$reg;
      var $122=(($121)&255);
      var $123=(($122)|0)==3;
      if ($123) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $125=$4;
      var $126=_sprintf($125, ((STRING_TABLE.__str25218)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 44; break;
    case 34: 
      var $128=$reg;
      var $129=(($128)&255);
      var $130=(($129)|0)==4;
      if ($130) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $132=$4;
      var $133=_sprintf($132, ((STRING_TABLE.__str26219)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 43; break;
    case 36: 
      var $135=$reg;
      var $136=(($135)&255);
      var $137=(($136)|0)==5;
      if ($137) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $139=$4;
      var $140=_sprintf($139, ((STRING_TABLE.__str27220)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 42; break;
    case 38: 
      var $142=$reg;
      var $143=(($142)&255);
      var $144=(($143)|0)==7;
      if ($144) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $146=$4;
      var $147=_sprintf($146, ((STRING_TABLE.__str28221)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 41; break;
    case 40: 
      $1=0;
      __label__ = 50; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      __label__ = 48; break;
    case 48: 
      $1=1;
      __label__ = 50; break;
    case 49: 
      $1=0;
      __label__ = 50; break;
    case 50: 
      var $159=$1;
      ;
      return $159;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_groupD0["X"]=1;

function _Sfx86OpcodeExec_groupC6($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      var $op8;
      var $op16;
      var $op32;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 254;
      var $7=(($6)|0)==198;
      if ($7) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$3;
      var $14=_softx86_fetch_exec_byte($13);
      $x=$14;
      var $15=$x;
      var $16=(($15)&255);
      var $17=$16 >> 6;
      var $18=(($17) & 255);
      $mod=$18;
      var $19=$x;
      var $20=(($19)&255);
      var $21=$20 >> 3;
      var $22=$21 & 7;
      var $23=(($22) & 255);
      $reg=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 & 7;
      var $27=(($26) & 255);
      $rm=$27;
      var $28=$reg;
      var $29=(($28)&255);
      var $30=(($29)|0)==0;
      if ($30) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $op8=52;
      $op16=54;
      $op32=56;
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 7; break;
    case 5: 
      var $34=$3;
      var $35=$w16;
      var $36=$mod;
      var $37=$rm;
      var $38=$op8;
      var $39=$op16;
      var $40=$op32;
      _sx86_exec_full_modrmonly_rw_imm($34, $35, 0, $36, $37, $38, $39, $40);
      $1=1;
      __label__ = 7; break;
    case 6: 
      $1=0;
      __label__ = 7; break;
    case 7: 
      var $43=$1;
      ;
      return $43;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_groupC6["X"]=1;

function _Sfx86OpcodeDec_groupC6($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      var $imm16;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 254;
      var $8=(($7)|0)==198;
      if ($8) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$3;
      var $15=_softx86_fetch_dec_byte($14);
      $x=$15;
      var $16=$x;
      var $17=(($16)&255);
      var $18=$17 >> 6;
      var $19=(($18) & 255);
      $mod=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 3;
      var $23=$22 & 7;
      var $24=(($23) & 255);
      $reg=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $rm=$28;
      var $29=$3;
      var $30=$w16;
      var $31=$mod;
      var $32=$rm;
      _sx86_dec_full_modrmonly($29, $30, 0, $31, $32, ((_op1_tmp)|0));
      var $33=$3;
      var $34=_softx86_fetch_dec_byte($33);
      var $35=(($34)&255);
      $imm16=$35;
      var $36=$w16;
      var $37=(($36 << 24) >> 24)!=0;
      if ($37) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $39=$3;
      var $40=_softx86_fetch_dec_byte($39);
      var $41=(($40)&255);
      var $42=$41 << 8;
      var $43=$imm16;
      var $44=(($43)&65535);
      var $45=$44 | $42;
      var $46=(($45) & 65535);
      $imm16=$46;
      __label__ = 4; break;
    case 4: 
      var $48=$reg;
      var $49=(($48)&255);
      var $50=(($49)|0)==0;
      if ($50) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $52=$4;
      var $53=$imm16;
      var $54=(($53)&65535);
      var $55=_sprintf($52, ((STRING_TABLE.__str29222)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$54,tempInt));
      __label__ = 7; break;
    case 6: 
      $1=0;
      __label__ = 9; break;
    case 7: 
      $1=1;
      __label__ = 9; break;
    case 8: 
      $1=0;
      __label__ = 9; break;
    case 9: 
      var $60=$1;
      ;
      return $60;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_groupC6["X"]=1;

function _Sfx86OpcodeExec_groupFE($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      var $op16;
      var $op32;
      var $op161;
      var $op322;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 254;
      var $7=(($6)|0)==254;
      if ($7) { __label__ = 2; break; } else { __label__ = 33; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$3;
      var $14=_softx86_fetch_exec_byte($13);
      $x=$14;
      var $15=$x;
      var $16=(($15)&255);
      var $17=$16 >> 6;
      var $18=(($17) & 255);
      $mod=$18;
      var $19=$x;
      var $20=(($19)&255);
      var $21=$20 >> 3;
      var $22=$21 & 7;
      var $23=(($22) & 255);
      $reg=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 & 7;
      var $27=(($26) & 255);
      $rm=$27;
      var $28=$reg;
      var $29=(($28)&255);
      var $30=(($29)|0)==0;
      if ($30) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $32=$3;
      var $33=$w16;
      var $34=$mod;
      var $35=$rm;
      _sx86_exec_full_modrmonly_rw($32, $33, 0, $34, $35, 230, 232, 234);
      __label__ = 32; break;
    case 4: 
      var $37=$reg;
      var $38=(($37)&255);
      var $39=(($38)|0)==1;
      if ($39) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $41=$3;
      var $42=$w16;
      var $43=$mod;
      var $44=$rm;
      _sx86_exec_full_modrmonly_rw($41, $42, 0, $43, $44, 236, 238, 240);
      __label__ = 31; break;
    case 6: 
      var $46=$reg;
      var $47=(($46)&255);
      var $48=(($47)|0) >= 2;
      if ($48) { __label__ = 7; break; } else { __label__ = 30; break; }
    case 7: 
      var $50=$w16;
      var $51=(($50 << 24) >> 24)!=0;
      if ($51) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      $1=0;
      __label__ = 34; break;
    case 9: 
      var $54=$reg;
      var $55=(($54)&255);
      var $56=(($55)|0)==3;
      if ($56) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $58=$reg;
      var $59=(($58)&255);
      var $60=(($59)|0)==5;
      if ($60) { __label__ = 11; break; } else { __label__ = 19; break; }
    case 11: 
      var $62=$mod;
      var $63=(($62)&255);
      var $64=(($63)|0)==3;
      if ($64) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $1=0;
      __label__ = 34; break;
    case 13: 
      var $67=$reg;
      var $68=(($67)&255);
      var $69=(($68)|0)==3;
      if ($69) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      $op16=210;
      $op32=212;
      __label__ = 18; break;
    case 15: 
      var $72=$reg;
      var $73=(($72)&255);
      var $74=(($73)|0)==5;
      if ($74) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      $op16=214;
      $op32=216;
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $78=$3;
      var $79=$mod;
      var $80=$rm;
      var $81=$op16;
      var $82=$op32;
      _sx86_exec_full_modrmonly_callfar($78, 0, $79, $80, $81, $82);
      __label__ = 29; break;
    case 19: 
      var $84=$reg;
      var $85=(($84)&255);
      var $86=(($85)|0)==2;
      if ($86) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      $op161=218;
      $op322=220;
      __label__ = 28; break;
    case 21: 
      var $89=$reg;
      var $90=(($89)&255);
      var $91=(($90)|0)==4;
      if ($91) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      $op161=222;
      $op322=224;
      __label__ = 27; break;
    case 23: 
      var $94=$reg;
      var $95=(($94)&255);
      var $96=(($95)|0)==6;
      if ($96) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      $op161=226;
      $op322=228;
      __label__ = 26; break;
    case 25: 
      $1=0;
      __label__ = 34; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $102=$3;
      var $103=$mod;
      var $104=$rm;
      var $105=$op161;
      var $106=$op322;
      _sx86_exec_full_modrmonly_ro($102, 1, 0, $103, $104, 0, $105, $106);
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      $1=1;
      __label__ = 34; break;
    case 33: 
      $1=0;
      __label__ = 34; break;
    case 34: 
      var $113=$1;
      ;
      return $113;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_groupFE["X"]=1;

function _Sfx86OpcodeDec_groupFE($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 254;
      var $8=(($7)|0)==254;
      if ($8) { __label__ = 2; break; } else { __label__ = 26; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$3;
      var $15=_softx86_fetch_dec_byte($14);
      $x=$15;
      var $16=$x;
      var $17=(($16)&255);
      var $18=$17 >> 6;
      var $19=(($18) & 255);
      $mod=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 3;
      var $23=$22 & 7;
      var $24=(($23) & 255);
      $reg=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $rm=$28;
      var $29=$3;
      var $30=$w16;
      var $31=$mod;
      var $32=$rm;
      _sx86_dec_full_modrmonly($29, $30, 0, $31, $32, ((_op1_tmp)|0));
      var $33=$reg;
      var $34=(($33)&255);
      var $35=(($34)|0)==0;
      if ($35) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $37=$4;
      var $38=_sprintf($37, ((STRING_TABLE.__str30223)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 25; break;
    case 4: 
      var $40=$reg;
      var $41=(($40)&255);
      var $42=(($41)|0)==1;
      if ($42) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $44=$4;
      var $45=_sprintf($44, ((STRING_TABLE.__str31224)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 24; break;
    case 6: 
      var $47=$w16;
      var $48=(($47 << 24) >> 24)!=0;
      if ($48) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      $1=0;
      __label__ = 27; break;
    case 8: 
      var $51=$reg;
      var $52=(($51)&255);
      var $53=(($52)|0)==2;
      if ($53) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $55=$4;
      var $56=_sprintf($55, ((STRING_TABLE.__str32225)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 23; break;
    case 10: 
      var $58=$reg;
      var $59=(($58)&255);
      var $60=(($59)|0)==3;
      if ($60) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $62=$4;
      var $63=_sprintf($62, ((STRING_TABLE.__str33226)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 22; break;
    case 12: 
      var $65=$reg;
      var $66=(($65)&255);
      var $67=(($66)|0)==4;
      if ($67) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $69=$4;
      var $70=_sprintf($69, ((STRING_TABLE.__str34227)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 21; break;
    case 14: 
      var $72=$reg;
      var $73=(($72)&255);
      var $74=(($73)|0)==5;
      if ($74) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $76=$4;
      var $77=_sprintf($76, ((STRING_TABLE.__str35228)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 20; break;
    case 16: 
      var $79=$reg;
      var $80=(($79)&255);
      var $81=(($80)|0)==6;
      if ($81) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $83=$4;
      var $84=_sprintf($83, ((STRING_TABLE.__str36229)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 19; break;
    case 18: 
      $1=0;
      __label__ = 27; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      $1=1;
      __label__ = 27; break;
    case 26: 
      $1=0;
      __label__ = 27; break;
    case 27: 
      var $95=$1;
      ;
      return $95;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_groupFE["X"]=1;

function _Sfx86OpcodeExec_group8F($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $mod;
      var $reg;
      var $rm;
      var $op16;
      var $op32;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==143;
      if ($6) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $8=$3;
      var $9=_softx86_fetch_exec_byte($8);
      $x=$9;
      var $10=$x;
      var $11=(($10)&255);
      var $12=$11 >> 6;
      var $13=(($12) & 255);
      $mod=$13;
      var $14=$x;
      var $15=(($14)&255);
      var $16=$15 >> 3;
      var $17=$16 & 7;
      var $18=(($17) & 255);
      $reg=$18;
      var $19=$x;
      var $20=(($19)&255);
      var $21=$20 & 7;
      var $22=(($21) & 255);
      $rm=$22;
      var $23=$reg;
      var $24=(($23)&255);
      var $25=(($24)|0)==0;
      if ($25) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $op16=242;
      $op32=244;
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 7; break;
    case 5: 
      var $29=$3;
      var $30=$mod;
      var $31=$rm;
      var $32=$op16;
      var $33=$op32;
      _sx86_exec_full_modrmonly_wo($29, 1, 0, $30, $31, 0, $32, $33);
      $1=1;
      __label__ = 7; break;
    case 6: 
      $1=0;
      __label__ = 7; break;
    case 7: 
      var $36=$1;
      ;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_group8F["X"]=1;

function _Sfx86OpcodeDec_group8F($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $mod;
      var $reg;
      var $rm;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==143;
      if ($7) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $9=$3;
      var $10=_softx86_fetch_dec_byte($9);
      $x=$10;
      var $11=$x;
      var $12=(($11)&255);
      var $13=$12 >> 6;
      var $14=(($13) & 255);
      $mod=$14;
      var $15=$x;
      var $16=(($15)&255);
      var $17=$16 >> 3;
      var $18=$17 & 7;
      var $19=(($18) & 255);
      $reg=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 & 7;
      var $23=(($22) & 255);
      $rm=$23;
      var $24=$3;
      var $25=$mod;
      var $26=$rm;
      _sx86_dec_full_modrmonly($24, 1, 0, $25, $26, ((_op1_tmp)|0));
      var $27=$reg;
      var $28=(($27)&255);
      var $29=(($28)|0)==0;
      if ($29) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $31=$4;
      var $32=_sprintf($31, ((STRING_TABLE.__str37)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 7; break;
    case 5: 
      $1=1;
      __label__ = 7; break;
    case 6: 
      $1=0;
      __label__ = 7; break;
    case 7: 
      var $37=$1;
      ;
      return $37;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_group8F["X"]=1;

function _Sfx86OpcodeExec_groupF6($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      var $op8;
      var $op16;
      var $op32;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 254;
      var $7=(($6)|0)==246;
      if ($7) { __label__ = 2; break; } else { __label__ = 33; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$3;
      var $14=_softx86_fetch_exec_byte($13);
      $x=$14;
      var $15=$x;
      var $16=(($15)&255);
      var $17=$16 >> 6;
      var $18=(($17) & 255);
      $mod=$18;
      var $19=$x;
      var $20=(($19)&255);
      var $21=$20 >> 3;
      var $22=$21 & 7;
      var $23=(($22) & 255);
      $reg=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 & 7;
      var $27=(($26) & 255);
      $rm=$27;
      var $28=$reg;
      var $29=(($28)&255);
      var $30=(($29)|0)==0;
      if ($30) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 23; break;
    case 4: 
      var $33=$reg;
      var $34=(($33)&255);
      var $35=(($34)|0)==2;
      if ($35) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 22; break;
    case 6: 
      var $38=$reg;
      var $39=(($38)&255);
      var $40=(($39)|0)==3;
      if ($40) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 21; break;
    case 8: 
      var $43=$reg;
      var $44=(($43)&255);
      var $45=(($44)|0)==4;
      if ($45) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $op8=246;
      $op16=248;
      $op32=250;
      __label__ = 20; break;
    case 10: 
      var $48=$reg;
      var $49=(($48)&255);
      var $50=(($49)|0)==5;
      if ($50) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $op8=252;
      $op16=254;
      $op32=256;
      __label__ = 19; break;
    case 12: 
      var $53=$reg;
      var $54=(($53)&255);
      var $55=(($54)|0)==6;
      if ($55) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $op8=258;
      $op16=260;
      $op32=262;
      __label__ = 18; break;
    case 14: 
      var $58=$reg;
      var $59=(($58)&255);
      var $60=(($59)|0)==7;
      if ($60) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $op8=264;
      $op16=266;
      $op32=268;
      __label__ = 17; break;
    case 16: 
      $1=0;
      __label__ = 34; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $70=$reg;
      var $71=(($70)&255);
      var $72=(($71)|0)==0;
      if ($72) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $74=$3;
      var $75=$w16;
      var $76=$mod;
      var $77=$rm;
      _sx86_exec_full_modrmonly_ro_imm($74, $75, 0, $76, $77, 270, 272, 274);
      __label__ = 32; break;
    case 25: 
      var $79=$reg;
      var $80=(($79)&255);
      var $81=(($80)|0)==2;
      if ($81) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $83=$3;
      var $84=$w16;
      var $85=$mod;
      var $86=$rm;
      _sx86_exec_full_modrmonly_rw($83, $84, 0, $85, $86, 276, 278, 280);
      __label__ = 31; break;
    case 27: 
      var $88=$reg;
      var $89=(($88)&255);
      var $90=(($89)|0)==3;
      if ($90) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $92=$3;
      var $93=$w16;
      var $94=$mod;
      var $95=$rm;
      _sx86_exec_full_modrmonly_rw($92, $93, 0, $94, $95, 282, 284, 286);
      __label__ = 30; break;
    case 29: 
      var $97=$3;
      var $98=$w16;
      var $99=$mod;
      var $100=$rm;
      var $101=$op8;
      var $102=$op16;
      var $103=$op32;
      _sx86_exec_full_modrmonly_ro($97, $98, 0, $99, $100, $101, $102, $103);
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      $1=1;
      __label__ = 34; break;
    case 33: 
      $1=0;
      __label__ = 34; break;
    case 34: 
      var $109=$1;
      ;
      return $109;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_groupF6["X"]=1;

function _Sfx86OpcodeDec_groupF6($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      var $imm16;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 254;
      var $8=(($7)|0)==246;
      if ($8) { __label__ = 2; break; } else { __label__ = 28; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$3;
      var $15=_softx86_fetch_dec_byte($14);
      $x=$15;
      var $16=$x;
      var $17=(($16)&255);
      var $18=$17 >> 6;
      var $19=(($18) & 255);
      $mod=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 3;
      var $23=$22 & 7;
      var $24=(($23) & 255);
      $reg=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $rm=$28;
      var $29=$3;
      var $30=$w16;
      var $31=$mod;
      var $32=$rm;
      _sx86_dec_full_modrmonly($29, $30, 0, $31, $32, ((_op1_tmp)|0));
      var $33=$reg;
      var $34=(($33)&255);
      var $35=(($34)|0)==0;
      if ($35) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $37=$3;
      var $38=_softx86_fetch_dec_byte($37);
      var $39=(($38)&255);
      $imm16=$39;
      var $40=$w16;
      var $41=(($40 << 24) >> 24)!=0;
      if ($41) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $43=$3;
      var $44=_softx86_fetch_dec_byte($43);
      var $45=(($44)&255);
      var $46=$45 << 8;
      var $47=$imm16;
      var $48=(($47)&65535);
      var $49=$48 | $46;
      var $50=(($49) & 65535);
      $imm16=$50;
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $53=$reg;
      var $54=(($53)&255);
      var $55=(($54)|0)==0;
      if ($55) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $57=$4;
      var $58=$imm16;
      var $59=(($58)&65535);
      var $60=_sprintf($57, ((STRING_TABLE.__str38)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=$59,tempInt));
      __label__ = 27; break;
    case 8: 
      var $62=$reg;
      var $63=(($62)&255);
      var $64=(($63)|0)==2;
      if ($64) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $66=$4;
      var $67=_sprintf($66, ((STRING_TABLE.__str39)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 26; break;
    case 10: 
      var $69=$reg;
      var $70=(($69)&255);
      var $71=(($70)|0)==3;
      if ($71) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $73=$4;
      var $74=_sprintf($73, ((STRING_TABLE.__str40)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 25; break;
    case 12: 
      var $76=$reg;
      var $77=(($76)&255);
      var $78=(($77)|0)==4;
      if ($78) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $80=$4;
      var $81=_sprintf($80, ((STRING_TABLE.__str41)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 24; break;
    case 14: 
      var $83=$reg;
      var $84=(($83)&255);
      var $85=(($84)|0)==5;
      if ($85) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $87=$4;
      var $88=_sprintf($87, ((STRING_TABLE.__str42)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 23; break;
    case 16: 
      var $90=$reg;
      var $91=(($90)&255);
      var $92=(($91)|0)==6;
      if ($92) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $94=$4;
      var $95=_sprintf($94, ((STRING_TABLE.__str43)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 22; break;
    case 18: 
      var $97=$reg;
      var $98=(($97)&255);
      var $99=(($98)|0)==7;
      if ($99) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $101=$4;
      var $102=_sprintf($101, ((STRING_TABLE.__str44)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),tempInt));
      __label__ = 21; break;
    case 20: 
      $1=0;
      __label__ = 29; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      $1=1;
      __label__ = 29; break;
    case 28: 
      $1=0;
      __label__ = 29; break;
    case 29: 
      var $113=$1;
      ;
      return $113;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_groupF6["X"]=1;

function _Sfx86OpcodeExec_int($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==204;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$3;
      var $9=_softx86_int_sw_signal($8, 3);
      $1=1;
      __label__ = 12; break;
    case 3: 
      var $11=$2;
      var $12=(($11)&255);
      var $13=(($12)|0)==205;
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $15=$3;
      var $16=_softx86_fetch_exec_byte($15);
      $i=$16;
      var $17=$3;
      var $18=$i;
      var $19=_softx86_int_sw_signal($17, $18);
      $1=1;
      __label__ = 12; break;
    case 5: 
      var $21=$2;
      var $22=(($21)&255);
      var $23=(($22)|0)==206;
      if ($23) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $25=$3;
      var $26=(($25+4)|0);
      var $27=(($26+96)|0);
      var $28=$27;
      var $29=HEAP[$28];
      var $30=$29 & 2048;
      var $31=(($30)|0)!=0;
      if ($31) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $33=$3;
      var $34=_softx86_int_sw_signal($33, 4);
      __label__ = 8; break;
    case 8: 
      $1=1;
      __label__ = 12; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      $1=0;
      __label__ = 12; break;
    case 12: 
      var $40=$1;
      ;
      return $40;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeDec_int($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==204;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$4;
      var $10=_strcpy($9, ((STRING_TABLE.__str258)|0));
      $1=1;
      __label__ = 10; break;
    case 3: 
      var $12=$2;
      var $13=(($12)&255);
      var $14=(($13)|0)==205;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$3;
      var $17=_softx86_fetch_dec_byte($16);
      $i=$17;
      var $18=$4;
      var $19=$i;
      var $20=(($19)&255);
      var $21=_sprintf($18, ((STRING_TABLE.__str1259)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$20,tempInt));
      $1=1;
      __label__ = 10; break;
    case 5: 
      var $23=$2;
      var $24=(($23)&255);
      var $25=(($24)|0)==206;
      if ($25) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $27=$4;
      var $28=_strcpy($27, ((STRING_TABLE.__str2260)|0));
      $1=1;
      __label__ = 10; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      $1=0;
      __label__ = 10; break;
    case 10: 
      var $33=$1;
      ;
      return $33;
    default: assert(0, "bad label: " + __label__);
  }
}


function _op_sar8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $osrc;
      var $sa;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$2;
      var $6=(($5+180)|0);
      var $7=(($6+2)|0);
      var $8=HEAP[$7];
      var $9=(($8 << 24) >> 24)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$4;
      var $12=(($11)&255);
      var $13=$12 & 31;
      $oshic=$13;
      __label__ = 4; break;
    case 3: 
      var $15=$4;
      var $16=(($15)&255);
      $oshic=$16;
      __label__ = 4; break;
    case 4: 
      var $18=$oshic;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $21=$3;
      $1=$21;
      __label__ = 30; break;
    case 6: 
      var $23=$oshic;
      $shic=$23;
      var $24=$3;
      $osrc=$24;
      var $25=$3;
      $ret=$25;
      var $26=$3;
      var $27=(($26)&255);
      var $28=$27 & 128;
      var $29=(($28)|0)!=0;
      if ($29) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $31=$shic;
      var $32=((8-$31)|0);
      var $33=255 << $32;
      var $36 = $33;__label__ = 9; break;
    case 8: 
      var $36 = 0;__label__ = 9; break;
    case 9: 
      var $36;
      var $37=(($36) & 255);
      $sa=$37;
      var $38=$shic;
      var $39=(($38)|0) > 1;
      if ($39) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $41=$shic;
      var $42=(($41-1)|0);
      var $43=$ret;
      var $44=(($43)&255);
      var $45=$44 >> (($42)|0);
      var $46=(($45) & 255);
      $ret=$46;
      __label__ = 11; break;
    case 11: 
      var $48=$ret;
      var $49=(($48)&255);
      var $50=$49 & 1;
      var $51=(($50)|0)!=0;
      if ($51) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $53=$2;
      var $54=(($53+4)|0);
      var $55=(($54+96)|0);
      var $56=$55;
      var $57=HEAP[$56];
      var $58=$57 | 1;
      HEAP[$56]=$58;
      __label__ = 14; break;
    case 13: 
      var $60=$2;
      var $61=(($60+4)|0);
      var $62=(($61+96)|0);
      var $63=$62;
      var $64=HEAP[$63];
      var $65=$64 & -2;
      HEAP[$63]=$65;
      __label__ = 14; break;
    case 14: 
      var $67=$ret;
      var $68=(($67)&255);
      var $69=$68 >> 1;
      var $70=(($69) & 255);
      $ret=$70;
      var $71=$sa;
      var $72=(($71)&255);
      var $73=$ret;
      var $74=(($73)&255);
      var $75=$74 | $72;
      var $76=(($75) & 255);
      $ret=$76;
      var $77=$oshic;
      var $78=(($77)|0)==1;
      if ($78) { __label__ = 15; break; } else { __label__ = 19; break; }
    case 15: 
      var $80=$osrc;
      var $81=(($80)&255);
      var $82=$81 >> 7;
      var $83=(($82)|0)!=0;
      if ($83) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $85=$2;
      var $86=(($85+4)|0);
      var $87=(($86+96)|0);
      var $88=$87;
      var $89=HEAP[$88];
      var $90=$89 | 2048;
      HEAP[$88]=$90;
      __label__ = 18; break;
    case 17: 
      var $92=$2;
      var $93=(($92+4)|0);
      var $94=(($93+96)|0);
      var $95=$94;
      var $96=HEAP[$95];
      var $97=$96 & -2049;
      HEAP[$95]=$97;
      __label__ = 18; break;
    case 18: 
      __label__ = 20; break;
    case 19: 
      var $100=$2;
      var $101=(($100+4)|0);
      var $102=(($101+96)|0);
      var $103=$102;
      var $104=HEAP[$103];
      var $105=$104 & -2049;
      HEAP[$103]=$105;
      __label__ = 20; break;
    case 20: 
      var $107=$ret;
      var $108=(($107)&255);
      var $109=$108 & 128;
      var $110=(($109)|0)!=0;
      if ($110) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $112=$2;
      var $113=(($112+4)|0);
      var $114=(($113+96)|0);
      var $115=$114;
      var $116=HEAP[$115];
      var $117=$116 | 128;
      HEAP[$115]=$117;
      __label__ = 23; break;
    case 22: 
      var $119=$2;
      var $120=(($119+4)|0);
      var $121=(($120+96)|0);
      var $122=$121;
      var $123=HEAP[$122];
      var $124=$123 & -129;
      HEAP[$122]=$124;
      __label__ = 23; break;
    case 23: 
      var $126=$ret;
      var $127=(($126 << 24) >> 24)!=0;
      if ($127) { __label__ = 25; break; } else { __label__ = 24; break; }
    case 24: 
      var $129=$2;
      var $130=(($129+4)|0);
      var $131=(($130+96)|0);
      var $132=$131;
      var $133=HEAP[$132];
      var $134=$133 | 64;
      HEAP[$132]=$134;
      __label__ = 26; break;
    case 25: 
      var $136=$2;
      var $137=(($136+4)|0);
      var $138=(($137+96)|0);
      var $139=$138;
      var $140=HEAP[$139];
      var $141=$140 & -65;
      HEAP[$139]=$141;
      __label__ = 26; break;
    case 26: 
      var $143=$2;
      var $144=(($143+4)|0);
      var $145=(($144+96)|0);
      var $146=$145;
      var $147=HEAP[$146];
      var $148=$147 & -17;
      HEAP[$146]=$148;
      var $149=$ret;
      var $150=_softx86_parity8($149);
      var $151=(($150)|0)!=0;
      if ($151) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $153=$2;
      var $154=(($153+4)|0);
      var $155=(($154+96)|0);
      var $156=$155;
      var $157=HEAP[$156];
      var $158=$157 | 4;
      HEAP[$156]=$158;
      __label__ = 29; break;
    case 28: 
      var $160=$2;
      var $161=(($160+4)|0);
      var $162=(($161+96)|0);
      var $163=$162;
      var $164=HEAP[$163];
      var $165=$164 & -5;
      HEAP[$163]=$165;
      __label__ = 29; break;
    case 29: 
      var $167=$ret;
      $1=$167;
      __label__ = 30; break;
    case 30: 
      var $169=$1;
      ;
      return $169;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_sar8["X"]=1;

function _op_sar1_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_sar8($3, $4, 1);
  ;
  return $5;
}


function _op_sar_cl_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=_op_sar8($3, $4, $11);
  ;
  return $12;
}


function _op_sar16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $osrc;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$2;
      var $6=(($5+180)|0);
      var $7=(($6+2)|0);
      var $8=HEAP[$7];
      var $9=(($8 << 24) >> 24)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$4;
      var $12=(($11)&65535);
      var $13=$12 & 31;
      $oshic=$13;
      __label__ = 4; break;
    case 3: 
      var $15=$4;
      var $16=(($15)&65535);
      $oshic=$16;
      __label__ = 4; break;
    case 4: 
      var $18=$oshic;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $21=$3;
      $1=$21;
      __label__ = 27; break;
    case 6: 
      var $23=$oshic;
      $shic=$23;
      var $24=$3;
      $osrc=$24;
      var $25=$3;
      $ret=$25;
      var $26=$shic;
      var $27=(($26)|0) > 1;
      if ($27) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $29=$shic;
      var $30=(($29-1)|0);
      var $31=$ret;
      var $32=(($31)&65535);
      var $33=$32 >> (($30)|0);
      var $34=(($33) & 65535);
      $ret=$34;
      __label__ = 8; break;
    case 8: 
      var $36=$ret;
      var $37=(($36)&65535);
      var $38=$37 & 1;
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $41=$2;
      var $42=(($41+4)|0);
      var $43=(($42+96)|0);
      var $44=$43;
      var $45=HEAP[$44];
      var $46=$45 | 1;
      HEAP[$44]=$46;
      __label__ = 11; break;
    case 10: 
      var $48=$2;
      var $49=(($48+4)|0);
      var $50=(($49+96)|0);
      var $51=$50;
      var $52=HEAP[$51];
      var $53=$52 & -2;
      HEAP[$51]=$53;
      __label__ = 11; break;
    case 11: 
      var $55=$ret;
      var $56=(($55)&65535);
      var $57=$56 >> 1;
      var $58=(($57) & 65535);
      $ret=$58;
      var $59=$oshic;
      var $60=(($59)|0)==1;
      if ($60) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $62=$osrc;
      var $63=(($62)&65535);
      var $64=$63 >> 15;
      var $65=(($64)|0)!=0;
      if ($65) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $67=$2;
      var $68=(($67+4)|0);
      var $69=(($68+96)|0);
      var $70=$69;
      var $71=HEAP[$70];
      var $72=$71 | 2048;
      HEAP[$70]=$72;
      __label__ = 15; break;
    case 14: 
      var $74=$2;
      var $75=(($74+4)|0);
      var $76=(($75+96)|0);
      var $77=$76;
      var $78=HEAP[$77];
      var $79=$78 & -2049;
      HEAP[$77]=$79;
      __label__ = 15; break;
    case 15: 
      __label__ = 17; break;
    case 16: 
      var $82=$2;
      var $83=(($82+4)|0);
      var $84=(($83+96)|0);
      var $85=$84;
      var $86=HEAP[$85];
      var $87=$86 & -2049;
      HEAP[$85]=$87;
      __label__ = 17; break;
    case 17: 
      var $89=$ret;
      var $90=(($89)&65535);
      var $91=$90 & 32768;
      var $92=(($91)|0)!=0;
      if ($92) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $94=$2;
      var $95=(($94+4)|0);
      var $96=(($95+96)|0);
      var $97=$96;
      var $98=HEAP[$97];
      var $99=$98 | 128;
      HEAP[$97]=$99;
      __label__ = 20; break;
    case 19: 
      var $101=$2;
      var $102=(($101+4)|0);
      var $103=(($102+96)|0);
      var $104=$103;
      var $105=HEAP[$104];
      var $106=$105 & -129;
      HEAP[$104]=$106;
      __label__ = 20; break;
    case 20: 
      var $108=$ret;
      var $109=(($108 << 16) >> 16)!=0;
      if ($109) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $111=$2;
      var $112=(($111+4)|0);
      var $113=(($112+96)|0);
      var $114=$113;
      var $115=HEAP[$114];
      var $116=$115 | 64;
      HEAP[$114]=$116;
      __label__ = 23; break;
    case 22: 
      var $118=$2;
      var $119=(($118+4)|0);
      var $120=(($119+96)|0);
      var $121=$120;
      var $122=HEAP[$121];
      var $123=$122 & -65;
      HEAP[$121]=$123;
      __label__ = 23; break;
    case 23: 
      var $125=$2;
      var $126=(($125+4)|0);
      var $127=(($126+96)|0);
      var $128=$127;
      var $129=HEAP[$128];
      var $130=$129 & -17;
      HEAP[$128]=$130;
      var $131=$ret;
      var $132=_softx86_parity16($131);
      var $133=(($132)|0)!=0;
      if ($133) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $135=$2;
      var $136=(($135+4)|0);
      var $137=(($136+96)|0);
      var $138=$137;
      var $139=HEAP[$138];
      var $140=$139 | 4;
      HEAP[$138]=$140;
      __label__ = 26; break;
    case 25: 
      var $142=$2;
      var $143=(($142+4)|0);
      var $144=(($143+96)|0);
      var $145=$144;
      var $146=HEAP[$145];
      var $147=$146 & -5;
      HEAP[$145]=$147;
      __label__ = 26; break;
    case 26: 
      var $149=$ret;
      $1=$149;
      __label__ = 27; break;
    case 27: 
      var $151=$1;
      ;
      return $151;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_sar16["X"]=1;

function _op_sar1_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_sar16($3, $4, 1);
  ;
  return $5;
}


function _op_sar_cl_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_sar16($3, $4, $12);
  ;
  return $13;
}


function _op_sar32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $osrc;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$2;
      var $6=(($5+180)|0);
      var $7=(($6+2)|0);
      var $8=HEAP[$7];
      var $9=(($8 << 24) >> 24)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$4;
      var $12=$11 & 31;
      $oshic=$12;
      __label__ = 4; break;
    case 3: 
      var $14=$4;
      $oshic=$14;
      __label__ = 4; break;
    case 4: 
      var $16=$oshic;
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $19=$3;
      $1=$19;
      __label__ = 27; break;
    case 6: 
      var $21=$oshic;
      $shic=$21;
      var $22=$3;
      $osrc=$22;
      var $23=$3;
      $ret=$23;
      var $24=$shic;
      var $25=(($24)|0) > 1;
      if ($25) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $27=$shic;
      var $28=(($27-1)|0);
      var $29=$ret;
      var $30=$29 >>> (($28)>>>0);
      $ret=$30;
      __label__ = 8; break;
    case 8: 
      var $32=$ret;
      var $33=$32 & 1;
      var $34=(($33)|0)!=0;
      if ($34) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $36=$2;
      var $37=(($36+4)|0);
      var $38=(($37+96)|0);
      var $39=$38;
      var $40=HEAP[$39];
      var $41=$40 | 1;
      HEAP[$39]=$41;
      __label__ = 11; break;
    case 10: 
      var $43=$2;
      var $44=(($43+4)|0);
      var $45=(($44+96)|0);
      var $46=$45;
      var $47=HEAP[$46];
      var $48=$47 & -2;
      HEAP[$46]=$48;
      __label__ = 11; break;
    case 11: 
      var $50=$ret;
      var $51=$50 >>> 1;
      $ret=$51;
      var $52=$oshic;
      var $53=(($52)|0)==1;
      if ($53) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $55=$osrc;
      var $56=$55 >>> 31;
      var $57=(($56)|0)!=0;
      if ($57) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $59=$2;
      var $60=(($59+4)|0);
      var $61=(($60+96)|0);
      var $62=$61;
      var $63=HEAP[$62];
      var $64=$63 | 2048;
      HEAP[$62]=$64;
      __label__ = 15; break;
    case 14: 
      var $66=$2;
      var $67=(($66+4)|0);
      var $68=(($67+96)|0);
      var $69=$68;
      var $70=HEAP[$69];
      var $71=$70 & -2049;
      HEAP[$69]=$71;
      __label__ = 15; break;
    case 15: 
      __label__ = 17; break;
    case 16: 
      var $74=$2;
      var $75=(($74+4)|0);
      var $76=(($75+96)|0);
      var $77=$76;
      var $78=HEAP[$77];
      var $79=$78 & -2049;
      HEAP[$77]=$79;
      __label__ = 17; break;
    case 17: 
      var $81=$ret;
      var $82=$81 & -2147483648;
      var $83=(($82)|0)!=0;
      if ($83) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $85=$2;
      var $86=(($85+4)|0);
      var $87=(($86+96)|0);
      var $88=$87;
      var $89=HEAP[$88];
      var $90=$89 | 128;
      HEAP[$88]=$90;
      __label__ = 20; break;
    case 19: 
      var $92=$2;
      var $93=(($92+4)|0);
      var $94=(($93+96)|0);
      var $95=$94;
      var $96=HEAP[$95];
      var $97=$96 & -129;
      HEAP[$95]=$97;
      __label__ = 20; break;
    case 20: 
      var $99=$ret;
      var $100=(($99)|0)!=0;
      if ($100) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $102=$2;
      var $103=(($102+4)|0);
      var $104=(($103+96)|0);
      var $105=$104;
      var $106=HEAP[$105];
      var $107=$106 | 64;
      HEAP[$105]=$107;
      __label__ = 23; break;
    case 22: 
      var $109=$2;
      var $110=(($109+4)|0);
      var $111=(($110+96)|0);
      var $112=$111;
      var $113=HEAP[$112];
      var $114=$113 & -65;
      HEAP[$112]=$114;
      __label__ = 23; break;
    case 23: 
      var $116=$2;
      var $117=(($116+4)|0);
      var $118=(($117+96)|0);
      var $119=$118;
      var $120=HEAP[$119];
      var $121=$120 & -17;
      HEAP[$119]=$121;
      var $122=$ret;
      var $123=_softx86_parity32($122);
      var $124=(($123)|0)!=0;
      if ($124) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $126=$2;
      var $127=(($126+4)|0);
      var $128=(($127+96)|0);
      var $129=$128;
      var $130=HEAP[$129];
      var $131=$130 | 4;
      HEAP[$129]=$131;
      __label__ = 26; break;
    case 25: 
      var $133=$2;
      var $134=(($133+4)|0);
      var $135=(($134+96)|0);
      var $136=$135;
      var $137=HEAP[$136];
      var $138=$137 & -5;
      HEAP[$136]=$138;
      __label__ = 26; break;
    case 26: 
      var $140=$ret;
      $1=$140;
      __label__ = 27; break;
    case 27: 
      var $142=$1;
      ;
      return $142;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_sar32["X"]=1;

function _op_sar1_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_sar32($3, $4, 1);
  ;
  return $5;
}


function _op_sar_cl_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_sar32($3, $4, $12);
  ;
  return $13;
}


function _op_shr8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $osrc;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$2;
      var $6=(($5+180)|0);
      var $7=(($6+2)|0);
      var $8=HEAP[$7];
      var $9=(($8 << 24) >> 24)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$4;
      var $12=(($11)&255);
      var $13=$12 & 31;
      $oshic=$13;
      __label__ = 4; break;
    case 3: 
      var $15=$4;
      var $16=(($15)&255);
      $oshic=$16;
      __label__ = 4; break;
    case 4: 
      var $18=$oshic;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $21=$3;
      $1=$21;
      __label__ = 27; break;
    case 6: 
      var $23=$oshic;
      $shic=$23;
      var $24=$3;
      $osrc=$24;
      var $25=$3;
      $ret=$25;
      var $26=$shic;
      var $27=(($26)|0) > 1;
      if ($27) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $29=$shic;
      var $30=(($29-1)|0);
      var $31=$ret;
      var $32=(($31)&255);
      var $33=$32 >> (($30)|0);
      var $34=(($33) & 255);
      $ret=$34;
      __label__ = 8; break;
    case 8: 
      var $36=$ret;
      var $37=(($36)&255);
      var $38=$37 & 1;
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $41=$2;
      var $42=(($41+4)|0);
      var $43=(($42+96)|0);
      var $44=$43;
      var $45=HEAP[$44];
      var $46=$45 | 1;
      HEAP[$44]=$46;
      __label__ = 11; break;
    case 10: 
      var $48=$2;
      var $49=(($48+4)|0);
      var $50=(($49+96)|0);
      var $51=$50;
      var $52=HEAP[$51];
      var $53=$52 & -2;
      HEAP[$51]=$53;
      __label__ = 11; break;
    case 11: 
      var $55=$ret;
      var $56=(($55)&255);
      var $57=$56 >> 1;
      var $58=(($57) & 255);
      $ret=$58;
      var $59=$oshic;
      var $60=(($59)|0)==1;
      if ($60) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $62=$osrc;
      var $63=(($62)&255);
      var $64=$63 >> 7;
      var $65=(($64)|0)!=0;
      if ($65) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $67=$2;
      var $68=(($67+4)|0);
      var $69=(($68+96)|0);
      var $70=$69;
      var $71=HEAP[$70];
      var $72=$71 | 2048;
      HEAP[$70]=$72;
      __label__ = 15; break;
    case 14: 
      var $74=$2;
      var $75=(($74+4)|0);
      var $76=(($75+96)|0);
      var $77=$76;
      var $78=HEAP[$77];
      var $79=$78 & -2049;
      HEAP[$77]=$79;
      __label__ = 15; break;
    case 15: 
      __label__ = 17; break;
    case 16: 
      var $82=$2;
      var $83=(($82+4)|0);
      var $84=(($83+96)|0);
      var $85=$84;
      var $86=HEAP[$85];
      var $87=$86 & -2049;
      HEAP[$85]=$87;
      __label__ = 17; break;
    case 17: 
      var $89=$ret;
      var $90=(($89)&255);
      var $91=$90 & 128;
      var $92=(($91)|0)!=0;
      if ($92) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $94=$2;
      var $95=(($94+4)|0);
      var $96=(($95+96)|0);
      var $97=$96;
      var $98=HEAP[$97];
      var $99=$98 | 128;
      HEAP[$97]=$99;
      __label__ = 20; break;
    case 19: 
      var $101=$2;
      var $102=(($101+4)|0);
      var $103=(($102+96)|0);
      var $104=$103;
      var $105=HEAP[$104];
      var $106=$105 & -129;
      HEAP[$104]=$106;
      __label__ = 20; break;
    case 20: 
      var $108=$ret;
      var $109=(($108 << 24) >> 24)!=0;
      if ($109) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $111=$2;
      var $112=(($111+4)|0);
      var $113=(($112+96)|0);
      var $114=$113;
      var $115=HEAP[$114];
      var $116=$115 | 64;
      HEAP[$114]=$116;
      __label__ = 23; break;
    case 22: 
      var $118=$2;
      var $119=(($118+4)|0);
      var $120=(($119+96)|0);
      var $121=$120;
      var $122=HEAP[$121];
      var $123=$122 & -65;
      HEAP[$121]=$123;
      __label__ = 23; break;
    case 23: 
      var $125=$2;
      var $126=(($125+4)|0);
      var $127=(($126+96)|0);
      var $128=$127;
      var $129=HEAP[$128];
      var $130=$129 & -17;
      HEAP[$128]=$130;
      var $131=$ret;
      var $132=_softx86_parity8($131);
      var $133=(($132)|0)!=0;
      if ($133) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $135=$2;
      var $136=(($135+4)|0);
      var $137=(($136+96)|0);
      var $138=$137;
      var $139=HEAP[$138];
      var $140=$139 | 4;
      HEAP[$138]=$140;
      __label__ = 26; break;
    case 25: 
      var $142=$2;
      var $143=(($142+4)|0);
      var $144=(($143+96)|0);
      var $145=$144;
      var $146=HEAP[$145];
      var $147=$146 & -5;
      HEAP[$145]=$147;
      __label__ = 26; break;
    case 26: 
      var $149=$ret;
      $1=$149;
      __label__ = 27; break;
    case 27: 
      var $151=$1;
      ;
      return $151;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_shr8["X"]=1;

function _op_shr1_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_shr8($3, $4, 1);
  ;
  return $5;
}


function _op_shr_cl_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=_op_shr8($3, $4, $11);
  ;
  return $12;
}


function _op_shr16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $osrc;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$2;
      var $6=(($5+180)|0);
      var $7=(($6+2)|0);
      var $8=HEAP[$7];
      var $9=(($8 << 24) >> 24)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$4;
      var $12=(($11)&65535);
      var $13=$12 & 31;
      $oshic=$13;
      __label__ = 4; break;
    case 3: 
      var $15=$4;
      var $16=(($15)&65535);
      $oshic=$16;
      __label__ = 4; break;
    case 4: 
      var $18=$oshic;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $21=$3;
      $1=$21;
      __label__ = 27; break;
    case 6: 
      var $23=$oshic;
      $shic=$23;
      var $24=$3;
      $osrc=$24;
      var $25=$3;
      $ret=$25;
      var $26=$shic;
      var $27=(($26)|0) > 1;
      if ($27) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $29=$shic;
      var $30=(($29-1)|0);
      var $31=$ret;
      var $32=(($31)&65535);
      var $33=$32 >> (($30)|0);
      var $34=(($33) & 65535);
      $ret=$34;
      __label__ = 8; break;
    case 8: 
      var $36=$ret;
      var $37=(($36)&65535);
      var $38=$37 & 1;
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $41=$2;
      var $42=(($41+4)|0);
      var $43=(($42+96)|0);
      var $44=$43;
      var $45=HEAP[$44];
      var $46=$45 | 1;
      HEAP[$44]=$46;
      __label__ = 11; break;
    case 10: 
      var $48=$2;
      var $49=(($48+4)|0);
      var $50=(($49+96)|0);
      var $51=$50;
      var $52=HEAP[$51];
      var $53=$52 & -2;
      HEAP[$51]=$53;
      __label__ = 11; break;
    case 11: 
      var $55=$ret;
      var $56=(($55)&65535);
      var $57=$56 >> 1;
      var $58=(($57) & 65535);
      $ret=$58;
      var $59=$oshic;
      var $60=(($59)|0)==1;
      if ($60) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $62=$osrc;
      var $63=(($62)&65535);
      var $64=$63 >> 15;
      var $65=(($64)|0)!=0;
      if ($65) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $67=$2;
      var $68=(($67+4)|0);
      var $69=(($68+96)|0);
      var $70=$69;
      var $71=HEAP[$70];
      var $72=$71 | 2048;
      HEAP[$70]=$72;
      __label__ = 15; break;
    case 14: 
      var $74=$2;
      var $75=(($74+4)|0);
      var $76=(($75+96)|0);
      var $77=$76;
      var $78=HEAP[$77];
      var $79=$78 & -2049;
      HEAP[$77]=$79;
      __label__ = 15; break;
    case 15: 
      __label__ = 17; break;
    case 16: 
      var $82=$2;
      var $83=(($82+4)|0);
      var $84=(($83+96)|0);
      var $85=$84;
      var $86=HEAP[$85];
      var $87=$86 & -2049;
      HEAP[$85]=$87;
      __label__ = 17; break;
    case 17: 
      var $89=$ret;
      var $90=(($89)&65535);
      var $91=$90 & 32768;
      var $92=(($91)|0)!=0;
      if ($92) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $94=$2;
      var $95=(($94+4)|0);
      var $96=(($95+96)|0);
      var $97=$96;
      var $98=HEAP[$97];
      var $99=$98 | 128;
      HEAP[$97]=$99;
      __label__ = 20; break;
    case 19: 
      var $101=$2;
      var $102=(($101+4)|0);
      var $103=(($102+96)|0);
      var $104=$103;
      var $105=HEAP[$104];
      var $106=$105 & -129;
      HEAP[$104]=$106;
      __label__ = 20; break;
    case 20: 
      var $108=$ret;
      var $109=(($108 << 16) >> 16)!=0;
      if ($109) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $111=$2;
      var $112=(($111+4)|0);
      var $113=(($112+96)|0);
      var $114=$113;
      var $115=HEAP[$114];
      var $116=$115 | 64;
      HEAP[$114]=$116;
      __label__ = 23; break;
    case 22: 
      var $118=$2;
      var $119=(($118+4)|0);
      var $120=(($119+96)|0);
      var $121=$120;
      var $122=HEAP[$121];
      var $123=$122 & -65;
      HEAP[$121]=$123;
      __label__ = 23; break;
    case 23: 
      var $125=$2;
      var $126=(($125+4)|0);
      var $127=(($126+96)|0);
      var $128=$127;
      var $129=HEAP[$128];
      var $130=$129 & -17;
      HEAP[$128]=$130;
      var $131=$ret;
      var $132=_softx86_parity16($131);
      var $133=(($132)|0)!=0;
      if ($133) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $135=$2;
      var $136=(($135+4)|0);
      var $137=(($136+96)|0);
      var $138=$137;
      var $139=HEAP[$138];
      var $140=$139 | 4;
      HEAP[$138]=$140;
      __label__ = 26; break;
    case 25: 
      var $142=$2;
      var $143=(($142+4)|0);
      var $144=(($143+96)|0);
      var $145=$144;
      var $146=HEAP[$145];
      var $147=$146 & -5;
      HEAP[$145]=$147;
      __label__ = 26; break;
    case 26: 
      var $149=$ret;
      $1=$149;
      __label__ = 27; break;
    case 27: 
      var $151=$1;
      ;
      return $151;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_shr16["X"]=1;

function _op_shr1_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_shr16($3, $4, 1);
  ;
  return $5;
}


function _op_shr_cl_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_shr16($3, $4, $12);
  ;
  return $13;
}


function _op_shr32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $osrc;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$2;
      var $6=(($5+180)|0);
      var $7=(($6+2)|0);
      var $8=HEAP[$7];
      var $9=(($8 << 24) >> 24)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$4;
      var $12=$11 & 31;
      $oshic=$12;
      __label__ = 4; break;
    case 3: 
      var $14=$4;
      $oshic=$14;
      __label__ = 4; break;
    case 4: 
      var $16=$oshic;
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $19=$3;
      $1=$19;
      __label__ = 27; break;
    case 6: 
      var $21=$oshic;
      $shic=$21;
      var $22=$3;
      $osrc=$22;
      var $23=$3;
      $ret=$23;
      var $24=$shic;
      var $25=(($24)|0) > 1;
      if ($25) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $27=$shic;
      var $28=(($27-1)|0);
      var $29=$ret;
      var $30=$29 >>> (($28)>>>0);
      $ret=$30;
      __label__ = 8; break;
    case 8: 
      var $32=$ret;
      var $33=$32 & 1;
      var $34=(($33)|0)!=0;
      if ($34) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $36=$2;
      var $37=(($36+4)|0);
      var $38=(($37+96)|0);
      var $39=$38;
      var $40=HEAP[$39];
      var $41=$40 | 1;
      HEAP[$39]=$41;
      __label__ = 11; break;
    case 10: 
      var $43=$2;
      var $44=(($43+4)|0);
      var $45=(($44+96)|0);
      var $46=$45;
      var $47=HEAP[$46];
      var $48=$47 & -2;
      HEAP[$46]=$48;
      __label__ = 11; break;
    case 11: 
      var $50=$ret;
      var $51=$50 >>> 1;
      $ret=$51;
      var $52=$oshic;
      var $53=(($52)|0)==1;
      if ($53) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $55=$osrc;
      var $56=$55 >>> 31;
      var $57=(($56)|0)!=0;
      if ($57) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $59=$2;
      var $60=(($59+4)|0);
      var $61=(($60+96)|0);
      var $62=$61;
      var $63=HEAP[$62];
      var $64=$63 | 2048;
      HEAP[$62]=$64;
      __label__ = 15; break;
    case 14: 
      var $66=$2;
      var $67=(($66+4)|0);
      var $68=(($67+96)|0);
      var $69=$68;
      var $70=HEAP[$69];
      var $71=$70 & -2049;
      HEAP[$69]=$71;
      __label__ = 15; break;
    case 15: 
      __label__ = 17; break;
    case 16: 
      var $74=$2;
      var $75=(($74+4)|0);
      var $76=(($75+96)|0);
      var $77=$76;
      var $78=HEAP[$77];
      var $79=$78 & -2049;
      HEAP[$77]=$79;
      __label__ = 17; break;
    case 17: 
      var $81=$ret;
      var $82=$81 & -2147483648;
      var $83=(($82)|0)!=0;
      if ($83) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $85=$2;
      var $86=(($85+4)|0);
      var $87=(($86+96)|0);
      var $88=$87;
      var $89=HEAP[$88];
      var $90=$89 | 128;
      HEAP[$88]=$90;
      __label__ = 20; break;
    case 19: 
      var $92=$2;
      var $93=(($92+4)|0);
      var $94=(($93+96)|0);
      var $95=$94;
      var $96=HEAP[$95];
      var $97=$96 & -129;
      HEAP[$95]=$97;
      __label__ = 20; break;
    case 20: 
      var $99=$ret;
      var $100=(($99)|0)!=0;
      if ($100) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $102=$2;
      var $103=(($102+4)|0);
      var $104=(($103+96)|0);
      var $105=$104;
      var $106=HEAP[$105];
      var $107=$106 | 64;
      HEAP[$105]=$107;
      __label__ = 23; break;
    case 22: 
      var $109=$2;
      var $110=(($109+4)|0);
      var $111=(($110+96)|0);
      var $112=$111;
      var $113=HEAP[$112];
      var $114=$113 & -65;
      HEAP[$112]=$114;
      __label__ = 23; break;
    case 23: 
      var $116=$2;
      var $117=(($116+4)|0);
      var $118=(($117+96)|0);
      var $119=$118;
      var $120=HEAP[$119];
      var $121=$120 & -17;
      HEAP[$119]=$121;
      var $122=$ret;
      var $123=_softx86_parity32($122);
      var $124=(($123)|0)!=0;
      if ($124) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $126=$2;
      var $127=(($126+4)|0);
      var $128=(($127+96)|0);
      var $129=$128;
      var $130=HEAP[$129];
      var $131=$130 | 4;
      HEAP[$129]=$131;
      __label__ = 26; break;
    case 25: 
      var $133=$2;
      var $134=(($133+4)|0);
      var $135=(($134+96)|0);
      var $136=$135;
      var $137=HEAP[$136];
      var $138=$137 & -5;
      HEAP[$136]=$138;
      __label__ = 26; break;
    case 26: 
      var $140=$ret;
      $1=$140;
      __label__ = 27; break;
    case 27: 
      var $142=$1;
      ;
      return $142;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_shr32["X"]=1;

function _op_shr1_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_shr32($3, $4, 1);
  ;
  return $5;
}


function _op_shr_cl_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_shr32($3, $4, $12);
  ;
  return $13;
}


function _op_shl8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$2;
      var $6=(($5+180)|0);
      var $7=(($6+2)|0);
      var $8=HEAP[$7];
      var $9=(($8 << 24) >> 24)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$4;
      var $12=(($11)&255);
      var $13=$12 & 31;
      $oshic=$13;
      __label__ = 4; break;
    case 3: 
      var $15=$4;
      var $16=(($15)&255);
      $oshic=$16;
      __label__ = 4; break;
    case 4: 
      var $18=$oshic;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $21=$3;
      $1=$21;
      __label__ = 27; break;
    case 6: 
      var $23=$oshic;
      $shic=$23;
      var $24=$3;
      $ret=$24;
      var $25=$shic;
      var $26=(($25)|0) > 1;
      if ($26) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $28=$shic;
      var $29=(($28-1)|0);
      var $30=$ret;
      var $31=(($30)&255);
      var $32=$31 << $29;
      var $33=(($32) & 255);
      $ret=$33;
      __label__ = 8; break;
    case 8: 
      var $35=$ret;
      var $36=(($35)&255);
      var $37=$36 & 128;
      var $38=(($37)|0)!=0;
      if ($38) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $40=$2;
      var $41=(($40+4)|0);
      var $42=(($41+96)|0);
      var $43=$42;
      var $44=HEAP[$43];
      var $45=$44 | 1;
      HEAP[$43]=$45;
      __label__ = 11; break;
    case 10: 
      var $47=$2;
      var $48=(($47+4)|0);
      var $49=(($48+96)|0);
      var $50=$49;
      var $51=HEAP[$50];
      var $52=$51 & -2;
      HEAP[$50]=$52;
      __label__ = 11; break;
    case 11: 
      var $54=$ret;
      var $55=(($54)&255);
      var $56=$55 << 1;
      var $57=(($56) & 255);
      $ret=$57;
      var $58=$oshic;
      var $59=(($58)|0)==1;
      if ($59) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $61=$ret;
      var $62=(($61)&255);
      var $63=$62 >> 7;
      var $64=$2;
      var $65=(($64+4)|0);
      var $66=(($65+96)|0);
      var $67=$66;
      var $68=HEAP[$67];
      var $69=$68 >>> 0;
      var $70=$69 & 1;
      var $71=$63 ^ $70;
      var $72=(($71)|0)!=0;
      if ($72) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $74=$2;
      var $75=(($74+4)|0);
      var $76=(($75+96)|0);
      var $77=$76;
      var $78=HEAP[$77];
      var $79=$78 | 2048;
      HEAP[$77]=$79;
      __label__ = 15; break;
    case 14: 
      var $81=$2;
      var $82=(($81+4)|0);
      var $83=(($82+96)|0);
      var $84=$83;
      var $85=HEAP[$84];
      var $86=$85 & -2049;
      HEAP[$84]=$86;
      __label__ = 15; break;
    case 15: 
      __label__ = 17; break;
    case 16: 
      var $89=$2;
      var $90=(($89+4)|0);
      var $91=(($90+96)|0);
      var $92=$91;
      var $93=HEAP[$92];
      var $94=$93 & -2049;
      HEAP[$92]=$94;
      __label__ = 17; break;
    case 17: 
      var $96=$ret;
      var $97=(($96)&255);
      var $98=$97 & 128;
      var $99=(($98)|0)!=0;
      if ($99) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $101=$2;
      var $102=(($101+4)|0);
      var $103=(($102+96)|0);
      var $104=$103;
      var $105=HEAP[$104];
      var $106=$105 | 128;
      HEAP[$104]=$106;
      __label__ = 20; break;
    case 19: 
      var $108=$2;
      var $109=(($108+4)|0);
      var $110=(($109+96)|0);
      var $111=$110;
      var $112=HEAP[$111];
      var $113=$112 & -129;
      HEAP[$111]=$113;
      __label__ = 20; break;
    case 20: 
      var $115=$ret;
      var $116=(($115 << 24) >> 24)!=0;
      if ($116) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $118=$2;
      var $119=(($118+4)|0);
      var $120=(($119+96)|0);
      var $121=$120;
      var $122=HEAP[$121];
      var $123=$122 | 64;
      HEAP[$121]=$123;
      __label__ = 23; break;
    case 22: 
      var $125=$2;
      var $126=(($125+4)|0);
      var $127=(($126+96)|0);
      var $128=$127;
      var $129=HEAP[$128];
      var $130=$129 & -65;
      HEAP[$128]=$130;
      __label__ = 23; break;
    case 23: 
      var $132=$2;
      var $133=(($132+4)|0);
      var $134=(($133+96)|0);
      var $135=$134;
      var $136=HEAP[$135];
      var $137=$136 & -17;
      HEAP[$135]=$137;
      var $138=$ret;
      var $139=_softx86_parity8($138);
      var $140=(($139)|0)!=0;
      if ($140) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $142=$2;
      var $143=(($142+4)|0);
      var $144=(($143+96)|0);
      var $145=$144;
      var $146=HEAP[$145];
      var $147=$146 | 4;
      HEAP[$145]=$147;
      __label__ = 26; break;
    case 25: 
      var $149=$2;
      var $150=(($149+4)|0);
      var $151=(($150+96)|0);
      var $152=$151;
      var $153=HEAP[$152];
      var $154=$153 & -5;
      HEAP[$152]=$154;
      __label__ = 26; break;
    case 26: 
      var $156=$ret;
      $1=$156;
      __label__ = 27; break;
    case 27: 
      var $158=$1;
      ;
      return $158;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_shl8["X"]=1;

function _op_shl1_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_shl8($3, $4, 1);
  ;
  return $5;
}


function _op_shl_cl_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=_op_shl8($3, $4, $11);
  ;
  return $12;
}


function _op_shl16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$2;
      var $6=(($5+180)|0);
      var $7=(($6+2)|0);
      var $8=HEAP[$7];
      var $9=(($8 << 24) >> 24)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$4;
      var $12=(($11)&65535);
      var $13=$12 & 31;
      $oshic=$13;
      __label__ = 4; break;
    case 3: 
      var $15=$4;
      var $16=(($15)&65535);
      $oshic=$16;
      __label__ = 4; break;
    case 4: 
      var $18=$oshic;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $21=$3;
      $1=$21;
      __label__ = 27; break;
    case 6: 
      var $23=$oshic;
      $shic=$23;
      var $24=$3;
      $ret=$24;
      var $25=$shic;
      var $26=(($25)|0) > 1;
      if ($26) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $28=$shic;
      var $29=(($28-1)|0);
      var $30=$ret;
      var $31=(($30)&65535);
      var $32=$31 << $29;
      var $33=(($32) & 65535);
      $ret=$33;
      __label__ = 8; break;
    case 8: 
      var $35=$ret;
      var $36=(($35)&65535);
      var $37=$36 & 32768;
      var $38=(($37)|0)!=0;
      if ($38) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $40=$2;
      var $41=(($40+4)|0);
      var $42=(($41+96)|0);
      var $43=$42;
      var $44=HEAP[$43];
      var $45=$44 | 1;
      HEAP[$43]=$45;
      __label__ = 11; break;
    case 10: 
      var $47=$2;
      var $48=(($47+4)|0);
      var $49=(($48+96)|0);
      var $50=$49;
      var $51=HEAP[$50];
      var $52=$51 & -2;
      HEAP[$50]=$52;
      __label__ = 11; break;
    case 11: 
      var $54=$ret;
      var $55=(($54)&65535);
      var $56=$55 << 1;
      var $57=(($56) & 65535);
      $ret=$57;
      var $58=$oshic;
      var $59=(($58)|0)==1;
      if ($59) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $61=$ret;
      var $62=(($61)&65535);
      var $63=$62 >> 15;
      var $64=$2;
      var $65=(($64+4)|0);
      var $66=(($65+96)|0);
      var $67=$66;
      var $68=HEAP[$67];
      var $69=$68 >>> 0;
      var $70=$69 & 1;
      var $71=$63 ^ $70;
      var $72=(($71)|0)!=0;
      if ($72) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $74=$2;
      var $75=(($74+4)|0);
      var $76=(($75+96)|0);
      var $77=$76;
      var $78=HEAP[$77];
      var $79=$78 | 2048;
      HEAP[$77]=$79;
      __label__ = 15; break;
    case 14: 
      var $81=$2;
      var $82=(($81+4)|0);
      var $83=(($82+96)|0);
      var $84=$83;
      var $85=HEAP[$84];
      var $86=$85 & -2049;
      HEAP[$84]=$86;
      __label__ = 15; break;
    case 15: 
      __label__ = 17; break;
    case 16: 
      var $89=$2;
      var $90=(($89+4)|0);
      var $91=(($90+96)|0);
      var $92=$91;
      var $93=HEAP[$92];
      var $94=$93 & -2049;
      HEAP[$92]=$94;
      __label__ = 17; break;
    case 17: 
      var $96=$ret;
      var $97=(($96)&65535);
      var $98=$97 & 32768;
      var $99=(($98)|0)!=0;
      if ($99) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $101=$2;
      var $102=(($101+4)|0);
      var $103=(($102+96)|0);
      var $104=$103;
      var $105=HEAP[$104];
      var $106=$105 | 128;
      HEAP[$104]=$106;
      __label__ = 20; break;
    case 19: 
      var $108=$2;
      var $109=(($108+4)|0);
      var $110=(($109+96)|0);
      var $111=$110;
      var $112=HEAP[$111];
      var $113=$112 & -129;
      HEAP[$111]=$113;
      __label__ = 20; break;
    case 20: 
      var $115=$ret;
      var $116=(($115 << 16) >> 16)!=0;
      if ($116) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $118=$2;
      var $119=(($118+4)|0);
      var $120=(($119+96)|0);
      var $121=$120;
      var $122=HEAP[$121];
      var $123=$122 | 64;
      HEAP[$121]=$123;
      __label__ = 23; break;
    case 22: 
      var $125=$2;
      var $126=(($125+4)|0);
      var $127=(($126+96)|0);
      var $128=$127;
      var $129=HEAP[$128];
      var $130=$129 & -65;
      HEAP[$128]=$130;
      __label__ = 23; break;
    case 23: 
      var $132=$2;
      var $133=(($132+4)|0);
      var $134=(($133+96)|0);
      var $135=$134;
      var $136=HEAP[$135];
      var $137=$136 & -17;
      HEAP[$135]=$137;
      var $138=$ret;
      var $139=_softx86_parity16($138);
      var $140=(($139)|0)!=0;
      if ($140) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $142=$2;
      var $143=(($142+4)|0);
      var $144=(($143+96)|0);
      var $145=$144;
      var $146=HEAP[$145];
      var $147=$146 | 4;
      HEAP[$145]=$147;
      __label__ = 26; break;
    case 25: 
      var $149=$2;
      var $150=(($149+4)|0);
      var $151=(($150+96)|0);
      var $152=$151;
      var $153=HEAP[$152];
      var $154=$153 & -5;
      HEAP[$152]=$154;
      __label__ = 26; break;
    case 26: 
      var $156=$ret;
      $1=$156;
      __label__ = 27; break;
    case 27: 
      var $158=$1;
      ;
      return $158;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_shl16["X"]=1;

function _op_shl1_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_shl16($3, $4, 1);
  ;
  return $5;
}


function _op_shl_cl_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_shl16($3, $4, $12);
  ;
  return $13;
}


function _op_shl32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$2;
      var $6=(($5+180)|0);
      var $7=(($6+2)|0);
      var $8=HEAP[$7];
      var $9=(($8 << 24) >> 24)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $11=$4;
      var $12=$11 & 31;
      $oshic=$12;
      __label__ = 4; break;
    case 3: 
      var $14=$4;
      $oshic=$14;
      __label__ = 4; break;
    case 4: 
      var $16=$oshic;
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $19=$3;
      $1=$19;
      __label__ = 27; break;
    case 6: 
      var $21=$oshic;
      $shic=$21;
      var $22=$3;
      $ret=$22;
      var $23=$shic;
      var $24=(($23)|0) > 1;
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $26=$shic;
      var $27=(($26-1)|0);
      var $28=$ret;
      var $29=$28 << $27;
      $ret=$29;
      __label__ = 8; break;
    case 8: 
      var $31=$ret;
      var $32=$31 & -2147483648;
      var $33=(($32)|0)!=0;
      if ($33) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $35=$2;
      var $36=(($35+4)|0);
      var $37=(($36+96)|0);
      var $38=$37;
      var $39=HEAP[$38];
      var $40=$39 | 1;
      HEAP[$38]=$40;
      __label__ = 11; break;
    case 10: 
      var $42=$2;
      var $43=(($42+4)|0);
      var $44=(($43+96)|0);
      var $45=$44;
      var $46=HEAP[$45];
      var $47=$46 & -2;
      HEAP[$45]=$47;
      __label__ = 11; break;
    case 11: 
      var $49=$ret;
      var $50=$49 << 1;
      $ret=$50;
      var $51=$oshic;
      var $52=(($51)|0)==1;
      if ($52) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $54=$ret;
      var $55=$54 >>> 31;
      var $56=$2;
      var $57=(($56+4)|0);
      var $58=(($57+96)|0);
      var $59=$58;
      var $60=HEAP[$59];
      var $61=$60 >>> 0;
      var $62=$61 & 1;
      var $63=$55 ^ $62;
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $66=$2;
      var $67=(($66+4)|0);
      var $68=(($67+96)|0);
      var $69=$68;
      var $70=HEAP[$69];
      var $71=$70 | 2048;
      HEAP[$69]=$71;
      __label__ = 15; break;
    case 14: 
      var $73=$2;
      var $74=(($73+4)|0);
      var $75=(($74+96)|0);
      var $76=$75;
      var $77=HEAP[$76];
      var $78=$77 & -2049;
      HEAP[$76]=$78;
      __label__ = 15; break;
    case 15: 
      __label__ = 17; break;
    case 16: 
      var $81=$2;
      var $82=(($81+4)|0);
      var $83=(($82+96)|0);
      var $84=$83;
      var $85=HEAP[$84];
      var $86=$85 & -2049;
      HEAP[$84]=$86;
      __label__ = 17; break;
    case 17: 
      var $88=$ret;
      var $89=$88 & -2147483648;
      var $90=(($89)|0)!=0;
      if ($90) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $92=$2;
      var $93=(($92+4)|0);
      var $94=(($93+96)|0);
      var $95=$94;
      var $96=HEAP[$95];
      var $97=$96 | 128;
      HEAP[$95]=$97;
      __label__ = 20; break;
    case 19: 
      var $99=$2;
      var $100=(($99+4)|0);
      var $101=(($100+96)|0);
      var $102=$101;
      var $103=HEAP[$102];
      var $104=$103 & -129;
      HEAP[$102]=$104;
      __label__ = 20; break;
    case 20: 
      var $106=$ret;
      var $107=(($106)|0)!=0;
      if ($107) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $109=$2;
      var $110=(($109+4)|0);
      var $111=(($110+96)|0);
      var $112=$111;
      var $113=HEAP[$112];
      var $114=$113 | 64;
      HEAP[$112]=$114;
      __label__ = 23; break;
    case 22: 
      var $116=$2;
      var $117=(($116+4)|0);
      var $118=(($117+96)|0);
      var $119=$118;
      var $120=HEAP[$119];
      var $121=$120 & -65;
      HEAP[$119]=$121;
      __label__ = 23; break;
    case 23: 
      var $123=$2;
      var $124=(($123+4)|0);
      var $125=(($124+96)|0);
      var $126=$125;
      var $127=HEAP[$126];
      var $128=$127 & -17;
      HEAP[$126]=$128;
      var $129=$ret;
      var $130=_softx86_parity32($129);
      var $131=(($130)|0)!=0;
      if ($131) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $133=$2;
      var $134=(($133+4)|0);
      var $135=(($134+96)|0);
      var $136=$135;
      var $137=HEAP[$136];
      var $138=$137 | 4;
      HEAP[$136]=$138;
      __label__ = 26; break;
    case 25: 
      var $140=$2;
      var $141=(($140+4)|0);
      var $142=(($141+96)|0);
      var $143=$142;
      var $144=HEAP[$143];
      var $145=$144 & -5;
      HEAP[$143]=$145;
      __label__ = 26; break;
    case 26: 
      var $147=$ret;
      $1=$147;
      __label__ = 27; break;
    case 27: 
      var $149=$1;
      ;
      return $149;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_shl32["X"]=1;

function _op_shl1_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_shl32($3, $4, 1);
  ;
  return $5;
}


function _op_shl_cl_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_shl32($3, $4, $12);
  ;
  return $13;
}


function _op_ror8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$4;
      var $6=(($5)&255);
      var $7=$6 & 7;
      $oshic=$7;
      var $8=$oshic;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $11=$3;
      $1=$11;
      __label__ = 22; break;
    case 3: 
      var $13=$oshic;
      $shic=$13;
      var $14=$3;
      var $15=(($14)&255);
      var $16=$shic;
      var $17=$15 >> (($16)|0);
      var $18=$3;
      var $19=(($18)&255);
      var $20=$shic;
      var $21=((8-$20)|0);
      var $22=$19 << $21;
      var $23=$17 | $22;
      var $24=(($23) & 255);
      $ret=$24;
      var $25=$ret;
      var $26=(($25)&255);
      var $27=$26 & 128;
      var $28=(($27)|0)!=0;
      if ($28) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $30=$2;
      var $31=(($30+4)|0);
      var $32=(($31+96)|0);
      var $33=$32;
      var $34=HEAP[$33];
      var $35=$34 | 1;
      HEAP[$33]=$35;
      __label__ = 6; break;
    case 5: 
      var $37=$2;
      var $38=(($37+4)|0);
      var $39=(($38+96)|0);
      var $40=$39;
      var $41=HEAP[$40];
      var $42=$41 & -2;
      HEAP[$40]=$42;
      __label__ = 6; break;
    case 6: 
      var $44=$oshic;
      var $45=(($44)|0)==1;
      if ($45) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $47=$ret;
      var $48=(($47)&255);
      var $49=$48 >> 7;
      var $50=$ret;
      var $51=(($50)&255);
      var $52=$51 >> 6;
      var $53=$52 & 1;
      var $54=$49 ^ $53;
      var $55=(($54)|0)!=0;
      if ($55) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $57=$2;
      var $58=(($57+4)|0);
      var $59=(($58+96)|0);
      var $60=$59;
      var $61=HEAP[$60];
      var $62=$61 | 2048;
      HEAP[$60]=$62;
      __label__ = 10; break;
    case 9: 
      var $64=$2;
      var $65=(($64+4)|0);
      var $66=(($65+96)|0);
      var $67=$66;
      var $68=HEAP[$67];
      var $69=$68 & -2049;
      HEAP[$67]=$69;
      __label__ = 10; break;
    case 10: 
      __label__ = 12; break;
    case 11: 
      var $72=$2;
      var $73=(($72+4)|0);
      var $74=(($73+96)|0);
      var $75=$74;
      var $76=HEAP[$75];
      var $77=$76 & -2049;
      HEAP[$75]=$77;
      __label__ = 12; break;
    case 12: 
      var $79=$ret;
      var $80=(($79)&255);
      var $81=$80 & 128;
      var $82=(($81)|0)!=0;
      if ($82) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $84=$2;
      var $85=(($84+4)|0);
      var $86=(($85+96)|0);
      var $87=$86;
      var $88=HEAP[$87];
      var $89=$88 | 128;
      HEAP[$87]=$89;
      __label__ = 15; break;
    case 14: 
      var $91=$2;
      var $92=(($91+4)|0);
      var $93=(($92+96)|0);
      var $94=$93;
      var $95=HEAP[$94];
      var $96=$95 & -129;
      HEAP[$94]=$96;
      __label__ = 15; break;
    case 15: 
      var $98=$ret;
      var $99=(($98 << 24) >> 24)!=0;
      if ($99) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $101=$2;
      var $102=(($101+4)|0);
      var $103=(($102+96)|0);
      var $104=$103;
      var $105=HEAP[$104];
      var $106=$105 | 64;
      HEAP[$104]=$106;
      __label__ = 18; break;
    case 17: 
      var $108=$2;
      var $109=(($108+4)|0);
      var $110=(($109+96)|0);
      var $111=$110;
      var $112=HEAP[$111];
      var $113=$112 & -65;
      HEAP[$111]=$113;
      __label__ = 18; break;
    case 18: 
      var $115=$2;
      var $116=(($115+4)|0);
      var $117=(($116+96)|0);
      var $118=$117;
      var $119=HEAP[$118];
      var $120=$119 & -17;
      HEAP[$118]=$120;
      var $121=$ret;
      var $122=_softx86_parity8($121);
      var $123=(($122)|0)!=0;
      if ($123) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $125=$2;
      var $126=(($125+4)|0);
      var $127=(($126+96)|0);
      var $128=$127;
      var $129=HEAP[$128];
      var $130=$129 | 4;
      HEAP[$128]=$130;
      __label__ = 21; break;
    case 20: 
      var $132=$2;
      var $133=(($132+4)|0);
      var $134=(($133+96)|0);
      var $135=$134;
      var $136=HEAP[$135];
      var $137=$136 & -5;
      HEAP[$135]=$137;
      __label__ = 21; break;
    case 21: 
      var $139=$ret;
      $1=$139;
      __label__ = 22; break;
    case 22: 
      var $141=$1;
      ;
      return $141;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_ror8["X"]=1;

function _op_ror1_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_ror8($3, $4, 1);
  ;
  return $5;
}


function _op_ror_cl_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=_op_ror8($3, $4, $11);
  ;
  return $12;
}


function _op_ror16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$4;
      var $6=(($5)&65535);
      var $7=$6 & 15;
      $oshic=$7;
      var $8=$oshic;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $11=$3;
      $1=$11;
      __label__ = 22; break;
    case 3: 
      var $13=$oshic;
      $shic=$13;
      var $14=$3;
      var $15=(($14)&65535);
      var $16=$shic;
      var $17=$15 >> (($16)|0);
      var $18=$3;
      var $19=(($18)&65535);
      var $20=$shic;
      var $21=((16-$20)|0);
      var $22=$19 << $21;
      var $23=$17 | $22;
      var $24=(($23) & 65535);
      $ret=$24;
      var $25=$ret;
      var $26=(($25)&65535);
      var $27=$26 & 32768;
      var $28=(($27)|0)!=0;
      if ($28) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $30=$2;
      var $31=(($30+4)|0);
      var $32=(($31+96)|0);
      var $33=$32;
      var $34=HEAP[$33];
      var $35=$34 | 1;
      HEAP[$33]=$35;
      __label__ = 6; break;
    case 5: 
      var $37=$2;
      var $38=(($37+4)|0);
      var $39=(($38+96)|0);
      var $40=$39;
      var $41=HEAP[$40];
      var $42=$41 & -2;
      HEAP[$40]=$42;
      __label__ = 6; break;
    case 6: 
      var $44=$oshic;
      var $45=(($44)|0)==1;
      if ($45) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $47=$ret;
      var $48=(($47)&65535);
      var $49=$48 >> 15;
      var $50=$ret;
      var $51=(($50)&65535);
      var $52=$51 >> 14;
      var $53=$52 & 1;
      var $54=$49 ^ $53;
      var $55=(($54)|0)!=0;
      if ($55) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $57=$2;
      var $58=(($57+4)|0);
      var $59=(($58+96)|0);
      var $60=$59;
      var $61=HEAP[$60];
      var $62=$61 | 2048;
      HEAP[$60]=$62;
      __label__ = 10; break;
    case 9: 
      var $64=$2;
      var $65=(($64+4)|0);
      var $66=(($65+96)|0);
      var $67=$66;
      var $68=HEAP[$67];
      var $69=$68 & -2049;
      HEAP[$67]=$69;
      __label__ = 10; break;
    case 10: 
      __label__ = 12; break;
    case 11: 
      var $72=$2;
      var $73=(($72+4)|0);
      var $74=(($73+96)|0);
      var $75=$74;
      var $76=HEAP[$75];
      var $77=$76 & -2049;
      HEAP[$75]=$77;
      __label__ = 12; break;
    case 12: 
      var $79=$ret;
      var $80=(($79)&65535);
      var $81=$80 & 32768;
      var $82=(($81)|0)!=0;
      if ($82) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $84=$2;
      var $85=(($84+4)|0);
      var $86=(($85+96)|0);
      var $87=$86;
      var $88=HEAP[$87];
      var $89=$88 | 128;
      HEAP[$87]=$89;
      __label__ = 15; break;
    case 14: 
      var $91=$2;
      var $92=(($91+4)|0);
      var $93=(($92+96)|0);
      var $94=$93;
      var $95=HEAP[$94];
      var $96=$95 & -129;
      HEAP[$94]=$96;
      __label__ = 15; break;
    case 15: 
      var $98=$ret;
      var $99=(($98 << 16) >> 16)!=0;
      if ($99) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $101=$2;
      var $102=(($101+4)|0);
      var $103=(($102+96)|0);
      var $104=$103;
      var $105=HEAP[$104];
      var $106=$105 | 64;
      HEAP[$104]=$106;
      __label__ = 18; break;
    case 17: 
      var $108=$2;
      var $109=(($108+4)|0);
      var $110=(($109+96)|0);
      var $111=$110;
      var $112=HEAP[$111];
      var $113=$112 & -65;
      HEAP[$111]=$113;
      __label__ = 18; break;
    case 18: 
      var $115=$2;
      var $116=(($115+4)|0);
      var $117=(($116+96)|0);
      var $118=$117;
      var $119=HEAP[$118];
      var $120=$119 & -17;
      HEAP[$118]=$120;
      var $121=$ret;
      var $122=_softx86_parity16($121);
      var $123=(($122)|0)!=0;
      if ($123) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $125=$2;
      var $126=(($125+4)|0);
      var $127=(($126+96)|0);
      var $128=$127;
      var $129=HEAP[$128];
      var $130=$129 | 4;
      HEAP[$128]=$130;
      __label__ = 21; break;
    case 20: 
      var $132=$2;
      var $133=(($132+4)|0);
      var $134=(($133+96)|0);
      var $135=$134;
      var $136=HEAP[$135];
      var $137=$136 & -5;
      HEAP[$135]=$137;
      __label__ = 21; break;
    case 21: 
      var $139=$ret;
      $1=$139;
      __label__ = 22; break;
    case 22: 
      var $141=$1;
      ;
      return $141;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_ror16["X"]=1;

function _op_ror1_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_ror16($3, $4, 1);
  ;
  return $5;
}


function _op_ror_cl_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_ror16($3, $4, $12);
  ;
  return $13;
}


function _op_ror32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$4;
      var $6=$5 & 31;
      $oshic=$6;
      var $7=$oshic;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $10=$3;
      $1=$10;
      __label__ = 22; break;
    case 3: 
      var $12=$oshic;
      $shic=$12;
      var $13=$3;
      var $14=$shic;
      var $15=$13 >>> (($14)>>>0);
      var $16=$3;
      var $17=$shic;
      var $18=((32-$17)|0);
      var $19=$16 << $18;
      var $20=$15 | $19;
      $ret=$20;
      var $21=$ret;
      var $22=$21 & -2147483648;
      var $23=(($22)|0)!=0;
      if ($23) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $25=$2;
      var $26=(($25+4)|0);
      var $27=(($26+96)|0);
      var $28=$27;
      var $29=HEAP[$28];
      var $30=$29 | 1;
      HEAP[$28]=$30;
      __label__ = 6; break;
    case 5: 
      var $32=$2;
      var $33=(($32+4)|0);
      var $34=(($33+96)|0);
      var $35=$34;
      var $36=HEAP[$35];
      var $37=$36 & -2;
      HEAP[$35]=$37;
      __label__ = 6; break;
    case 6: 
      var $39=$oshic;
      var $40=(($39)|0)==1;
      if ($40) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $42=$ret;
      var $43=$42 >>> 31;
      var $44=$ret;
      var $45=$44 >>> 30;
      var $46=$45 & 1;
      var $47=$43 ^ $46;
      var $48=(($47)|0)!=0;
      if ($48) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $50=$2;
      var $51=(($50+4)|0);
      var $52=(($51+96)|0);
      var $53=$52;
      var $54=HEAP[$53];
      var $55=$54 | 2048;
      HEAP[$53]=$55;
      __label__ = 10; break;
    case 9: 
      var $57=$2;
      var $58=(($57+4)|0);
      var $59=(($58+96)|0);
      var $60=$59;
      var $61=HEAP[$60];
      var $62=$61 & -2049;
      HEAP[$60]=$62;
      __label__ = 10; break;
    case 10: 
      __label__ = 12; break;
    case 11: 
      var $65=$2;
      var $66=(($65+4)|0);
      var $67=(($66+96)|0);
      var $68=$67;
      var $69=HEAP[$68];
      var $70=$69 & -2049;
      HEAP[$68]=$70;
      __label__ = 12; break;
    case 12: 
      var $72=$ret;
      var $73=$72 & -2147483648;
      var $74=(($73)|0)!=0;
      if ($74) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $76=$2;
      var $77=(($76+4)|0);
      var $78=(($77+96)|0);
      var $79=$78;
      var $80=HEAP[$79];
      var $81=$80 | 128;
      HEAP[$79]=$81;
      __label__ = 15; break;
    case 14: 
      var $83=$2;
      var $84=(($83+4)|0);
      var $85=(($84+96)|0);
      var $86=$85;
      var $87=HEAP[$86];
      var $88=$87 & -129;
      HEAP[$86]=$88;
      __label__ = 15; break;
    case 15: 
      var $90=$ret;
      var $91=(($90)|0)!=0;
      if ($91) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $93=$2;
      var $94=(($93+4)|0);
      var $95=(($94+96)|0);
      var $96=$95;
      var $97=HEAP[$96];
      var $98=$97 | 64;
      HEAP[$96]=$98;
      __label__ = 18; break;
    case 17: 
      var $100=$2;
      var $101=(($100+4)|0);
      var $102=(($101+96)|0);
      var $103=$102;
      var $104=HEAP[$103];
      var $105=$104 & -65;
      HEAP[$103]=$105;
      __label__ = 18; break;
    case 18: 
      var $107=$2;
      var $108=(($107+4)|0);
      var $109=(($108+96)|0);
      var $110=$109;
      var $111=HEAP[$110];
      var $112=$111 & -17;
      HEAP[$110]=$112;
      var $113=$ret;
      var $114=_softx86_parity32($113);
      var $115=(($114)|0)!=0;
      if ($115) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $117=$2;
      var $118=(($117+4)|0);
      var $119=(($118+96)|0);
      var $120=$119;
      var $121=HEAP[$120];
      var $122=$121 | 4;
      HEAP[$120]=$122;
      __label__ = 21; break;
    case 20: 
      var $124=$2;
      var $125=(($124+4)|0);
      var $126=(($125+96)|0);
      var $127=$126;
      var $128=HEAP[$127];
      var $129=$128 & -5;
      HEAP[$127]=$129;
      __label__ = 21; break;
    case 21: 
      var $131=$ret;
      $1=$131;
      __label__ = 22; break;
    case 22: 
      var $133=$1;
      ;
      return $133;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_ror32["X"]=1;

function _op_ror1_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_ror32($3, $4, 1);
  ;
  return $5;
}


function _op_ror_cl_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_ror32($3, $4, $12);
  ;
  return $13;
}


function _op_rol8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$4;
      var $6=(($5)&255);
      var $7=$6 & 7;
      $oshic=$7;
      var $8=$oshic;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $11=$3;
      $1=$11;
      __label__ = 22; break;
    case 3: 
      var $13=$oshic;
      $shic=$13;
      var $14=$3;
      var $15=(($14)&255);
      var $16=$shic;
      var $17=$15 << $16;
      var $18=$3;
      var $19=(($18)&255);
      var $20=$shic;
      var $21=((8-$20)|0);
      var $22=$19 >> (($21)|0);
      var $23=$17 | $22;
      var $24=(($23) & 255);
      $ret=$24;
      var $25=$ret;
      var $26=(($25)&255);
      var $27=$26 & 1;
      var $28=(($27)|0)!=0;
      if ($28) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $30=$2;
      var $31=(($30+4)|0);
      var $32=(($31+96)|0);
      var $33=$32;
      var $34=HEAP[$33];
      var $35=$34 | 1;
      HEAP[$33]=$35;
      __label__ = 6; break;
    case 5: 
      var $37=$2;
      var $38=(($37+4)|0);
      var $39=(($38+96)|0);
      var $40=$39;
      var $41=HEAP[$40];
      var $42=$41 & -2;
      HEAP[$40]=$42;
      __label__ = 6; break;
    case 6: 
      var $44=$oshic;
      var $45=(($44)|0)==1;
      if ($45) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $47=$ret;
      var $48=(($47)&255);
      var $49=$48 >> 7;
      var $50=$2;
      var $51=(($50+4)|0);
      var $52=(($51+96)|0);
      var $53=$52;
      var $54=HEAP[$53];
      var $55=$54 >>> 0;
      var $56=$55 & 1;
      var $57=$49 ^ $56;
      var $58=(($57)|0)!=0;
      if ($58) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $60=$2;
      var $61=(($60+4)|0);
      var $62=(($61+96)|0);
      var $63=$62;
      var $64=HEAP[$63];
      var $65=$64 | 2048;
      HEAP[$63]=$65;
      __label__ = 10; break;
    case 9: 
      var $67=$2;
      var $68=(($67+4)|0);
      var $69=(($68+96)|0);
      var $70=$69;
      var $71=HEAP[$70];
      var $72=$71 & -2049;
      HEAP[$70]=$72;
      __label__ = 10; break;
    case 10: 
      __label__ = 12; break;
    case 11: 
      var $75=$2;
      var $76=(($75+4)|0);
      var $77=(($76+96)|0);
      var $78=$77;
      var $79=HEAP[$78];
      var $80=$79 & -2049;
      HEAP[$78]=$80;
      __label__ = 12; break;
    case 12: 
      var $82=$ret;
      var $83=(($82)&255);
      var $84=$83 & 128;
      var $85=(($84)|0)!=0;
      if ($85) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $87=$2;
      var $88=(($87+4)|0);
      var $89=(($88+96)|0);
      var $90=$89;
      var $91=HEAP[$90];
      var $92=$91 | 128;
      HEAP[$90]=$92;
      __label__ = 15; break;
    case 14: 
      var $94=$2;
      var $95=(($94+4)|0);
      var $96=(($95+96)|0);
      var $97=$96;
      var $98=HEAP[$97];
      var $99=$98 & -129;
      HEAP[$97]=$99;
      __label__ = 15; break;
    case 15: 
      var $101=$ret;
      var $102=(($101 << 24) >> 24)!=0;
      if ($102) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $104=$2;
      var $105=(($104+4)|0);
      var $106=(($105+96)|0);
      var $107=$106;
      var $108=HEAP[$107];
      var $109=$108 | 64;
      HEAP[$107]=$109;
      __label__ = 18; break;
    case 17: 
      var $111=$2;
      var $112=(($111+4)|0);
      var $113=(($112+96)|0);
      var $114=$113;
      var $115=HEAP[$114];
      var $116=$115 & -65;
      HEAP[$114]=$116;
      __label__ = 18; break;
    case 18: 
      var $118=$2;
      var $119=(($118+4)|0);
      var $120=(($119+96)|0);
      var $121=$120;
      var $122=HEAP[$121];
      var $123=$122 & -17;
      HEAP[$121]=$123;
      var $124=$ret;
      var $125=_softx86_parity8($124);
      var $126=(($125)|0)!=0;
      if ($126) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $128=$2;
      var $129=(($128+4)|0);
      var $130=(($129+96)|0);
      var $131=$130;
      var $132=HEAP[$131];
      var $133=$132 | 4;
      HEAP[$131]=$133;
      __label__ = 21; break;
    case 20: 
      var $135=$2;
      var $136=(($135+4)|0);
      var $137=(($136+96)|0);
      var $138=$137;
      var $139=HEAP[$138];
      var $140=$139 & -5;
      HEAP[$138]=$140;
      __label__ = 21; break;
    case 21: 
      var $142=$ret;
      $1=$142;
      __label__ = 22; break;
    case 22: 
      var $144=$1;
      ;
      return $144;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_rol8["X"]=1;

function _op_rol1_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_rol8($3, $4, 1);
  ;
  return $5;
}


function _op_rol_cl_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=_op_rol8($3, $4, $11);
  ;
  return $12;
}


function _op_rol16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$4;
      var $6=(($5)&65535);
      var $7=$6 & 15;
      $oshic=$7;
      var $8=$oshic;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $11=$3;
      $1=$11;
      __label__ = 22; break;
    case 3: 
      var $13=$oshic;
      $shic=$13;
      var $14=$3;
      var $15=(($14)&65535);
      var $16=$shic;
      var $17=$15 << $16;
      var $18=$3;
      var $19=(($18)&65535);
      var $20=$shic;
      var $21=((16-$20)|0);
      var $22=$19 >> (($21)|0);
      var $23=$17 | $22;
      var $24=(($23) & 65535);
      $ret=$24;
      var $25=$ret;
      var $26=(($25)&65535);
      var $27=$26 & 1;
      var $28=(($27)|0)!=0;
      if ($28) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $30=$2;
      var $31=(($30+4)|0);
      var $32=(($31+96)|0);
      var $33=$32;
      var $34=HEAP[$33];
      var $35=$34 | 1;
      HEAP[$33]=$35;
      __label__ = 6; break;
    case 5: 
      var $37=$2;
      var $38=(($37+4)|0);
      var $39=(($38+96)|0);
      var $40=$39;
      var $41=HEAP[$40];
      var $42=$41 & -2;
      HEAP[$40]=$42;
      __label__ = 6; break;
    case 6: 
      var $44=$oshic;
      var $45=(($44)|0)==1;
      if ($45) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $47=$ret;
      var $48=(($47)&65535);
      var $49=$48 >> 15;
      var $50=$2;
      var $51=(($50+4)|0);
      var $52=(($51+96)|0);
      var $53=$52;
      var $54=HEAP[$53];
      var $55=$54 >>> 0;
      var $56=$55 & 1;
      var $57=$49 ^ $56;
      var $58=(($57)|0)!=0;
      if ($58) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $60=$2;
      var $61=(($60+4)|0);
      var $62=(($61+96)|0);
      var $63=$62;
      var $64=HEAP[$63];
      var $65=$64 | 2048;
      HEAP[$63]=$65;
      __label__ = 10; break;
    case 9: 
      var $67=$2;
      var $68=(($67+4)|0);
      var $69=(($68+96)|0);
      var $70=$69;
      var $71=HEAP[$70];
      var $72=$71 & -2049;
      HEAP[$70]=$72;
      __label__ = 10; break;
    case 10: 
      __label__ = 12; break;
    case 11: 
      var $75=$2;
      var $76=(($75+4)|0);
      var $77=(($76+96)|0);
      var $78=$77;
      var $79=HEAP[$78];
      var $80=$79 & -2049;
      HEAP[$78]=$80;
      __label__ = 12; break;
    case 12: 
      var $82=$ret;
      var $83=(($82)&65535);
      var $84=$83 & 32768;
      var $85=(($84)|0)!=0;
      if ($85) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $87=$2;
      var $88=(($87+4)|0);
      var $89=(($88+96)|0);
      var $90=$89;
      var $91=HEAP[$90];
      var $92=$91 | 128;
      HEAP[$90]=$92;
      __label__ = 15; break;
    case 14: 
      var $94=$2;
      var $95=(($94+4)|0);
      var $96=(($95+96)|0);
      var $97=$96;
      var $98=HEAP[$97];
      var $99=$98 & -129;
      HEAP[$97]=$99;
      __label__ = 15; break;
    case 15: 
      var $101=$ret;
      var $102=(($101 << 16) >> 16)!=0;
      if ($102) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $104=$2;
      var $105=(($104+4)|0);
      var $106=(($105+96)|0);
      var $107=$106;
      var $108=HEAP[$107];
      var $109=$108 | 64;
      HEAP[$107]=$109;
      __label__ = 18; break;
    case 17: 
      var $111=$2;
      var $112=(($111+4)|0);
      var $113=(($112+96)|0);
      var $114=$113;
      var $115=HEAP[$114];
      var $116=$115 & -65;
      HEAP[$114]=$116;
      __label__ = 18; break;
    case 18: 
      var $118=$2;
      var $119=(($118+4)|0);
      var $120=(($119+96)|0);
      var $121=$120;
      var $122=HEAP[$121];
      var $123=$122 & -17;
      HEAP[$121]=$123;
      var $124=$ret;
      var $125=_softx86_parity16($124);
      var $126=(($125)|0)!=0;
      if ($126) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $128=$2;
      var $129=(($128+4)|0);
      var $130=(($129+96)|0);
      var $131=$130;
      var $132=HEAP[$131];
      var $133=$132 | 4;
      HEAP[$131]=$133;
      __label__ = 21; break;
    case 20: 
      var $135=$2;
      var $136=(($135+4)|0);
      var $137=(($136+96)|0);
      var $138=$137;
      var $139=HEAP[$138];
      var $140=$139 & -5;
      HEAP[$138]=$140;
      __label__ = 21; break;
    case 21: 
      var $142=$ret;
      $1=$142;
      __label__ = 22; break;
    case 22: 
      var $144=$1;
      ;
      return $144;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_rol16["X"]=1;

function _op_rol1_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_rol16($3, $4, 1);
  ;
  return $5;
}


function _op_rol_cl_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_rol16($3, $4, $12);
  ;
  return $13;
}


function _op_rol32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$4;
      var $6=$5 & 31;
      $oshic=$6;
      var $7=$oshic;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $10=$3;
      $1=$10;
      __label__ = 22; break;
    case 3: 
      var $12=$oshic;
      $shic=$12;
      var $13=$3;
      var $14=$shic;
      var $15=$13 << $14;
      var $16=$3;
      var $17=$shic;
      var $18=((32-$17)|0);
      var $19=$16 >>> (($18)>>>0);
      var $20=$15 | $19;
      $ret=$20;
      var $21=$ret;
      var $22=$21 & 1;
      var $23=(($22)|0)!=0;
      if ($23) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $25=$2;
      var $26=(($25+4)|0);
      var $27=(($26+96)|0);
      var $28=$27;
      var $29=HEAP[$28];
      var $30=$29 | 1;
      HEAP[$28]=$30;
      __label__ = 6; break;
    case 5: 
      var $32=$2;
      var $33=(($32+4)|0);
      var $34=(($33+96)|0);
      var $35=$34;
      var $36=HEAP[$35];
      var $37=$36 & -2;
      HEAP[$35]=$37;
      __label__ = 6; break;
    case 6: 
      var $39=$oshic;
      var $40=(($39)|0)==1;
      if ($40) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $42=$ret;
      var $43=$42 >>> 31;
      var $44=$2;
      var $45=(($44+4)|0);
      var $46=(($45+96)|0);
      var $47=$46;
      var $48=HEAP[$47];
      var $49=$48 >>> 0;
      var $50=$49 & 1;
      var $51=$43 ^ $50;
      var $52=(($51)|0)!=0;
      if ($52) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $54=$2;
      var $55=(($54+4)|0);
      var $56=(($55+96)|0);
      var $57=$56;
      var $58=HEAP[$57];
      var $59=$58 | 2048;
      HEAP[$57]=$59;
      __label__ = 10; break;
    case 9: 
      var $61=$2;
      var $62=(($61+4)|0);
      var $63=(($62+96)|0);
      var $64=$63;
      var $65=HEAP[$64];
      var $66=$65 & -2049;
      HEAP[$64]=$66;
      __label__ = 10; break;
    case 10: 
      __label__ = 12; break;
    case 11: 
      var $69=$2;
      var $70=(($69+4)|0);
      var $71=(($70+96)|0);
      var $72=$71;
      var $73=HEAP[$72];
      var $74=$73 & -2049;
      HEAP[$72]=$74;
      __label__ = 12; break;
    case 12: 
      var $76=$ret;
      var $77=$76 & -2147483648;
      var $78=(($77)|0)!=0;
      if ($78) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $80=$2;
      var $81=(($80+4)|0);
      var $82=(($81+96)|0);
      var $83=$82;
      var $84=HEAP[$83];
      var $85=$84 | 128;
      HEAP[$83]=$85;
      __label__ = 15; break;
    case 14: 
      var $87=$2;
      var $88=(($87+4)|0);
      var $89=(($88+96)|0);
      var $90=$89;
      var $91=HEAP[$90];
      var $92=$91 & -129;
      HEAP[$90]=$92;
      __label__ = 15; break;
    case 15: 
      var $94=$ret;
      var $95=(($94)|0)!=0;
      if ($95) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $97=$2;
      var $98=(($97+4)|0);
      var $99=(($98+96)|0);
      var $100=$99;
      var $101=HEAP[$100];
      var $102=$101 | 64;
      HEAP[$100]=$102;
      __label__ = 18; break;
    case 17: 
      var $104=$2;
      var $105=(($104+4)|0);
      var $106=(($105+96)|0);
      var $107=$106;
      var $108=HEAP[$107];
      var $109=$108 & -65;
      HEAP[$107]=$109;
      __label__ = 18; break;
    case 18: 
      var $111=$2;
      var $112=(($111+4)|0);
      var $113=(($112+96)|0);
      var $114=$113;
      var $115=HEAP[$114];
      var $116=$115 & -17;
      HEAP[$114]=$116;
      var $117=$ret;
      var $118=(($117) & 65535);
      var $119=_softx86_parity16($118);
      var $120=(($119)|0)!=0;
      if ($120) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $122=$2;
      var $123=(($122+4)|0);
      var $124=(($123+96)|0);
      var $125=$124;
      var $126=HEAP[$125];
      var $127=$126 | 4;
      HEAP[$125]=$127;
      __label__ = 21; break;
    case 20: 
      var $129=$2;
      var $130=(($129+4)|0);
      var $131=(($130+96)|0);
      var $132=$131;
      var $133=HEAP[$132];
      var $134=$133 & -5;
      HEAP[$132]=$134;
      __label__ = 21; break;
    case 21: 
      var $136=$ret;
      $1=$136;
      __label__ = 22; break;
    case 22: 
      var $138=$1;
      ;
      return $138;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_rol32["X"]=1;

function _op_rol1_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_rol32($3, $4, 1);
  ;
  return $5;
}


function _op_rol_cl_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_rol32($3, $4, $12);
  ;
  return $13;
}


function _op_rcl8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $cf;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$4;
      var $6=(($5)&255);
      var $7=(($6)|0)%9;
      $oshic=$7;
      var $8=$oshic;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $11=$3;
      $1=$11;
      __label__ = 25; break;
    case 3: 
      var $13=$3;
      $ret=$13;
      var $14=$oshic;
      $shic=$14;
      __label__ = 4; break;
    case 4: 
      var $16=$shic;
      var $17=(($16-1)|0);
      $shic=$17;
      var $18=(($16)|0) > 0;
      if ($18) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $20=$ret;
      var $21=(($20)&255);
      var $22=$21 >> 7;
      var $23=(($22) & 255);
      $cf=$23;
      var $24=$ret;
      var $25=(($24)&255);
      var $26=$25 << 1;
      var $27=$2;
      var $28=(($27+4)|0);
      var $29=(($28+96)|0);
      var $30=$29;
      var $31=HEAP[$30];
      var $32=$31 >>> 0;
      var $33=$32 & 1;
      var $34=$26 | $33;
      var $35=(($34) & 255);
      $ret=$35;
      var $36=$cf;
      var $37=(($36 << 24) >> 24)!=0;
      if ($37) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $39=$2;
      var $40=(($39+4)|0);
      var $41=(($40+96)|0);
      var $42=$41;
      var $43=HEAP[$42];
      var $44=$43 | 1;
      HEAP[$42]=$44;
      __label__ = 8; break;
    case 7: 
      var $46=$2;
      var $47=(($46+4)|0);
      var $48=(($47+96)|0);
      var $49=$48;
      var $50=HEAP[$49];
      var $51=$50 & -2;
      HEAP[$49]=$51;
      __label__ = 8; break;
    case 8: 
      __label__ = 4; break;
    case 9: 
      var $54=$oshic;
      var $55=(($54)|0)==1;
      if ($55) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: 
      var $57=$ret;
      var $58=(($57)&255);
      var $59=$58 >> 7;
      var $60=$2;
      var $61=(($60+4)|0);
      var $62=(($61+96)|0);
      var $63=$62;
      var $64=HEAP[$63];
      var $65=$64 >>> 0;
      var $66=$65 & 1;
      var $67=$59 ^ $66;
      var $68=(($67)|0)!=0;
      if ($68) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $70=$2;
      var $71=(($70+4)|0);
      var $72=(($71+96)|0);
      var $73=$72;
      var $74=HEAP[$73];
      var $75=$74 | 2048;
      HEAP[$73]=$75;
      __label__ = 13; break;
    case 12: 
      var $77=$2;
      var $78=(($77+4)|0);
      var $79=(($78+96)|0);
      var $80=$79;
      var $81=HEAP[$80];
      var $82=$81 & -2049;
      HEAP[$80]=$82;
      __label__ = 13; break;
    case 13: 
      __label__ = 15; break;
    case 14: 
      var $85=$2;
      var $86=(($85+4)|0);
      var $87=(($86+96)|0);
      var $88=$87;
      var $89=HEAP[$88];
      var $90=$89 & -2049;
      HEAP[$88]=$90;
      __label__ = 15; break;
    case 15: 
      var $92=$ret;
      var $93=(($92)&255);
      var $94=$93 & 128;
      var $95=(($94)|0)!=0;
      if ($95) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $97=$2;
      var $98=(($97+4)|0);
      var $99=(($98+96)|0);
      var $100=$99;
      var $101=HEAP[$100];
      var $102=$101 | 128;
      HEAP[$100]=$102;
      __label__ = 18; break;
    case 17: 
      var $104=$2;
      var $105=(($104+4)|0);
      var $106=(($105+96)|0);
      var $107=$106;
      var $108=HEAP[$107];
      var $109=$108 & -129;
      HEAP[$107]=$109;
      __label__ = 18; break;
    case 18: 
      var $111=$ret;
      var $112=(($111 << 24) >> 24)!=0;
      if ($112) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $114=$2;
      var $115=(($114+4)|0);
      var $116=(($115+96)|0);
      var $117=$116;
      var $118=HEAP[$117];
      var $119=$118 | 64;
      HEAP[$117]=$119;
      __label__ = 21; break;
    case 20: 
      var $121=$2;
      var $122=(($121+4)|0);
      var $123=(($122+96)|0);
      var $124=$123;
      var $125=HEAP[$124];
      var $126=$125 & -65;
      HEAP[$124]=$126;
      __label__ = 21; break;
    case 21: 
      var $128=$2;
      var $129=(($128+4)|0);
      var $130=(($129+96)|0);
      var $131=$130;
      var $132=HEAP[$131];
      var $133=$132 & -17;
      HEAP[$131]=$133;
      var $134=$ret;
      var $135=_softx86_parity8($134);
      var $136=(($135)|0)!=0;
      if ($136) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $138=$2;
      var $139=(($138+4)|0);
      var $140=(($139+96)|0);
      var $141=$140;
      var $142=HEAP[$141];
      var $143=$142 | 4;
      HEAP[$141]=$143;
      __label__ = 24; break;
    case 23: 
      var $145=$2;
      var $146=(($145+4)|0);
      var $147=(($146+96)|0);
      var $148=$147;
      var $149=HEAP[$148];
      var $150=$149 & -5;
      HEAP[$148]=$150;
      __label__ = 24; break;
    case 24: 
      var $152=$ret;
      $1=$152;
      __label__ = 25; break;
    case 25: 
      var $154=$1;
      ;
      return $154;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_rcl8["X"]=1;

function _op_rcl1_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_rcl8($3, $4, 1);
  ;
  return $5;
}


function _op_rcl_cl_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=_op_rcl8($3, $4, $11);
  ;
  return $12;
}


function _op_rcl16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $cf;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$4;
      var $6=(($5)&65535);
      var $7=(($6)|0)%17;
      $oshic=$7;
      var $8=$oshic;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $11=$3;
      $1=$11;
      __label__ = 25; break;
    case 3: 
      var $13=$3;
      $ret=$13;
      var $14=$oshic;
      $shic=$14;
      __label__ = 4; break;
    case 4: 
      var $16=$shic;
      var $17=(($16-1)|0);
      $shic=$17;
      var $18=(($16)|0) > 0;
      if ($18) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $20=$ret;
      var $21=(($20)&65535);
      var $22=$21 >> 15;
      var $23=(($22) & 65535);
      $cf=$23;
      var $24=$ret;
      var $25=(($24)&65535);
      var $26=$25 << 1;
      var $27=$2;
      var $28=(($27+4)|0);
      var $29=(($28+96)|0);
      var $30=$29;
      var $31=HEAP[$30];
      var $32=$31 >>> 0;
      var $33=$32 & 1;
      var $34=$26 | $33;
      var $35=(($34) & 65535);
      $ret=$35;
      var $36=$cf;
      var $37=(($36 << 16) >> 16)!=0;
      if ($37) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $39=$2;
      var $40=(($39+4)|0);
      var $41=(($40+96)|0);
      var $42=$41;
      var $43=HEAP[$42];
      var $44=$43 | 1;
      HEAP[$42]=$44;
      __label__ = 8; break;
    case 7: 
      var $46=$2;
      var $47=(($46+4)|0);
      var $48=(($47+96)|0);
      var $49=$48;
      var $50=HEAP[$49];
      var $51=$50 & -2;
      HEAP[$49]=$51;
      __label__ = 8; break;
    case 8: 
      __label__ = 4; break;
    case 9: 
      var $54=$oshic;
      var $55=(($54)|0)==1;
      if ($55) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: 
      var $57=$ret;
      var $58=(($57)&65535);
      var $59=$58 >> 15;
      var $60=$2;
      var $61=(($60+4)|0);
      var $62=(($61+96)|0);
      var $63=$62;
      var $64=HEAP[$63];
      var $65=$64 >>> 0;
      var $66=$65 & 1;
      var $67=$59 ^ $66;
      var $68=(($67)|0)!=0;
      if ($68) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $70=$2;
      var $71=(($70+4)|0);
      var $72=(($71+96)|0);
      var $73=$72;
      var $74=HEAP[$73];
      var $75=$74 | 2048;
      HEAP[$73]=$75;
      __label__ = 13; break;
    case 12: 
      var $77=$2;
      var $78=(($77+4)|0);
      var $79=(($78+96)|0);
      var $80=$79;
      var $81=HEAP[$80];
      var $82=$81 & -2049;
      HEAP[$80]=$82;
      __label__ = 13; break;
    case 13: 
      __label__ = 15; break;
    case 14: 
      var $85=$2;
      var $86=(($85+4)|0);
      var $87=(($86+96)|0);
      var $88=$87;
      var $89=HEAP[$88];
      var $90=$89 & -2049;
      HEAP[$88]=$90;
      __label__ = 15; break;
    case 15: 
      var $92=$ret;
      var $93=(($92)&65535);
      var $94=$93 & 32768;
      var $95=(($94)|0)!=0;
      if ($95) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $97=$2;
      var $98=(($97+4)|0);
      var $99=(($98+96)|0);
      var $100=$99;
      var $101=HEAP[$100];
      var $102=$101 | 128;
      HEAP[$100]=$102;
      __label__ = 18; break;
    case 17: 
      var $104=$2;
      var $105=(($104+4)|0);
      var $106=(($105+96)|0);
      var $107=$106;
      var $108=HEAP[$107];
      var $109=$108 & -129;
      HEAP[$107]=$109;
      __label__ = 18; break;
    case 18: 
      var $111=$ret;
      var $112=(($111 << 16) >> 16)!=0;
      if ($112) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $114=$2;
      var $115=(($114+4)|0);
      var $116=(($115+96)|0);
      var $117=$116;
      var $118=HEAP[$117];
      var $119=$118 | 64;
      HEAP[$117]=$119;
      __label__ = 21; break;
    case 20: 
      var $121=$2;
      var $122=(($121+4)|0);
      var $123=(($122+96)|0);
      var $124=$123;
      var $125=HEAP[$124];
      var $126=$125 & -65;
      HEAP[$124]=$126;
      __label__ = 21; break;
    case 21: 
      var $128=$2;
      var $129=(($128+4)|0);
      var $130=(($129+96)|0);
      var $131=$130;
      var $132=HEAP[$131];
      var $133=$132 & -17;
      HEAP[$131]=$133;
      var $134=$ret;
      var $135=_softx86_parity16($134);
      var $136=(($135)|0)!=0;
      if ($136) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $138=$2;
      var $139=(($138+4)|0);
      var $140=(($139+96)|0);
      var $141=$140;
      var $142=HEAP[$141];
      var $143=$142 | 4;
      HEAP[$141]=$143;
      __label__ = 24; break;
    case 23: 
      var $145=$2;
      var $146=(($145+4)|0);
      var $147=(($146+96)|0);
      var $148=$147;
      var $149=HEAP[$148];
      var $150=$149 & -5;
      HEAP[$148]=$150;
      __label__ = 24; break;
    case 24: 
      var $152=$ret;
      $1=$152;
      __label__ = 25; break;
    case 25: 
      var $154=$1;
      ;
      return $154;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_rcl16["X"]=1;

function _op_rcl1_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_rcl16($3, $4, 1);
  ;
  return $5;
}


function _op_rcl_cl_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_rcl16($3, $4, $12);
  ;
  return $13;
}


function _op_rcl32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $cf;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$4;
      var $6=(($5)>>>0)%33;
      $oshic=$6;
      var $7=$oshic;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $10=$3;
      $1=$10;
      __label__ = 25; break;
    case 3: 
      var $12=$3;
      $ret=$12;
      var $13=$oshic;
      $shic=$13;
      __label__ = 4; break;
    case 4: 
      var $15=$shic;
      var $16=(($15-1)|0);
      $shic=$16;
      var $17=(($15)|0) > 0;
      if ($17) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $19=$ret;
      var $20=$19 >>> 31;
      $cf=$20;
      var $21=$ret;
      var $22=$21 << 1;
      var $23=$2;
      var $24=(($23+4)|0);
      var $25=(($24+96)|0);
      var $26=$25;
      var $27=HEAP[$26];
      var $28=$27 >>> 0;
      var $29=$28 & 1;
      var $30=$22 | $29;
      $ret=$30;
      var $31=$cf;
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $34=$2;
      var $35=(($34+4)|0);
      var $36=(($35+96)|0);
      var $37=$36;
      var $38=HEAP[$37];
      var $39=$38 | 1;
      HEAP[$37]=$39;
      __label__ = 8; break;
    case 7: 
      var $41=$2;
      var $42=(($41+4)|0);
      var $43=(($42+96)|0);
      var $44=$43;
      var $45=HEAP[$44];
      var $46=$45 & -2;
      HEAP[$44]=$46;
      __label__ = 8; break;
    case 8: 
      __label__ = 4; break;
    case 9: 
      var $49=$oshic;
      var $50=(($49)|0)==1;
      if ($50) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: 
      var $52=$ret;
      var $53=$52 >>> 31;
      var $54=$2;
      var $55=(($54+4)|0);
      var $56=(($55+96)|0);
      var $57=$56;
      var $58=HEAP[$57];
      var $59=$58 >>> 0;
      var $60=$59 & 1;
      var $61=$53 ^ $60;
      var $62=(($61)|0)!=0;
      if ($62) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $64=$2;
      var $65=(($64+4)|0);
      var $66=(($65+96)|0);
      var $67=$66;
      var $68=HEAP[$67];
      var $69=$68 | 2048;
      HEAP[$67]=$69;
      __label__ = 13; break;
    case 12: 
      var $71=$2;
      var $72=(($71+4)|0);
      var $73=(($72+96)|0);
      var $74=$73;
      var $75=HEAP[$74];
      var $76=$75 & -2049;
      HEAP[$74]=$76;
      __label__ = 13; break;
    case 13: 
      __label__ = 15; break;
    case 14: 
      var $79=$2;
      var $80=(($79+4)|0);
      var $81=(($80+96)|0);
      var $82=$81;
      var $83=HEAP[$82];
      var $84=$83 & -2049;
      HEAP[$82]=$84;
      __label__ = 15; break;
    case 15: 
      var $86=$ret;
      var $87=$86 & -2147483648;
      var $88=(($87)|0)!=0;
      if ($88) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $90=$2;
      var $91=(($90+4)|0);
      var $92=(($91+96)|0);
      var $93=$92;
      var $94=HEAP[$93];
      var $95=$94 | 128;
      HEAP[$93]=$95;
      __label__ = 18; break;
    case 17: 
      var $97=$2;
      var $98=(($97+4)|0);
      var $99=(($98+96)|0);
      var $100=$99;
      var $101=HEAP[$100];
      var $102=$101 & -129;
      HEAP[$100]=$102;
      __label__ = 18; break;
    case 18: 
      var $104=$ret;
      var $105=(($104)|0)!=0;
      if ($105) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $107=$2;
      var $108=(($107+4)|0);
      var $109=(($108+96)|0);
      var $110=$109;
      var $111=HEAP[$110];
      var $112=$111 | 64;
      HEAP[$110]=$112;
      __label__ = 21; break;
    case 20: 
      var $114=$2;
      var $115=(($114+4)|0);
      var $116=(($115+96)|0);
      var $117=$116;
      var $118=HEAP[$117];
      var $119=$118 & -65;
      HEAP[$117]=$119;
      __label__ = 21; break;
    case 21: 
      var $121=$2;
      var $122=(($121+4)|0);
      var $123=(($122+96)|0);
      var $124=$123;
      var $125=HEAP[$124];
      var $126=$125 & -17;
      HEAP[$124]=$126;
      var $127=$ret;
      var $128=_softx86_parity32($127);
      var $129=(($128)|0)!=0;
      if ($129) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $131=$2;
      var $132=(($131+4)|0);
      var $133=(($132+96)|0);
      var $134=$133;
      var $135=HEAP[$134];
      var $136=$135 | 4;
      HEAP[$134]=$136;
      __label__ = 24; break;
    case 23: 
      var $138=$2;
      var $139=(($138+4)|0);
      var $140=(($139+96)|0);
      var $141=$140;
      var $142=HEAP[$141];
      var $143=$142 & -5;
      HEAP[$141]=$143;
      __label__ = 24; break;
    case 24: 
      var $145=$ret;
      $1=$145;
      __label__ = 25; break;
    case 25: 
      var $147=$1;
      ;
      return $147;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_rcl32["X"]=1;

function _op_rcl1_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_rcl32($3, $4, 1);
  ;
  return $5;
}


function _op_rcl_cl_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_rcl32($3, $4, $12);
  ;
  return $13;
}


function _op_rcr8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $cf;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$4;
      var $6=(($5)&255);
      var $7=(($6)|0)%9;
      $oshic=$7;
      var $8=$oshic;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $11=$3;
      $1=$11;
      __label__ = 25; break;
    case 3: 
      var $13=$3;
      $ret=$13;
      var $14=$oshic;
      var $15=(($14)|0)==1;
      if ($15) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $17=$ret;
      var $18=(($17)&255);
      var $19=$18 >> 7;
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=(($21+96)|0);
      var $23=$22;
      var $24=HEAP[$23];
      var $25=$24 >>> 0;
      var $26=$25 & 1;
      var $27=$19 ^ $26;
      var $28=(($27)|0)!=0;
      if ($28) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $30=$2;
      var $31=(($30+4)|0);
      var $32=(($31+96)|0);
      var $33=$32;
      var $34=HEAP[$33];
      var $35=$34 | 2048;
      HEAP[$33]=$35;
      __label__ = 7; break;
    case 6: 
      var $37=$2;
      var $38=(($37+4)|0);
      var $39=(($38+96)|0);
      var $40=$39;
      var $41=HEAP[$40];
      var $42=$41 & -2049;
      HEAP[$40]=$42;
      __label__ = 7; break;
    case 7: 
      __label__ = 9; break;
    case 8: 
      var $45=$2;
      var $46=(($45+4)|0);
      var $47=(($46+96)|0);
      var $48=$47;
      var $49=HEAP[$48];
      var $50=$49 & -2049;
      HEAP[$48]=$50;
      __label__ = 9; break;
    case 9: 
      var $52=$oshic;
      $shic=$52;
      __label__ = 10; break;
    case 10: 
      var $54=$shic;
      var $55=(($54-1)|0);
      $shic=$55;
      var $56=(($54)|0) > 0;
      if ($56) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: 
      var $58=$ret;
      var $59=(($58)&255);
      var $60=$59 & 1;
      var $61=(($60) & 255);
      $cf=$61;
      var $62=$ret;
      var $63=(($62)&255);
      var $64=$63 >> 1;
      var $65=$2;
      var $66=(($65+4)|0);
      var $67=(($66+96)|0);
      var $68=$67;
      var $69=HEAP[$68];
      var $70=$69 >>> 0;
      var $71=$70 & 1;
      var $72=$71 << 7;
      var $73=$64 | $72;
      var $74=(($73) & 255);
      $ret=$74;
      var $75=$cf;
      var $76=(($75 << 24) >> 24)!=0;
      if ($76) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $78=$2;
      var $79=(($78+4)|0);
      var $80=(($79+96)|0);
      var $81=$80;
      var $82=HEAP[$81];
      var $83=$82 | 1;
      HEAP[$81]=$83;
      __label__ = 14; break;
    case 13: 
      var $85=$2;
      var $86=(($85+4)|0);
      var $87=(($86+96)|0);
      var $88=$87;
      var $89=HEAP[$88];
      var $90=$89 & -2;
      HEAP[$88]=$90;
      __label__ = 14; break;
    case 14: 
      __label__ = 10; break;
    case 15: 
      var $93=$ret;
      var $94=(($93)&255);
      var $95=$94 & 128;
      var $96=(($95)|0)!=0;
      if ($96) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $98=$2;
      var $99=(($98+4)|0);
      var $100=(($99+96)|0);
      var $101=$100;
      var $102=HEAP[$101];
      var $103=$102 | 128;
      HEAP[$101]=$103;
      __label__ = 18; break;
    case 17: 
      var $105=$2;
      var $106=(($105+4)|0);
      var $107=(($106+96)|0);
      var $108=$107;
      var $109=HEAP[$108];
      var $110=$109 & -129;
      HEAP[$108]=$110;
      __label__ = 18; break;
    case 18: 
      var $112=$ret;
      var $113=(($112 << 24) >> 24)!=0;
      if ($113) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $115=$2;
      var $116=(($115+4)|0);
      var $117=(($116+96)|0);
      var $118=$117;
      var $119=HEAP[$118];
      var $120=$119 | 64;
      HEAP[$118]=$120;
      __label__ = 21; break;
    case 20: 
      var $122=$2;
      var $123=(($122+4)|0);
      var $124=(($123+96)|0);
      var $125=$124;
      var $126=HEAP[$125];
      var $127=$126 & -65;
      HEAP[$125]=$127;
      __label__ = 21; break;
    case 21: 
      var $129=$2;
      var $130=(($129+4)|0);
      var $131=(($130+96)|0);
      var $132=$131;
      var $133=HEAP[$132];
      var $134=$133 & -17;
      HEAP[$132]=$134;
      var $135=$ret;
      var $136=_softx86_parity8($135);
      var $137=(($136)|0)!=0;
      if ($137) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $139=$2;
      var $140=(($139+4)|0);
      var $141=(($140+96)|0);
      var $142=$141;
      var $143=HEAP[$142];
      var $144=$143 | 4;
      HEAP[$142]=$144;
      __label__ = 24; break;
    case 23: 
      var $146=$2;
      var $147=(($146+4)|0);
      var $148=(($147+96)|0);
      var $149=$148;
      var $150=HEAP[$149];
      var $151=$150 & -5;
      HEAP[$149]=$151;
      __label__ = 24; break;
    case 24: 
      var $153=$ret;
      $1=$153;
      __label__ = 25; break;
    case 25: 
      var $155=$1;
      ;
      return $155;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_rcr8["X"]=1;

function _op_rcr1_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_rcr8($3, $4, 1);
  ;
  return $5;
}


function _op_rcr_cl_8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=_op_rcr8($3, $4, $11);
  ;
  return $12;
}


function _op_rcr16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $cf;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$4;
      var $6=(($5)&65535);
      var $7=(($6)|0)%17;
      $oshic=$7;
      var $8=$oshic;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $11=$3;
      $1=$11;
      __label__ = 25; break;
    case 3: 
      var $13=$3;
      $ret=$13;
      var $14=$oshic;
      var $15=(($14)|0)==1;
      if ($15) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $17=$ret;
      var $18=(($17)&65535);
      var $19=$18 >> 15;
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=(($21+96)|0);
      var $23=$22;
      var $24=HEAP[$23];
      var $25=$24 >>> 0;
      var $26=$25 & 1;
      var $27=$19 ^ $26;
      var $28=(($27)|0)!=0;
      if ($28) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $30=$2;
      var $31=(($30+4)|0);
      var $32=(($31+96)|0);
      var $33=$32;
      var $34=HEAP[$33];
      var $35=$34 | 2048;
      HEAP[$33]=$35;
      __label__ = 7; break;
    case 6: 
      var $37=$2;
      var $38=(($37+4)|0);
      var $39=(($38+96)|0);
      var $40=$39;
      var $41=HEAP[$40];
      var $42=$41 & -2049;
      HEAP[$40]=$42;
      __label__ = 7; break;
    case 7: 
      __label__ = 9; break;
    case 8: 
      var $45=$2;
      var $46=(($45+4)|0);
      var $47=(($46+96)|0);
      var $48=$47;
      var $49=HEAP[$48];
      var $50=$49 & -2049;
      HEAP[$48]=$50;
      __label__ = 9; break;
    case 9: 
      var $52=$oshic;
      $shic=$52;
      __label__ = 10; break;
    case 10: 
      var $54=$shic;
      var $55=(($54-1)|0);
      $shic=$55;
      var $56=(($54)|0) > 0;
      if ($56) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: 
      var $58=$ret;
      var $59=(($58)&65535);
      var $60=$59 & 1;
      var $61=(($60) & 65535);
      $cf=$61;
      var $62=$ret;
      var $63=(($62)&65535);
      var $64=$63 >> 1;
      var $65=$2;
      var $66=(($65+4)|0);
      var $67=(($66+96)|0);
      var $68=$67;
      var $69=HEAP[$68];
      var $70=$69 >>> 0;
      var $71=$70 & 1;
      var $72=$71 << 15;
      var $73=$64 | $72;
      var $74=(($73) & 65535);
      $ret=$74;
      var $75=$cf;
      var $76=(($75 << 16) >> 16)!=0;
      if ($76) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $78=$2;
      var $79=(($78+4)|0);
      var $80=(($79+96)|0);
      var $81=$80;
      var $82=HEAP[$81];
      var $83=$82 | 1;
      HEAP[$81]=$83;
      __label__ = 14; break;
    case 13: 
      var $85=$2;
      var $86=(($85+4)|0);
      var $87=(($86+96)|0);
      var $88=$87;
      var $89=HEAP[$88];
      var $90=$89 & -2;
      HEAP[$88]=$90;
      __label__ = 14; break;
    case 14: 
      __label__ = 10; break;
    case 15: 
      var $93=$ret;
      var $94=(($93)&65535);
      var $95=$94 & 32768;
      var $96=(($95)|0)!=0;
      if ($96) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $98=$2;
      var $99=(($98+4)|0);
      var $100=(($99+96)|0);
      var $101=$100;
      var $102=HEAP[$101];
      var $103=$102 | 128;
      HEAP[$101]=$103;
      __label__ = 18; break;
    case 17: 
      var $105=$2;
      var $106=(($105+4)|0);
      var $107=(($106+96)|0);
      var $108=$107;
      var $109=HEAP[$108];
      var $110=$109 & -129;
      HEAP[$108]=$110;
      __label__ = 18; break;
    case 18: 
      var $112=$ret;
      var $113=(($112 << 16) >> 16)!=0;
      if ($113) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $115=$2;
      var $116=(($115+4)|0);
      var $117=(($116+96)|0);
      var $118=$117;
      var $119=HEAP[$118];
      var $120=$119 | 64;
      HEAP[$118]=$120;
      __label__ = 21; break;
    case 20: 
      var $122=$2;
      var $123=(($122+4)|0);
      var $124=(($123+96)|0);
      var $125=$124;
      var $126=HEAP[$125];
      var $127=$126 & -65;
      HEAP[$125]=$127;
      __label__ = 21; break;
    case 21: 
      var $129=$2;
      var $130=(($129+4)|0);
      var $131=(($130+96)|0);
      var $132=$131;
      var $133=HEAP[$132];
      var $134=$133 & -17;
      HEAP[$132]=$134;
      var $135=$ret;
      var $136=_softx86_parity16($135);
      var $137=(($136)|0)!=0;
      if ($137) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $139=$2;
      var $140=(($139+4)|0);
      var $141=(($140+96)|0);
      var $142=$141;
      var $143=HEAP[$142];
      var $144=$143 | 4;
      HEAP[$142]=$144;
      __label__ = 24; break;
    case 23: 
      var $146=$2;
      var $147=(($146+4)|0);
      var $148=(($147+96)|0);
      var $149=$148;
      var $150=HEAP[$149];
      var $151=$150 & -5;
      HEAP[$149]=$151;
      __label__ = 24; break;
    case 24: 
      var $153=$ret;
      $1=$153;
      __label__ = 25; break;
    case 25: 
      var $155=$1;
      ;
      return $155;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_rcr16["X"]=1;

function _op_rcr1_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_rcr16($3, $4, 1);
  ;
  return $5;
}


function _op_rcr_cl_16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_rcr16($3, $4, $12);
  ;
  return $13;
}


function _op_rcr32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $cf;
      var $shic;
      var $oshic;
      $2=$ctx;
      $3=$src;
      $4=$val;
      var $5=$4;
      var $6=(($5)>>>0)%33;
      $oshic=$6;
      var $7=$oshic;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $10=$3;
      $1=$10;
      __label__ = 25; break;
    case 3: 
      var $12=$3;
      $ret=$12;
      var $13=$oshic;
      var $14=(($13)|0)==1;
      if ($14) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $16=$ret;
      var $17=$16 >>> 31;
      var $18=$2;
      var $19=(($18+4)|0);
      var $20=(($19+96)|0);
      var $21=$20;
      var $22=HEAP[$21];
      var $23=$22 >>> 0;
      var $24=$23 & 1;
      var $25=$17 ^ $24;
      var $26=(($25)|0)!=0;
      if ($26) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $28=$2;
      var $29=(($28+4)|0);
      var $30=(($29+96)|0);
      var $31=$30;
      var $32=HEAP[$31];
      var $33=$32 | 2048;
      HEAP[$31]=$33;
      __label__ = 7; break;
    case 6: 
      var $35=$2;
      var $36=(($35+4)|0);
      var $37=(($36+96)|0);
      var $38=$37;
      var $39=HEAP[$38];
      var $40=$39 & -2049;
      HEAP[$38]=$40;
      __label__ = 7; break;
    case 7: 
      __label__ = 9; break;
    case 8: 
      var $43=$2;
      var $44=(($43+4)|0);
      var $45=(($44+96)|0);
      var $46=$45;
      var $47=HEAP[$46];
      var $48=$47 & -2049;
      HEAP[$46]=$48;
      __label__ = 9; break;
    case 9: 
      var $50=$oshic;
      $shic=$50;
      __label__ = 10; break;
    case 10: 
      var $52=$shic;
      var $53=(($52-1)|0);
      $shic=$53;
      var $54=(($52)|0) > 0;
      if ($54) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: 
      var $56=$ret;
      var $57=$56 & 1;
      $cf=$57;
      var $58=$ret;
      var $59=$58 >>> 1;
      var $60=$2;
      var $61=(($60+4)|0);
      var $62=(($61+96)|0);
      var $63=$62;
      var $64=HEAP[$63];
      var $65=$64 >>> 0;
      var $66=$65 & 1;
      var $67=$66 << 31;
      var $68=$59 | $67;
      $ret=$68;
      var $69=$cf;
      var $70=(($69)|0)!=0;
      if ($70) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $72=$2;
      var $73=(($72+4)|0);
      var $74=(($73+96)|0);
      var $75=$74;
      var $76=HEAP[$75];
      var $77=$76 | 1;
      HEAP[$75]=$77;
      __label__ = 14; break;
    case 13: 
      var $79=$2;
      var $80=(($79+4)|0);
      var $81=(($80+96)|0);
      var $82=$81;
      var $83=HEAP[$82];
      var $84=$83 & -2;
      HEAP[$82]=$84;
      __label__ = 14; break;
    case 14: 
      __label__ = 10; break;
    case 15: 
      var $87=$ret;
      var $88=$87 & -2147483648;
      var $89=(($88)|0)!=0;
      if ($89) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $91=$2;
      var $92=(($91+4)|0);
      var $93=(($92+96)|0);
      var $94=$93;
      var $95=HEAP[$94];
      var $96=$95 | 128;
      HEAP[$94]=$96;
      __label__ = 18; break;
    case 17: 
      var $98=$2;
      var $99=(($98+4)|0);
      var $100=(($99+96)|0);
      var $101=$100;
      var $102=HEAP[$101];
      var $103=$102 & -129;
      HEAP[$101]=$103;
      __label__ = 18; break;
    case 18: 
      var $105=$ret;
      var $106=(($105)|0)!=0;
      if ($106) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $108=$2;
      var $109=(($108+4)|0);
      var $110=(($109+96)|0);
      var $111=$110;
      var $112=HEAP[$111];
      var $113=$112 | 64;
      HEAP[$111]=$113;
      __label__ = 21; break;
    case 20: 
      var $115=$2;
      var $116=(($115+4)|0);
      var $117=(($116+96)|0);
      var $118=$117;
      var $119=HEAP[$118];
      var $120=$119 & -65;
      HEAP[$118]=$120;
      __label__ = 21; break;
    case 21: 
      var $122=$2;
      var $123=(($122+4)|0);
      var $124=(($123+96)|0);
      var $125=$124;
      var $126=HEAP[$125];
      var $127=$126 & -17;
      HEAP[$125]=$127;
      var $128=$ret;
      var $129=_softx86_parity32($128);
      var $130=(($129)|0)!=0;
      if ($130) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $132=$2;
      var $133=(($132+4)|0);
      var $134=(($133+96)|0);
      var $135=$134;
      var $136=HEAP[$135];
      var $137=$136 | 4;
      HEAP[$135]=$137;
      __label__ = 24; break;
    case 23: 
      var $139=$2;
      var $140=(($139+4)|0);
      var $141=(($140+96)|0);
      var $142=$141;
      var $143=HEAP[$142];
      var $144=$143 & -5;
      HEAP[$142]=$144;
      __label__ = 24; break;
    case 24: 
      var $146=$ret;
      $1=$146;
      __label__ = 25; break;
    case 25: 
      var $148=$1;
      ;
      return $148;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_rcr32["X"]=1;

function _op_rcr1_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=_op_rcr32($3, $4, 1);
  ;
  return $5;
}


function _op_rcr_cl_32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$1;
  var $4=$2;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=(($6)|0);
  var $8=(($7+4)|0);
  var $9=$8;
  var $10=(($9)|0);
  var $11=HEAP[$10];
  var $12=(($11)&255);
  var $13=_op_rcr32($3, $4, $12);
  ;
  return $13;
}


function _op_xor8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$3;
      var $7=(($6)&255);
      var $8=$5 ^ $7;
      var $9=(($8) & 255);
      $ret=$9;
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=(($11+96)|0);
      var $13=$12;
      var $14=HEAP[$13];
      var $15=$14 & -2050;
      HEAP[$13]=$15;
      var $16=$ret;
      var $17=(($16)&255);
      var $18=$17 & 128;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $21=$1;
      var $22=(($21+4)|0);
      var $23=(($22+96)|0);
      var $24=$23;
      var $25=HEAP[$24];
      var $26=$25 | 128;
      HEAP[$24]=$26;
      __label__ = 4; break;
    case 3: 
      var $28=$1;
      var $29=(($28+4)|0);
      var $30=(($29+96)|0);
      var $31=$30;
      var $32=HEAP[$31];
      var $33=$32 & -129;
      HEAP[$31]=$33;
      __label__ = 4; break;
    case 4: 
      var $35=$ret;
      var $36=(($35 << 24) >> 24)!=0;
      if ($36) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $38=$1;
      var $39=(($38+4)|0);
      var $40=(($39+96)|0);
      var $41=$40;
      var $42=HEAP[$41];
      var $43=$42 | 64;
      HEAP[$41]=$43;
      __label__ = 7; break;
    case 6: 
      var $45=$1;
      var $46=(($45+4)|0);
      var $47=(($46+96)|0);
      var $48=$47;
      var $49=HEAP[$48];
      var $50=$49 & -65;
      HEAP[$48]=$50;
      __label__ = 7; break;
    case 7: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 & -17;
      HEAP[$55]=$57;
      var $58=$ret;
      var $59=_softx86_parity8($58);
      var $60=(($59)|0)!=0;
      if ($60) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $62=$1;
      var $63=(($62+4)|0);
      var $64=(($63+96)|0);
      var $65=$64;
      var $66=HEAP[$65];
      var $67=$66 | 4;
      HEAP[$65]=$67;
      __label__ = 10; break;
    case 9: 
      var $69=$1;
      var $70=(($69+4)|0);
      var $71=(($70+96)|0);
      var $72=$71;
      var $73=HEAP[$72];
      var $74=$73 & -5;
      HEAP[$72]=$74;
      __label__ = 10; break;
    case 10: 
      var $76=$ret;
      ;
      return $76;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_xor8["X"]=1;

function _op_xor16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=(($4)&65535);
      var $6=$3;
      var $7=(($6)&65535);
      var $8=$5 ^ $7;
      var $9=(($8) & 65535);
      $ret=$9;
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=(($11+96)|0);
      var $13=$12;
      var $14=HEAP[$13];
      var $15=$14 & -2050;
      HEAP[$13]=$15;
      var $16=$ret;
      var $17=(($16)&65535);
      var $18=$17 & 32768;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $21=$1;
      var $22=(($21+4)|0);
      var $23=(($22+96)|0);
      var $24=$23;
      var $25=HEAP[$24];
      var $26=$25 | 128;
      HEAP[$24]=$26;
      __label__ = 4; break;
    case 3: 
      var $28=$1;
      var $29=(($28+4)|0);
      var $30=(($29+96)|0);
      var $31=$30;
      var $32=HEAP[$31];
      var $33=$32 & -129;
      HEAP[$31]=$33;
      __label__ = 4; break;
    case 4: 
      var $35=$ret;
      var $36=(($35 << 16) >> 16)!=0;
      if ($36) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $38=$1;
      var $39=(($38+4)|0);
      var $40=(($39+96)|0);
      var $41=$40;
      var $42=HEAP[$41];
      var $43=$42 | 64;
      HEAP[$41]=$43;
      __label__ = 7; break;
    case 6: 
      var $45=$1;
      var $46=(($45+4)|0);
      var $47=(($46+96)|0);
      var $48=$47;
      var $49=HEAP[$48];
      var $50=$49 & -65;
      HEAP[$48]=$50;
      __label__ = 7; break;
    case 7: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 & -17;
      HEAP[$55]=$57;
      var $58=$ret;
      var $59=_softx86_parity16($58);
      var $60=(($59)|0)!=0;
      if ($60) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $62=$1;
      var $63=(($62+4)|0);
      var $64=(($63+96)|0);
      var $65=$64;
      var $66=HEAP[$65];
      var $67=$66 | 4;
      HEAP[$65]=$67;
      __label__ = 10; break;
    case 9: 
      var $69=$1;
      var $70=(($69+4)|0);
      var $71=(($70+96)|0);
      var $72=$71;
      var $73=HEAP[$72];
      var $74=$73 & -5;
      HEAP[$72]=$74;
      __label__ = 10; break;
    case 10: 
      var $76=$ret;
      ;
      return $76;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_xor16["X"]=1;

function _op_xor32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=$3;
      var $6=$4 ^ $5;
      $ret=$6;
      var $7=$1;
      var $8=(($7+4)|0);
      var $9=(($8+96)|0);
      var $10=$9;
      var $11=HEAP[$10];
      var $12=$11 & -2050;
      HEAP[$10]=$12;
      var $13=$ret;
      var $14=$13 & -2147483648;
      var $15=(($14)|0)!=0;
      if ($15) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $17=$1;
      var $18=(($17+4)|0);
      var $19=(($18+96)|0);
      var $20=$19;
      var $21=HEAP[$20];
      var $22=$21 | 128;
      HEAP[$20]=$22;
      __label__ = 4; break;
    case 3: 
      var $24=$1;
      var $25=(($24+4)|0);
      var $26=(($25+96)|0);
      var $27=$26;
      var $28=HEAP[$27];
      var $29=$28 & -129;
      HEAP[$27]=$29;
      __label__ = 4; break;
    case 4: 
      var $31=$ret;
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $34=$1;
      var $35=(($34+4)|0);
      var $36=(($35+96)|0);
      var $37=$36;
      var $38=HEAP[$37];
      var $39=$38 | 64;
      HEAP[$37]=$39;
      __label__ = 7; break;
    case 6: 
      var $41=$1;
      var $42=(($41+4)|0);
      var $43=(($42+96)|0);
      var $44=$43;
      var $45=HEAP[$44];
      var $46=$45 & -65;
      HEAP[$44]=$46;
      __label__ = 7; break;
    case 7: 
      var $48=$1;
      var $49=(($48+4)|0);
      var $50=(($49+96)|0);
      var $51=$50;
      var $52=HEAP[$51];
      var $53=$52 & -17;
      HEAP[$51]=$53;
      var $54=$ret;
      var $55=_softx86_parity32($54);
      var $56=(($55)|0)!=0;
      if ($56) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $58=$1;
      var $59=(($58+4)|0);
      var $60=(($59+96)|0);
      var $61=$60;
      var $62=HEAP[$61];
      var $63=$62 | 4;
      HEAP[$61]=$63;
      __label__ = 10; break;
    case 9: 
      var $65=$1;
      var $66=(($65+4)|0);
      var $67=(($66+96)|0);
      var $68=$67;
      var $69=HEAP[$68];
      var $70=$69 & -5;
      HEAP[$68]=$70;
      __label__ = 10; break;
    case 10: 
      var $72=$ret;
      ;
      return $72;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_xor32["X"]=1;

function _op_or8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$3;
      var $7=(($6)&255);
      var $8=$5 | $7;
      var $9=(($8) & 255);
      $ret=$9;
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=(($11+96)|0);
      var $13=$12;
      var $14=HEAP[$13];
      var $15=$14 & -2050;
      HEAP[$13]=$15;
      var $16=$ret;
      var $17=(($16)&255);
      var $18=$17 & 128;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $21=$1;
      var $22=(($21+4)|0);
      var $23=(($22+96)|0);
      var $24=$23;
      var $25=HEAP[$24];
      var $26=$25 | 128;
      HEAP[$24]=$26;
      __label__ = 4; break;
    case 3: 
      var $28=$1;
      var $29=(($28+4)|0);
      var $30=(($29+96)|0);
      var $31=$30;
      var $32=HEAP[$31];
      var $33=$32 & -129;
      HEAP[$31]=$33;
      __label__ = 4; break;
    case 4: 
      var $35=$ret;
      var $36=(($35 << 24) >> 24)!=0;
      if ($36) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $38=$1;
      var $39=(($38+4)|0);
      var $40=(($39+96)|0);
      var $41=$40;
      var $42=HEAP[$41];
      var $43=$42 | 64;
      HEAP[$41]=$43;
      __label__ = 7; break;
    case 6: 
      var $45=$1;
      var $46=(($45+4)|0);
      var $47=(($46+96)|0);
      var $48=$47;
      var $49=HEAP[$48];
      var $50=$49 & -65;
      HEAP[$48]=$50;
      __label__ = 7; break;
    case 7: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 & -17;
      HEAP[$55]=$57;
      var $58=$ret;
      var $59=_softx86_parity8($58);
      var $60=(($59)|0)!=0;
      if ($60) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $62=$1;
      var $63=(($62+4)|0);
      var $64=(($63+96)|0);
      var $65=$64;
      var $66=HEAP[$65];
      var $67=$66 | 4;
      HEAP[$65]=$67;
      __label__ = 10; break;
    case 9: 
      var $69=$1;
      var $70=(($69+4)|0);
      var $71=(($70+96)|0);
      var $72=$71;
      var $73=HEAP[$72];
      var $74=$73 & -5;
      HEAP[$72]=$74;
      __label__ = 10; break;
    case 10: 
      var $76=$ret;
      ;
      return $76;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_or8["X"]=1;

function _op_or16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=(($4)&65535);
      var $6=$3;
      var $7=(($6)&65535);
      var $8=$5 | $7;
      var $9=(($8) & 65535);
      $ret=$9;
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=(($11+96)|0);
      var $13=$12;
      var $14=HEAP[$13];
      var $15=$14 & -2050;
      HEAP[$13]=$15;
      var $16=$ret;
      var $17=(($16)&65535);
      var $18=$17 & 32768;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $21=$1;
      var $22=(($21+4)|0);
      var $23=(($22+96)|0);
      var $24=$23;
      var $25=HEAP[$24];
      var $26=$25 | 128;
      HEAP[$24]=$26;
      __label__ = 4; break;
    case 3: 
      var $28=$1;
      var $29=(($28+4)|0);
      var $30=(($29+96)|0);
      var $31=$30;
      var $32=HEAP[$31];
      var $33=$32 & -129;
      HEAP[$31]=$33;
      __label__ = 4; break;
    case 4: 
      var $35=$ret;
      var $36=(($35 << 16) >> 16)!=0;
      if ($36) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $38=$1;
      var $39=(($38+4)|0);
      var $40=(($39+96)|0);
      var $41=$40;
      var $42=HEAP[$41];
      var $43=$42 | 64;
      HEAP[$41]=$43;
      __label__ = 7; break;
    case 6: 
      var $45=$1;
      var $46=(($45+4)|0);
      var $47=(($46+96)|0);
      var $48=$47;
      var $49=HEAP[$48];
      var $50=$49 & -65;
      HEAP[$48]=$50;
      __label__ = 7; break;
    case 7: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 & -17;
      HEAP[$55]=$57;
      var $58=$ret;
      var $59=_softx86_parity16($58);
      var $60=(($59)|0)!=0;
      if ($60) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $62=$1;
      var $63=(($62+4)|0);
      var $64=(($63+96)|0);
      var $65=$64;
      var $66=HEAP[$65];
      var $67=$66 | 4;
      HEAP[$65]=$67;
      __label__ = 10; break;
    case 9: 
      var $69=$1;
      var $70=(($69+4)|0);
      var $71=(($70+96)|0);
      var $72=$71;
      var $73=HEAP[$72];
      var $74=$73 & -5;
      HEAP[$72]=$74;
      __label__ = 10; break;
    case 10: 
      var $76=$ret;
      ;
      return $76;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_or16["X"]=1;

function _op_or32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=$3;
      var $6=$4 | $5;
      $ret=$6;
      var $7=$1;
      var $8=(($7+4)|0);
      var $9=(($8+96)|0);
      var $10=$9;
      var $11=HEAP[$10];
      var $12=$11 & -2050;
      HEAP[$10]=$12;
      var $13=$ret;
      var $14=$13 & -2147483648;
      var $15=(($14)|0)!=0;
      if ($15) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $17=$1;
      var $18=(($17+4)|0);
      var $19=(($18+96)|0);
      var $20=$19;
      var $21=HEAP[$20];
      var $22=$21 | 128;
      HEAP[$20]=$22;
      __label__ = 4; break;
    case 3: 
      var $24=$1;
      var $25=(($24+4)|0);
      var $26=(($25+96)|0);
      var $27=$26;
      var $28=HEAP[$27];
      var $29=$28 & -129;
      HEAP[$27]=$29;
      __label__ = 4; break;
    case 4: 
      var $31=$ret;
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $34=$1;
      var $35=(($34+4)|0);
      var $36=(($35+96)|0);
      var $37=$36;
      var $38=HEAP[$37];
      var $39=$38 | 64;
      HEAP[$37]=$39;
      __label__ = 7; break;
    case 6: 
      var $41=$1;
      var $42=(($41+4)|0);
      var $43=(($42+96)|0);
      var $44=$43;
      var $45=HEAP[$44];
      var $46=$45 & -65;
      HEAP[$44]=$46;
      __label__ = 7; break;
    case 7: 
      var $48=$1;
      var $49=(($48+4)|0);
      var $50=(($49+96)|0);
      var $51=$50;
      var $52=HEAP[$51];
      var $53=$52 & -17;
      HEAP[$51]=$53;
      var $54=$ret;
      var $55=_softx86_parity32($54);
      var $56=(($55)|0)!=0;
      if ($56) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $58=$1;
      var $59=(($58+4)|0);
      var $60=(($59+96)|0);
      var $61=$60;
      var $62=HEAP[$61];
      var $63=$62 | 4;
      HEAP[$61]=$63;
      __label__ = 10; break;
    case 9: 
      var $65=$1;
      var $66=(($65+4)|0);
      var $67=(($66+96)|0);
      var $68=$67;
      var $69=HEAP[$68];
      var $70=$69 & -5;
      HEAP[$68]=$70;
      __label__ = 10; break;
    case 10: 
      var $72=$ret;
      ;
      return $72;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_or32["X"]=1;

function _op_and8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$3;
      var $7=(($6)&255);
      var $8=$5 & $7;
      var $9=(($8) & 255);
      $ret=$9;
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=(($11+96)|0);
      var $13=$12;
      var $14=HEAP[$13];
      var $15=$14 & -2050;
      HEAP[$13]=$15;
      var $16=$ret;
      var $17=(($16)&255);
      var $18=$17 & 128;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $21=$1;
      var $22=(($21+4)|0);
      var $23=(($22+96)|0);
      var $24=$23;
      var $25=HEAP[$24];
      var $26=$25 | 128;
      HEAP[$24]=$26;
      __label__ = 4; break;
    case 3: 
      var $28=$1;
      var $29=(($28+4)|0);
      var $30=(($29+96)|0);
      var $31=$30;
      var $32=HEAP[$31];
      var $33=$32 & -129;
      HEAP[$31]=$33;
      __label__ = 4; break;
    case 4: 
      var $35=$ret;
      var $36=(($35 << 24) >> 24)!=0;
      if ($36) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $38=$1;
      var $39=(($38+4)|0);
      var $40=(($39+96)|0);
      var $41=$40;
      var $42=HEAP[$41];
      var $43=$42 | 64;
      HEAP[$41]=$43;
      __label__ = 7; break;
    case 6: 
      var $45=$1;
      var $46=(($45+4)|0);
      var $47=(($46+96)|0);
      var $48=$47;
      var $49=HEAP[$48];
      var $50=$49 & -65;
      HEAP[$48]=$50;
      __label__ = 7; break;
    case 7: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 & -17;
      HEAP[$55]=$57;
      var $58=$ret;
      var $59=_softx86_parity8($58);
      var $60=(($59)|0)!=0;
      if ($60) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $62=$1;
      var $63=(($62+4)|0);
      var $64=(($63+96)|0);
      var $65=$64;
      var $66=HEAP[$65];
      var $67=$66 | 4;
      HEAP[$65]=$67;
      __label__ = 10; break;
    case 9: 
      var $69=$1;
      var $70=(($69+4)|0);
      var $71=(($70+96)|0);
      var $72=$71;
      var $73=HEAP[$72];
      var $74=$73 & -5;
      HEAP[$72]=$74;
      __label__ = 10; break;
    case 10: 
      var $76=$ret;
      ;
      return $76;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_and8["X"]=1;

function _op_and16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=(($4)&65535);
      var $6=$3;
      var $7=(($6)&65535);
      var $8=$5 & $7;
      var $9=(($8) & 65535);
      $ret=$9;
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=(($11+96)|0);
      var $13=$12;
      var $14=HEAP[$13];
      var $15=$14 & -2050;
      HEAP[$13]=$15;
      var $16=$ret;
      var $17=(($16)&65535);
      var $18=$17 & 32768;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $21=$1;
      var $22=(($21+4)|0);
      var $23=(($22+96)|0);
      var $24=$23;
      var $25=HEAP[$24];
      var $26=$25 | 128;
      HEAP[$24]=$26;
      __label__ = 4; break;
    case 3: 
      var $28=$1;
      var $29=(($28+4)|0);
      var $30=(($29+96)|0);
      var $31=$30;
      var $32=HEAP[$31];
      var $33=$32 & -129;
      HEAP[$31]=$33;
      __label__ = 4; break;
    case 4: 
      var $35=$ret;
      var $36=(($35 << 16) >> 16)!=0;
      if ($36) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $38=$1;
      var $39=(($38+4)|0);
      var $40=(($39+96)|0);
      var $41=$40;
      var $42=HEAP[$41];
      var $43=$42 | 64;
      HEAP[$41]=$43;
      __label__ = 7; break;
    case 6: 
      var $45=$1;
      var $46=(($45+4)|0);
      var $47=(($46+96)|0);
      var $48=$47;
      var $49=HEAP[$48];
      var $50=$49 & -65;
      HEAP[$48]=$50;
      __label__ = 7; break;
    case 7: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 & -17;
      HEAP[$55]=$57;
      var $58=$ret;
      var $59=_softx86_parity16($58);
      var $60=(($59)|0)!=0;
      if ($60) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $62=$1;
      var $63=(($62+4)|0);
      var $64=(($63+96)|0);
      var $65=$64;
      var $66=HEAP[$65];
      var $67=$66 | 4;
      HEAP[$65]=$67;
      __label__ = 10; break;
    case 9: 
      var $69=$1;
      var $70=(($69+4)|0);
      var $71=(($70+96)|0);
      var $72=$71;
      var $73=HEAP[$72];
      var $74=$73 & -5;
      HEAP[$72]=$74;
      __label__ = 10; break;
    case 10: 
      var $76=$ret;
      ;
      return $76;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_and16["X"]=1;

function _op_and32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=$3;
      var $6=$4 & $5;
      $ret=$6;
      var $7=$1;
      var $8=(($7+4)|0);
      var $9=(($8+96)|0);
      var $10=$9;
      var $11=HEAP[$10];
      var $12=$11 & -2050;
      HEAP[$10]=$12;
      var $13=$ret;
      var $14=$13 & -2147483648;
      var $15=(($14)|0)!=0;
      if ($15) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $17=$1;
      var $18=(($17+4)|0);
      var $19=(($18+96)|0);
      var $20=$19;
      var $21=HEAP[$20];
      var $22=$21 | 128;
      HEAP[$20]=$22;
      __label__ = 4; break;
    case 3: 
      var $24=$1;
      var $25=(($24+4)|0);
      var $26=(($25+96)|0);
      var $27=$26;
      var $28=HEAP[$27];
      var $29=$28 & -129;
      HEAP[$27]=$29;
      __label__ = 4; break;
    case 4: 
      var $31=$ret;
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $34=$1;
      var $35=(($34+4)|0);
      var $36=(($35+96)|0);
      var $37=$36;
      var $38=HEAP[$37];
      var $39=$38 | 64;
      HEAP[$37]=$39;
      __label__ = 7; break;
    case 6: 
      var $41=$1;
      var $42=(($41+4)|0);
      var $43=(($42+96)|0);
      var $44=$43;
      var $45=HEAP[$44];
      var $46=$45 & -65;
      HEAP[$44]=$46;
      __label__ = 7; break;
    case 7: 
      var $48=$1;
      var $49=(($48+4)|0);
      var $50=(($49+96)|0);
      var $51=$50;
      var $52=HEAP[$51];
      var $53=$52 & -17;
      HEAP[$51]=$53;
      var $54=$ret;
      var $55=_softx86_parity32($54);
      var $56=(($55)|0)!=0;
      if ($56) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $58=$1;
      var $59=(($58+4)|0);
      var $60=(($59+96)|0);
      var $61=$60;
      var $62=HEAP[$61];
      var $63=$62 | 4;
      HEAP[$61]=$63;
      __label__ = 10; break;
    case 9: 
      var $65=$1;
      var $66=(($65+4)|0);
      var $67=(($66+96)|0);
      var $68=$67;
      var $69=HEAP[$68];
      var $70=$69 & -5;
      HEAP[$68]=$70;
      __label__ = 10; break;
    case 10: 
      var $72=$ret;
      ;
      return $72;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_and32["X"]=1;

function _op_test8($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$3;
      var $7=(($6)&255);
      var $8=$5 & $7;
      var $9=(($8) & 255);
      $ret=$9;
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=(($11+96)|0);
      var $13=$12;
      var $14=HEAP[$13];
      var $15=$14 & -2050;
      HEAP[$13]=$15;
      var $16=$ret;
      var $17=(($16)&255);
      var $18=$17 & 128;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $21=$1;
      var $22=(($21+4)|0);
      var $23=(($22+96)|0);
      var $24=$23;
      var $25=HEAP[$24];
      var $26=$25 | 128;
      HEAP[$24]=$26;
      __label__ = 4; break;
    case 3: 
      var $28=$1;
      var $29=(($28+4)|0);
      var $30=(($29+96)|0);
      var $31=$30;
      var $32=HEAP[$31];
      var $33=$32 & -129;
      HEAP[$31]=$33;
      __label__ = 4; break;
    case 4: 
      var $35=$ret;
      var $36=(($35 << 24) >> 24)!=0;
      if ($36) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $38=$1;
      var $39=(($38+4)|0);
      var $40=(($39+96)|0);
      var $41=$40;
      var $42=HEAP[$41];
      var $43=$42 | 64;
      HEAP[$41]=$43;
      __label__ = 7; break;
    case 6: 
      var $45=$1;
      var $46=(($45+4)|0);
      var $47=(($46+96)|0);
      var $48=$47;
      var $49=HEAP[$48];
      var $50=$49 & -65;
      HEAP[$48]=$50;
      __label__ = 7; break;
    case 7: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 & -17;
      HEAP[$55]=$57;
      var $58=$ret;
      var $59=_softx86_parity8($58);
      var $60=(($59)|0)!=0;
      if ($60) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $62=$1;
      var $63=(($62+4)|0);
      var $64=(($63+96)|0);
      var $65=$64;
      var $66=HEAP[$65];
      var $67=$66 | 4;
      HEAP[$65]=$67;
      __label__ = 10; break;
    case 9: 
      var $69=$1;
      var $70=(($69+4)|0);
      var $71=(($70+96)|0);
      var $72=$71;
      var $73=HEAP[$72];
      var $74=$73 & -5;
      HEAP[$72]=$74;
      __label__ = 10; break;
    case 10: 
      var $76=$ret;
      ;
      return $76;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_test8["X"]=1;

function _op_not8($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$2;
  var $4=(($3)&255);
  var $5=$4 ^ -1;
  var $6=(($5) & 255);
  ;
  return $6;
}


function _op_not16($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$2;
  var $4=(($3)&65535);
  var $5=$4 ^ -1;
  var $6=(($5) & 65535);
  ;
  return $6;
}


function _op_not32($ctx, $src) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ctx;
  $2=$src;
  var $3=$2;
  var $4=$3 ^ -1;
  ;
  return $4;
}


function _op_test16($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=(($4)&65535);
      var $6=$3;
      var $7=(($6)&65535);
      var $8=$5 & $7;
      var $9=(($8) & 65535);
      $ret=$9;
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=(($11+96)|0);
      var $13=$12;
      var $14=HEAP[$13];
      var $15=$14 & -2050;
      HEAP[$13]=$15;
      var $16=$ret;
      var $17=(($16)&65535);
      var $18=$17 & 32768;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $21=$1;
      var $22=(($21+4)|0);
      var $23=(($22+96)|0);
      var $24=$23;
      var $25=HEAP[$24];
      var $26=$25 | 128;
      HEAP[$24]=$26;
      __label__ = 4; break;
    case 3: 
      var $28=$1;
      var $29=(($28+4)|0);
      var $30=(($29+96)|0);
      var $31=$30;
      var $32=HEAP[$31];
      var $33=$32 & -129;
      HEAP[$31]=$33;
      __label__ = 4; break;
    case 4: 
      var $35=$ret;
      var $36=(($35 << 16) >> 16)!=0;
      if ($36) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $38=$1;
      var $39=(($38+4)|0);
      var $40=(($39+96)|0);
      var $41=$40;
      var $42=HEAP[$41];
      var $43=$42 | 64;
      HEAP[$41]=$43;
      __label__ = 7; break;
    case 6: 
      var $45=$1;
      var $46=(($45+4)|0);
      var $47=(($46+96)|0);
      var $48=$47;
      var $49=HEAP[$48];
      var $50=$49 & -65;
      HEAP[$48]=$50;
      __label__ = 7; break;
    case 7: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 & -17;
      HEAP[$55]=$57;
      var $58=$ret;
      var $59=(($58) & 255);
      var $60=_softx86_parity8($59);
      var $61=(($60)|0)!=0;
      if ($61) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $63=$1;
      var $64=(($63+4)|0);
      var $65=(($64+96)|0);
      var $66=$65;
      var $67=HEAP[$66];
      var $68=$67 | 4;
      HEAP[$66]=$68;
      __label__ = 10; break;
    case 9: 
      var $70=$1;
      var $71=(($70+4)|0);
      var $72=(($71+96)|0);
      var $73=$72;
      var $74=HEAP[$73];
      var $75=$74 & -5;
      HEAP[$73]=$75;
      __label__ = 10; break;
    case 10: 
      var $77=$ret;
      ;
      return $77;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_test16["X"]=1;

function _op_test32($ctx, $src, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$ctx;
      $2=$src;
      $3=$val;
      var $4=$2;
      var $5=$3;
      var $6=$4 & $5;
      $ret=$6;
      var $7=$1;
      var $8=(($7+4)|0);
      var $9=(($8+96)|0);
      var $10=$9;
      var $11=HEAP[$10];
      var $12=$11 & -2050;
      HEAP[$10]=$12;
      var $13=$ret;
      var $14=$13 & -2147483648;
      var $15=(($14)|0)!=0;
      if ($15) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $17=$1;
      var $18=(($17+4)|0);
      var $19=(($18+96)|0);
      var $20=$19;
      var $21=HEAP[$20];
      var $22=$21 | 128;
      HEAP[$20]=$22;
      __label__ = 4; break;
    case 3: 
      var $24=$1;
      var $25=(($24+4)|0);
      var $26=(($25+96)|0);
      var $27=$26;
      var $28=HEAP[$27];
      var $29=$28 & -129;
      HEAP[$27]=$29;
      __label__ = 4; break;
    case 4: 
      var $31=$ret;
      var $32=(($31)|0)!=0;
      if ($32) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $34=$1;
      var $35=(($34+4)|0);
      var $36=(($35+96)|0);
      var $37=$36;
      var $38=HEAP[$37];
      var $39=$38 | 64;
      HEAP[$37]=$39;
      __label__ = 7; break;
    case 6: 
      var $41=$1;
      var $42=(($41+4)|0);
      var $43=(($42+96)|0);
      var $44=$43;
      var $45=HEAP[$44];
      var $46=$45 & -65;
      HEAP[$44]=$46;
      __label__ = 7; break;
    case 7: 
      var $48=$1;
      var $49=(($48+4)|0);
      var $50=(($49+96)|0);
      var $51=$50;
      var $52=HEAP[$51];
      var $53=$52 & -17;
      HEAP[$51]=$53;
      var $54=$ret;
      var $55=(($54) & 255);
      var $56=_softx86_parity8($55);
      var $57=(($56)|0)!=0;
      if ($57) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $59=$1;
      var $60=(($59+4)|0);
      var $61=(($60+96)|0);
      var $62=$61;
      var $63=HEAP[$62];
      var $64=$63 | 4;
      HEAP[$62]=$64;
      __label__ = 10; break;
    case 9: 
      var $66=$1;
      var $67=(($66+4)|0);
      var $68=(($67+96)|0);
      var $69=$68;
      var $70=HEAP[$69];
      var $71=$70 & -5;
      HEAP[$69]=$71;
      __label__ = 10; break;
    case 10: 
      var $73=$ret;
      ;
      return $73;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_test32["X"]=1;

function _op_neg8($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $ret;
      $1=$ctx;
      $2=$src;
      var $3=$2;
      var $4=(($3)&255);
      var $5=$4 ^ -1;
      var $6=(($5+1)|0);
      var $7=(($6) & 255);
      $ret=$7;
      var $8=$ret;
      var $9=(($8 << 24) >> 24)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $11=$1;
      var $12=(($11+4)|0);
      var $13=(($12+96)|0);
      var $14=$13;
      var $15=HEAP[$14];
      var $16=$15 | 1;
      HEAP[$14]=$16;
      __label__ = 4; break;
    case 3: 
      var $18=$1;
      var $19=(($18+4)|0);
      var $20=(($19+96)|0);
      var $21=$20;
      var $22=HEAP[$21];
      var $23=$22 & -2;
      HEAP[$21]=$23;
      __label__ = 4; break;
    case 4: 
      var $25=$ret;
      var $26=(($25 << 24) >> 24)!=0;
      if ($26) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $28=$1;
      var $29=(($28+4)|0);
      var $30=(($29+96)|0);
      var $31=$30;
      var $32=HEAP[$31];
      var $33=$32 | 2048;
      HEAP[$31]=$33;
      __label__ = 7; break;
    case 6: 
      var $35=$1;
      var $36=(($35+4)|0);
      var $37=(($36+96)|0);
      var $38=$37;
      var $39=HEAP[$38];
      var $40=$39 & -2049;
      HEAP[$38]=$40;
      __label__ = 7; break;
    case 7: 
      var $42=$ret;
      var $43=(($42)&255);
      var $44=$43 & 128;
      var $45=(($44)|0)!=0;
      if ($45) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $47=$1;
      var $48=(($47+4)|0);
      var $49=(($48+96)|0);
      var $50=$49;
      var $51=HEAP[$50];
      var $52=$51 | 128;
      HEAP[$50]=$52;
      __label__ = 10; break;
    case 9: 
      var $54=$1;
      var $55=(($54+4)|0);
      var $56=(($55+96)|0);
      var $57=$56;
      var $58=HEAP[$57];
      var $59=$58 & -129;
      HEAP[$57]=$59;
      __label__ = 10; break;
    case 10: 
      var $61=$ret;
      var $62=(($61 << 24) >> 24)!=0;
      if ($62) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $64=$1;
      var $65=(($64+4)|0);
      var $66=(($65+96)|0);
      var $67=$66;
      var $68=HEAP[$67];
      var $69=$68 | 64;
      HEAP[$67]=$69;
      __label__ = 13; break;
    case 12: 
      var $71=$1;
      var $72=(($71+4)|0);
      var $73=(($72+96)|0);
      var $74=$73;
      var $75=HEAP[$74];
      var $76=$75 & -65;
      HEAP[$74]=$76;
      __label__ = 13; break;
    case 13: 
      var $78=$1;
      var $79=(($78+4)|0);
      var $80=(($79+96)|0);
      var $81=$80;
      var $82=HEAP[$81];
      var $83=$82 & -17;
      HEAP[$81]=$83;
      var $84=$ret;
      var $85=_softx86_parity8($84);
      var $86=(($85)|0)!=0;
      if ($86) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $88=$1;
      var $89=(($88+4)|0);
      var $90=(($89+96)|0);
      var $91=$90;
      var $92=HEAP[$91];
      var $93=$92 | 4;
      HEAP[$91]=$93;
      __label__ = 16; break;
    case 15: 
      var $95=$1;
      var $96=(($95+4)|0);
      var $97=(($96+96)|0);
      var $98=$97;
      var $99=HEAP[$98];
      var $100=$99 & -5;
      HEAP[$98]=$100;
      __label__ = 16; break;
    case 16: 
      var $102=$ret;
      ;
      return $102;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_neg8["X"]=1;

function _op_neg16($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $ret;
      $1=$ctx;
      $2=$src;
      var $3=$2;
      var $4=(($3)&65535);
      var $5=$4 ^ -1;
      var $6=(($5+1)|0);
      var $7=(($6) & 65535);
      $ret=$7;
      var $8=$ret;
      var $9=(($8 << 16) >> 16)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $11=$1;
      var $12=(($11+4)|0);
      var $13=(($12+96)|0);
      var $14=$13;
      var $15=HEAP[$14];
      var $16=$15 | 1;
      HEAP[$14]=$16;
      __label__ = 4; break;
    case 3: 
      var $18=$1;
      var $19=(($18+4)|0);
      var $20=(($19+96)|0);
      var $21=$20;
      var $22=HEAP[$21];
      var $23=$22 & -2;
      HEAP[$21]=$23;
      __label__ = 4; break;
    case 4: 
      var $25=$ret;
      var $26=(($25 << 16) >> 16)!=0;
      if ($26) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $28=$1;
      var $29=(($28+4)|0);
      var $30=(($29+96)|0);
      var $31=$30;
      var $32=HEAP[$31];
      var $33=$32 | 2048;
      HEAP[$31]=$33;
      __label__ = 7; break;
    case 6: 
      var $35=$1;
      var $36=(($35+4)|0);
      var $37=(($36+96)|0);
      var $38=$37;
      var $39=HEAP[$38];
      var $40=$39 & -2049;
      HEAP[$38]=$40;
      __label__ = 7; break;
    case 7: 
      var $42=$ret;
      var $43=(($42)&65535);
      var $44=$43 & 32768;
      var $45=(($44)|0)!=0;
      if ($45) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $47=$1;
      var $48=(($47+4)|0);
      var $49=(($48+96)|0);
      var $50=$49;
      var $51=HEAP[$50];
      var $52=$51 | 128;
      HEAP[$50]=$52;
      __label__ = 10; break;
    case 9: 
      var $54=$1;
      var $55=(($54+4)|0);
      var $56=(($55+96)|0);
      var $57=$56;
      var $58=HEAP[$57];
      var $59=$58 & -129;
      HEAP[$57]=$59;
      __label__ = 10; break;
    case 10: 
      var $61=$ret;
      var $62=(($61 << 16) >> 16)!=0;
      if ($62) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $64=$1;
      var $65=(($64+4)|0);
      var $66=(($65+96)|0);
      var $67=$66;
      var $68=HEAP[$67];
      var $69=$68 | 64;
      HEAP[$67]=$69;
      __label__ = 13; break;
    case 12: 
      var $71=$1;
      var $72=(($71+4)|0);
      var $73=(($72+96)|0);
      var $74=$73;
      var $75=HEAP[$74];
      var $76=$75 & -65;
      HEAP[$74]=$76;
      __label__ = 13; break;
    case 13: 
      var $78=$1;
      var $79=(($78+4)|0);
      var $80=(($79+96)|0);
      var $81=$80;
      var $82=HEAP[$81];
      var $83=$82 & -17;
      HEAP[$81]=$83;
      var $84=$ret;
      var $85=_softx86_parity16($84);
      var $86=(($85)|0)!=0;
      if ($86) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $88=$1;
      var $89=(($88+4)|0);
      var $90=(($89+96)|0);
      var $91=$90;
      var $92=HEAP[$91];
      var $93=$92 | 4;
      HEAP[$91]=$93;
      __label__ = 16; break;
    case 15: 
      var $95=$1;
      var $96=(($95+4)|0);
      var $97=(($96+96)|0);
      var $98=$97;
      var $99=HEAP[$98];
      var $100=$99 & -5;
      HEAP[$98]=$100;
      __label__ = 16; break;
    case 16: 
      var $102=$ret;
      ;
      return $102;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_neg16["X"]=1;

function _op_neg32($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $ret;
      $1=$ctx;
      $2=$src;
      var $3=$2;
      var $4=$3 ^ -1;
      var $5=(($4+1)|0);
      $ret=$5;
      var $6=$ret;
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $9=$1;
      var $10=(($9+4)|0);
      var $11=(($10+96)|0);
      var $12=$11;
      var $13=HEAP[$12];
      var $14=$13 | 1;
      HEAP[$12]=$14;
      __label__ = 4; break;
    case 3: 
      var $16=$1;
      var $17=(($16+4)|0);
      var $18=(($17+96)|0);
      var $19=$18;
      var $20=HEAP[$19];
      var $21=$20 & -2;
      HEAP[$19]=$21;
      __label__ = 4; break;
    case 4: 
      var $23=$ret;
      var $24=(($23)|0)!=0;
      if ($24) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $26=$1;
      var $27=(($26+4)|0);
      var $28=(($27+96)|0);
      var $29=$28;
      var $30=HEAP[$29];
      var $31=$30 | 2048;
      HEAP[$29]=$31;
      __label__ = 7; break;
    case 6: 
      var $33=$1;
      var $34=(($33+4)|0);
      var $35=(($34+96)|0);
      var $36=$35;
      var $37=HEAP[$36];
      var $38=$37 & -2049;
      HEAP[$36]=$38;
      __label__ = 7; break;
    case 7: 
      var $40=$ret;
      var $41=$40 & -2147483648;
      var $42=(($41)|0)!=0;
      if ($42) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $44=$1;
      var $45=(($44+4)|0);
      var $46=(($45+96)|0);
      var $47=$46;
      var $48=HEAP[$47];
      var $49=$48 | 128;
      HEAP[$47]=$49;
      __label__ = 10; break;
    case 9: 
      var $51=$1;
      var $52=(($51+4)|0);
      var $53=(($52+96)|0);
      var $54=$53;
      var $55=HEAP[$54];
      var $56=$55 & -129;
      HEAP[$54]=$56;
      __label__ = 10; break;
    case 10: 
      var $58=$ret;
      var $59=(($58)|0)!=0;
      if ($59) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $61=$1;
      var $62=(($61+4)|0);
      var $63=(($62+96)|0);
      var $64=$63;
      var $65=HEAP[$64];
      var $66=$65 | 64;
      HEAP[$64]=$66;
      __label__ = 13; break;
    case 12: 
      var $68=$1;
      var $69=(($68+4)|0);
      var $70=(($69+96)|0);
      var $71=$70;
      var $72=HEAP[$71];
      var $73=$72 & -65;
      HEAP[$71]=$73;
      __label__ = 13; break;
    case 13: 
      var $75=$1;
      var $76=(($75+4)|0);
      var $77=(($76+96)|0);
      var $78=$77;
      var $79=HEAP[$78];
      var $80=$79 & -17;
      HEAP[$78]=$80;
      var $81=$ret;
      var $82=_softx86_parity32($81);
      var $83=(($82)|0)!=0;
      if ($83) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $85=$1;
      var $86=(($85+4)|0);
      var $87=(($86+96)|0);
      var $88=$87;
      var $89=HEAP[$88];
      var $90=$89 | 4;
      HEAP[$88]=$90;
      __label__ = 16; break;
    case 15: 
      var $92=$1;
      var $93=(($92+4)|0);
      var $94=(($93+96)|0);
      var $95=$94;
      var $96=HEAP[$95];
      var $97=$96 & -5;
      HEAP[$95]=$97;
      __label__ = 16; break;
    case 16: 
      var $99=$ret;
      ;
      return $99;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_neg32["X"]=1;

function _op_mul8($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $result;
      $1=$ctx;
      $2=$src;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=(($4)|0);
      var $6=(($5)|0);
      var $7=$6;
      var $8=(($7)|0);
      var $9=HEAP[$8];
      var $10=(($9)&255);
      $result=$10;
      var $11=$2;
      var $12=(($11)&255);
      var $13=(($12)&65535);
      var $14=$result;
      var $15=(($14)&65535);
      var $16=(($15*$13)|0);
      var $17=(($16) & 65535);
      $result=$17;
      var $18=$result;
      var $19=$1;
      var $20=(($19+4)|0);
      var $21=(($20)|0);
      var $22=(($21)|0);
      var $23=$22;
      var $24=(($23)|0);
      HEAP[$24]=$18;
      var $25=$result;
      var $26=(($25)&65535);
      var $27=$26 >> 8;
      var $28=(($27)|0)!=0;
      if ($28) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $30=$1;
      var $31=(($30+4)|0);
      var $32=(($31+96)|0);
      var $33=$32;
      var $34=HEAP[$33];
      var $35=$34 | 2049;
      HEAP[$33]=$35;
      __label__ = 4; break;
    case 3: 
      var $37=$1;
      var $38=(($37+4)|0);
      var $39=(($38+96)|0);
      var $40=$39;
      var $41=HEAP[$40];
      var $42=$41 & -2050;
      HEAP[$40]=$42;
      __label__ = 4; break;
    case 4: 
      var $44=$result;
      var $45=(($44)&65535);
      var $46=$45 & 32768;
      var $47=(($46)|0)!=0;
      if ($47) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $49=$1;
      var $50=(($49+4)|0);
      var $51=(($50+96)|0);
      var $52=$51;
      var $53=HEAP[$52];
      var $54=$53 | 128;
      HEAP[$52]=$54;
      __label__ = 7; break;
    case 6: 
      var $56=$1;
      var $57=(($56+4)|0);
      var $58=(($57+96)|0);
      var $59=$58;
      var $60=HEAP[$59];
      var $61=$60 & -129;
      HEAP[$59]=$61;
      __label__ = 7; break;
    case 7: 
      var $63=$result;
      var $64=(($63 << 16) >> 16)!=0;
      if ($64) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $66=$1;
      var $67=(($66+4)|0);
      var $68=(($67+96)|0);
      var $69=$68;
      var $70=HEAP[$69];
      var $71=$70 | 64;
      HEAP[$69]=$71;
      __label__ = 10; break;
    case 9: 
      var $73=$1;
      var $74=(($73+4)|0);
      var $75=(($74+96)|0);
      var $76=$75;
      var $77=HEAP[$76];
      var $78=$77 & -65;
      HEAP[$76]=$78;
      __label__ = 10; break;
    case 10: 
      var $80=$1;
      var $81=(($80+4)|0);
      var $82=(($81+96)|0);
      var $83=$82;
      var $84=HEAP[$83];
      var $85=$84 & -17;
      HEAP[$83]=$85;
      var $86=$result;
      var $87=_softx86_parity16($86);
      var $88=(($87)|0)!=0;
      if ($88) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $90=$1;
      var $91=(($90+4)|0);
      var $92=(($91+96)|0);
      var $93=$92;
      var $94=HEAP[$93];
      var $95=$94 | 4;
      HEAP[$93]=$95;
      __label__ = 13; break;
    case 12: 
      var $97=$1;
      var $98=(($97+4)|0);
      var $99=(($98+96)|0);
      var $100=$99;
      var $101=HEAP[$100];
      var $102=$101 & -5;
      HEAP[$100]=$102;
      __label__ = 13; break;
    case 13: 
      var $104=$2;
      ;
      return $104;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_mul8["X"]=1;

function _op_mul16($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $result;
      $1=$ctx;
      $2=$src;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=(($4)|0);
      var $6=(($5)|0);
      var $7=$6;
      var $8=(($7)|0);
      var $9=HEAP[$8];
      var $10=(($9)&65535);
      $result=$10;
      var $11=$2;
      var $12=(($11)&65535);
      var $13=$result;
      var $14=(($13*$12)|0);
      $result=$14;
      var $15=$result;
      var $16=$15 & 65535;
      var $17=(($16) & 65535);
      var $18=$1;
      var $19=(($18+4)|0);
      var $20=(($19)|0);
      var $21=(($20)|0);
      var $22=$21;
      var $23=(($22)|0);
      HEAP[$23]=$17;
      var $24=$result;
      var $25=$24 >>> 16;
      var $26=(($25) & 65535);
      var $27=$1;
      var $28=(($27+4)|0);
      var $29=(($28)|0);
      var $30=(($29+8)|0);
      var $31=$30;
      var $32=(($31)|0);
      HEAP[$32]=$26;
      var $33=$result;
      var $34=$33 >>> 16;
      var $35=(($34)|0)!=0;
      if ($35) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $37=$1;
      var $38=(($37+4)|0);
      var $39=(($38+96)|0);
      var $40=$39;
      var $41=HEAP[$40];
      var $42=$41 | 2049;
      HEAP[$40]=$42;
      __label__ = 4; break;
    case 3: 
      var $44=$1;
      var $45=(($44+4)|0);
      var $46=(($45+96)|0);
      var $47=$46;
      var $48=HEAP[$47];
      var $49=$48 & -2050;
      HEAP[$47]=$49;
      __label__ = 4; break;
    case 4: 
      var $51=$result;
      var $52=$51 & -2147483648;
      var $53=(($52)|0)!=0;
      if ($53) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $55=$1;
      var $56=(($55+4)|0);
      var $57=(($56+96)|0);
      var $58=$57;
      var $59=HEAP[$58];
      var $60=$59 | 128;
      HEAP[$58]=$60;
      __label__ = 7; break;
    case 6: 
      var $62=$1;
      var $63=(($62+4)|0);
      var $64=(($63+96)|0);
      var $65=$64;
      var $66=HEAP[$65];
      var $67=$66 & -129;
      HEAP[$65]=$67;
      __label__ = 7; break;
    case 7: 
      var $69=$result;
      var $70=(($69)|0)!=0;
      if ($70) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $72=$1;
      var $73=(($72+4)|0);
      var $74=(($73+96)|0);
      var $75=$74;
      var $76=HEAP[$75];
      var $77=$76 | 64;
      HEAP[$75]=$77;
      __label__ = 10; break;
    case 9: 
      var $79=$1;
      var $80=(($79+4)|0);
      var $81=(($80+96)|0);
      var $82=$81;
      var $83=HEAP[$82];
      var $84=$83 & -65;
      HEAP[$82]=$84;
      __label__ = 10; break;
    case 10: 
      var $86=$1;
      var $87=(($86+4)|0);
      var $88=(($87+96)|0);
      var $89=$88;
      var $90=HEAP[$89];
      var $91=$90 & -17;
      HEAP[$89]=$91;
      var $92=$result;
      var $93=_softx86_parity32($92);
      var $94=(($93)|0)!=0;
      if ($94) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $96=$1;
      var $97=(($96+4)|0);
      var $98=(($97+96)|0);
      var $99=$98;
      var $100=HEAP[$99];
      var $101=$100 | 4;
      HEAP[$99]=$101;
      __label__ = 13; break;
    case 12: 
      var $103=$1;
      var $104=(($103+4)|0);
      var $105=(($104+96)|0);
      var $106=$105;
      var $107=HEAP[$106];
      var $108=$107 & -5;
      HEAP[$106]=$108;
      __label__ = 13; break;
    case 13: 
      var $110=$2;
      ;
      return $110;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_mul16["X"]=1;
// Warning: Cannot correct overflows of this many bits: 64 at line 32866
// Warning: 64 bit AND - precision limit may be hit on llvm line 32869
// Warning: 64 bit AND - precision limit may be hit on llvm line 32913
// Warning: Cannot correct overflows of this many bits: 64 at line 33333
// Warning: 64 bit AND - precision limit may be hit on llvm line 33336
// Warning: 64 bit AND - precision limit may be hit on llvm line 33363
// Warning: 64 bit AND - precision limit may be hit on llvm line 33389
// Warning: 64 bit OR - precision limit may be hit on llvm line 33706

function _op_mul32($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $result;
      $1=$ctx;
      $2=$src;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=(($4)|0);
      var $6=(($5)|0);
      var $7=$6;
      var $8=HEAP[$7];
      var $9=(($8)>>>0);
      $result=$9;
      var $10=$2;
      var $11=(($10)>>>0);
      var $12=$result;
      var $13=$12*$11;
      $result=$13;
      var $14=$result;
      var $15=Runtime.and64($14, 4294967295);
      var $16=(($15) & 4294967295);
      var $17=$1;
      var $18=(($17+4)|0);
      var $19=(($18)|0);
      var $20=(($19)|0);
      var $21=$20;
      HEAP[$21]=$16;
      var $22=$result;
      var $23=(tempBigIntI=($22 >= 0 ? $22 : 18446744073709552000+$22)/4294967296,tempBigIntI-tempBigIntI%1);
      var $24=(($23) & 4294967295);
      var $25=$1;
      var $26=(($25+4)|0);
      var $27=(($26)|0);
      var $28=(($27+8)|0);
      var $29=$28;
      HEAP[$29]=$24;
      var $30=$result;
      var $31=(tempBigIntI=($30 >= 0 ? $30 : 18446744073709552000+$30)/4294967296,tempBigIntI-tempBigIntI%1);
      var $32=($31 >= 9223372036854776000 ? $31-18446744073709552000 : $31)!=0;
      if ($32) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $34=$1;
      var $35=(($34+4)|0);
      var $36=(($35+96)|0);
      var $37=$36;
      var $38=HEAP[$37];
      var $39=$38 | 2049;
      HEAP[$37]=$39;
      __label__ = 4; break;
    case 3: 
      var $41=$1;
      var $42=(($41+4)|0);
      var $43=(($42+96)|0);
      var $44=$43;
      var $45=HEAP[$44];
      var $46=$45 & -2050;
      HEAP[$44]=$46;
      __label__ = 4; break;
    case 4: 
      var $48=$result;
      var $49=Runtime.and64($48, -9223372036854776000);
      var $50=($49 >= 9223372036854776000 ? $49-18446744073709552000 : $49)!=0;
      if ($50) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=(($53+96)|0);
      var $55=$54;
      var $56=HEAP[$55];
      var $57=$56 | 128;
      HEAP[$55]=$57;
      __label__ = 7; break;
    case 6: 
      var $59=$1;
      var $60=(($59+4)|0);
      var $61=(($60+96)|0);
      var $62=$61;
      var $63=HEAP[$62];
      var $64=$63 & -129;
      HEAP[$62]=$64;
      __label__ = 7; break;
    case 7: 
      var $66=$result;
      var $67=($66 >= 9223372036854776000 ? $66-18446744073709552000 : $66)!=0;
      if ($67) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $69=$1;
      var $70=(($69+4)|0);
      var $71=(($70+96)|0);
      var $72=$71;
      var $73=HEAP[$72];
      var $74=$73 | 64;
      HEAP[$72]=$74;
      __label__ = 10; break;
    case 9: 
      var $76=$1;
      var $77=(($76+4)|0);
      var $78=(($77+96)|0);
      var $79=$78;
      var $80=HEAP[$79];
      var $81=$80 & -65;
      HEAP[$79]=$81;
      __label__ = 10; break;
    case 10: 
      var $83=$1;
      var $84=(($83+4)|0);
      var $85=(($84+96)|0);
      var $86=$85;
      var $87=HEAP[$86];
      var $88=$87 & -17;
      HEAP[$86]=$88;
      var $89=$result;
      var $90=_softx86_parity64($89);
      var $91=(($90)|0)!=0;
      if ($91) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $93=$1;
      var $94=(($93+4)|0);
      var $95=(($94+96)|0);
      var $96=$95;
      var $97=HEAP[$96];
      var $98=$97 | 4;
      HEAP[$96]=$98;
      __label__ = 13; break;
    case 12: 
      var $100=$1;
      var $101=(($100+4)|0);
      var $102=(($101+96)|0);
      var $103=$102;
      var $104=HEAP[$103];
      var $105=$104 & -5;
      HEAP[$103]=$105;
      __label__ = 13; break;
    case 13: 
      var $107=$2;
      ;
      return $107;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_mul32["X"]=1;

function _op_imul8($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $result;
      $1=$ctx;
      $2=$src;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=(($4)|0);
      var $6=(($5)|0);
      var $7=$6;
      var $8=(($7)|0);
      var $9=HEAP[$8];
      var $10=(($9 << 24) >> 24);
      $result=$10;
      var $11=$2;
      var $12=(($11 << 24) >> 24);
      var $13=(($12 << 16) >> 16);
      var $14=$result;
      var $15=(($14 << 16) >> 16);
      var $16=(($15*$13)|0);
      var $17=(($16) & 65535);
      $result=$17;
      var $18=$result;
      var $19=$1;
      var $20=(($19+4)|0);
      var $21=(($20)|0);
      var $22=(($21)|0);
      var $23=$22;
      var $24=(($23)|0);
      HEAP[$24]=$18;
      var $25=$result;
      var $26=(($25 << 16) >> 16);
      var $27=$26 >> 8;
      var $28=(($27)|0)==0;
      if ($28) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $30=$result;
      var $31=(($30 << 16) >> 16);
      var $32=$31 >> 8;
      var $33=$32 & 255;
      var $34=(($33)|0)==255;
      if ($34) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $36=$1;
      var $37=(($36+4)|0);
      var $38=(($37+96)|0);
      var $39=$38;
      var $40=HEAP[$39];
      var $41=$40 & -2050;
      HEAP[$39]=$41;
      __label__ = 5; break;
    case 4: 
      var $43=$1;
      var $44=(($43+4)|0);
      var $45=(($44+96)|0);
      var $46=$45;
      var $47=HEAP[$46];
      var $48=$47 | 2049;
      HEAP[$46]=$48;
      __label__ = 5; break;
    case 5: 
      var $50=$result;
      var $51=(($50 << 16) >> 16);
      var $52=$51 & 32768;
      var $53=(($52)|0)!=0;
      if ($53) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $55=$1;
      var $56=(($55+4)|0);
      var $57=(($56+96)|0);
      var $58=$57;
      var $59=HEAP[$58];
      var $60=$59 | 128;
      HEAP[$58]=$60;
      __label__ = 8; break;
    case 7: 
      var $62=$1;
      var $63=(($62+4)|0);
      var $64=(($63+96)|0);
      var $65=$64;
      var $66=HEAP[$65];
      var $67=$66 & -129;
      HEAP[$65]=$67;
      __label__ = 8; break;
    case 8: 
      var $69=$result;
      var $70=(($69 << 16) >> 16)!=0;
      if ($70) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $72=$1;
      var $73=(($72+4)|0);
      var $74=(($73+96)|0);
      var $75=$74;
      var $76=HEAP[$75];
      var $77=$76 | 64;
      HEAP[$75]=$77;
      __label__ = 11; break;
    case 10: 
      var $79=$1;
      var $80=(($79+4)|0);
      var $81=(($80+96)|0);
      var $82=$81;
      var $83=HEAP[$82];
      var $84=$83 & -65;
      HEAP[$82]=$84;
      __label__ = 11; break;
    case 11: 
      var $86=$1;
      var $87=(($86+4)|0);
      var $88=(($87+96)|0);
      var $89=$88;
      var $90=HEAP[$89];
      var $91=$90 & -17;
      HEAP[$89]=$91;
      var $92=$result;
      var $93=_softx86_parity16($92);
      var $94=(($93)|0)!=0;
      if ($94) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $96=$1;
      var $97=(($96+4)|0);
      var $98=(($97+96)|0);
      var $99=$98;
      var $100=HEAP[$99];
      var $101=$100 | 4;
      HEAP[$99]=$101;
      __label__ = 14; break;
    case 13: 
      var $103=$1;
      var $104=(($103+4)|0);
      var $105=(($104+96)|0);
      var $106=$105;
      var $107=HEAP[$106];
      var $108=$107 & -5;
      HEAP[$106]=$108;
      __label__ = 14; break;
    case 14: 
      var $110=$2;
      ;
      return $110;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_imul8["X"]=1;

function _op_imul16($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $result;
      $1=$ctx;
      $2=$src;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=(($4)|0);
      var $6=(($5)|0);
      var $7=$6;
      var $8=(($7)|0);
      var $9=HEAP[$8];
      var $10=(($9 << 16) >> 16);
      $result=$10;
      var $11=$2;
      var $12=(($11 << 16) >> 16);
      var $13=$result;
      var $14=(($13*$12)|0);
      $result=$14;
      var $15=$result;
      var $16=$15 & 65535;
      var $17=(($16) & 65535);
      var $18=$1;
      var $19=(($18+4)|0);
      var $20=(($19)|0);
      var $21=(($20)|0);
      var $22=$21;
      var $23=(($22)|0);
      HEAP[$23]=$17;
      var $24=$result;
      var $25=$24 >> 16;
      var $26=(($25) & 65535);
      var $27=$1;
      var $28=(($27+4)|0);
      var $29=(($28)|0);
      var $30=(($29+8)|0);
      var $31=$30;
      var $32=(($31)|0);
      HEAP[$32]=$26;
      var $33=$result;
      var $34=$33 >> 16;
      var $35=(($34)|0)==0;
      if ($35) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $37=$result;
      var $38=$37 >> 16;
      var $39=$38 & 65535;
      var $40=(($39)|0)==65535;
      if ($40) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $42=$1;
      var $43=(($42+4)|0);
      var $44=(($43+96)|0);
      var $45=$44;
      var $46=HEAP[$45];
      var $47=$46 & -2050;
      HEAP[$45]=$47;
      __label__ = 5; break;
    case 4: 
      var $49=$1;
      var $50=(($49+4)|0);
      var $51=(($50+96)|0);
      var $52=$51;
      var $53=HEAP[$52];
      var $54=$53 | 2049;
      HEAP[$52]=$54;
      __label__ = 5; break;
    case 5: 
      var $56=$result;
      var $57=$56 & -2147483648;
      var $58=(($57)|0)!=0;
      if ($58) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $60=$1;
      var $61=(($60+4)|0);
      var $62=(($61+96)|0);
      var $63=$62;
      var $64=HEAP[$63];
      var $65=$64 | 128;
      HEAP[$63]=$65;
      __label__ = 8; break;
    case 7: 
      var $67=$1;
      var $68=(($67+4)|0);
      var $69=(($68+96)|0);
      var $70=$69;
      var $71=HEAP[$70];
      var $72=$71 & -129;
      HEAP[$70]=$72;
      __label__ = 8; break;
    case 8: 
      var $74=$result;
      var $75=(($74)|0)!=0;
      if ($75) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $77=$1;
      var $78=(($77+4)|0);
      var $79=(($78+96)|0);
      var $80=$79;
      var $81=HEAP[$80];
      var $82=$81 | 64;
      HEAP[$80]=$82;
      __label__ = 11; break;
    case 10: 
      var $84=$1;
      var $85=(($84+4)|0);
      var $86=(($85+96)|0);
      var $87=$86;
      var $88=HEAP[$87];
      var $89=$88 & -65;
      HEAP[$87]=$89;
      __label__ = 11; break;
    case 11: 
      var $91=$1;
      var $92=(($91+4)|0);
      var $93=(($92+96)|0);
      var $94=$93;
      var $95=HEAP[$94];
      var $96=$95 & -17;
      HEAP[$94]=$96;
      var $97=$result;
      var $98=_softx86_parity32($97);
      var $99=(($98)|0)!=0;
      if ($99) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $101=$1;
      var $102=(($101+4)|0);
      var $103=(($102+96)|0);
      var $104=$103;
      var $105=HEAP[$104];
      var $106=$105 | 4;
      HEAP[$104]=$106;
      __label__ = 14; break;
    case 13: 
      var $108=$1;
      var $109=(($108+4)|0);
      var $110=(($109+96)|0);
      var $111=$110;
      var $112=HEAP[$111];
      var $113=$112 & -5;
      HEAP[$111]=$113;
      __label__ = 14; break;
    case 14: 
      var $115=$2;
      ;
      return $115;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_imul16["X"]=1;

function _op_imul32($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $result;
      $1=$ctx;
      $2=$src;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=(($4)|0);
      var $6=(($5)|0);
      var $7=$6;
      var $8=HEAP[$7];
      var $9=(($8)|0);
      $result=$9;
      var $10=$2;
      var $11=(($10)|0);
      var $12=$result;
      var $13=$12*$11;
      $result=$13;
      var $14=$result;
      var $15=Runtime.and64($14, 4294967295);
      var $16=(($15) & 65535);
      var $17=(($16)&65535);
      var $18=$1;
      var $19=(($18+4)|0);
      var $20=(($19)|0);
      var $21=(($20)|0);
      var $22=$21;
      HEAP[$22]=$17;
      var $23=$result;
      var $24=(tempBigIntI=($23 >= 9223372036854776000 ? $23-18446744073709552000 : $23)/4294967296,tempBigIntI-tempBigIntI%1);
      var $25=(($24) & 65535);
      var $26=(($25)&65535);
      var $27=$1;
      var $28=(($27+4)|0);
      var $29=(($28)|0);
      var $30=(($29+8)|0);
      var $31=$30;
      HEAP[$31]=$26;
      var $32=$result;
      var $33=(tempBigIntI=($32 >= 9223372036854776000 ? $32-18446744073709552000 : $32)/4294967296,tempBigIntI-tempBigIntI%1);
      var $34=($33 >= 9223372036854776000 ? $33-18446744073709552000 : $33)==0;
      if ($34) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $36=$result;
      var $37=(tempBigIntI=($36 >= 9223372036854776000 ? $36-18446744073709552000 : $36)/4294967296,tempBigIntI-tempBigIntI%1);
      var $38=Runtime.and64($37, 4294967295);
      var $39=($38 >= 9223372036854776000 ? $38-18446744073709552000 : $38)==4294967295;
      if ($39) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $41=$1;
      var $42=(($41+4)|0);
      var $43=(($42+96)|0);
      var $44=$43;
      var $45=HEAP[$44];
      var $46=$45 & -2050;
      HEAP[$44]=$46;
      __label__ = 5; break;
    case 4: 
      var $48=$1;
      var $49=(($48+4)|0);
      var $50=(($49+96)|0);
      var $51=$50;
      var $52=HEAP[$51];
      var $53=$52 | 2049;
      HEAP[$51]=$53;
      __label__ = 5; break;
    case 5: 
      var $55=$result;
      var $56=Runtime.and64($55, -9223372036854776000);
      var $57=($56 >= 9223372036854776000 ? $56-18446744073709552000 : $56)!=0;
      if ($57) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $59=$1;
      var $60=(($59+4)|0);
      var $61=(($60+96)|0);
      var $62=$61;
      var $63=HEAP[$62];
      var $64=$63 | 128;
      HEAP[$62]=$64;
      __label__ = 8; break;
    case 7: 
      var $66=$1;
      var $67=(($66+4)|0);
      var $68=(($67+96)|0);
      var $69=$68;
      var $70=HEAP[$69];
      var $71=$70 & -129;
      HEAP[$69]=$71;
      __label__ = 8; break;
    case 8: 
      var $73=$result;
      var $74=($73 >= 9223372036854776000 ? $73-18446744073709552000 : $73)!=0;
      if ($74) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $76=$1;
      var $77=(($76+4)|0);
      var $78=(($77+96)|0);
      var $79=$78;
      var $80=HEAP[$79];
      var $81=$80 | 64;
      HEAP[$79]=$81;
      __label__ = 11; break;
    case 10: 
      var $83=$1;
      var $84=(($83+4)|0);
      var $85=(($84+96)|0);
      var $86=$85;
      var $87=HEAP[$86];
      var $88=$87 & -65;
      HEAP[$86]=$88;
      __label__ = 11; break;
    case 11: 
      var $90=$1;
      var $91=(($90+4)|0);
      var $92=(($91+96)|0);
      var $93=$92;
      var $94=HEAP[$93];
      var $95=$94 & -17;
      HEAP[$93]=$95;
      var $96=$result;
      var $97=_softx86_parity64($96);
      var $98=(($97)|0)!=0;
      if ($98) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $100=$1;
      var $101=(($100+4)|0);
      var $102=(($101+96)|0);
      var $103=$102;
      var $104=HEAP[$103];
      var $105=$104 | 4;
      HEAP[$103]=$105;
      __label__ = 14; break;
    case 13: 
      var $107=$1;
      var $108=(($107+4)|0);
      var $109=(($108+96)|0);
      var $110=$109;
      var $111=HEAP[$110];
      var $112=$111 & -5;
      HEAP[$110]=$112;
      __label__ = 14; break;
    case 14: 
      var $114=$2;
      ;
      return $114;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_imul32["X"]=1;

function _op_div8($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $result;
      $2=$ctx;
      $3=$src;
      var $4=$3;
      var $5=(($4)&255);
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$2;
      var $9=_softx86_int_sw_signal($8, 0);
      var $10=$3;
      $1=$10;
      __label__ = 6; break;
    case 3: 
      var $12=$2;
      var $13=(($12+4)|0);
      var $14=(($13)|0);
      var $15=(($14)|0);
      var $16=$15;
      var $17=(($16)|0);
      var $18=HEAP[$17];
      var $19=(($18)&65535);
      var $20=$3;
      var $21=(($20)&255);
      var $22=(($21)&65535);
      var $23=(((($19)|0)/(($22)|0))|0);
      var $24=(($23) & 65535);
      $result=$24;
      var $25=$result;
      var $26=(($25)&65535);
      var $27=(($26)|0) > 255;
      if ($27) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $29=$2;
      var $30=_softx86_int_sw_signal($29, 0);
      var $31=$3;
      $1=$31;
      __label__ = 6; break;
    case 5: 
      var $33=$2;
      var $34=(($33+4)|0);
      var $35=(($34)|0);
      var $36=(($35)|0);
      var $37=$36;
      var $38=(($37)|0);
      var $39=HEAP[$38];
      var $40=(($39)&65535);
      var $41=$3;
      var $42=(($41)&255);
      var $43=(($42)&65535);
      var $44=(($40)|0)%(($43)|0);
      var $45=(($44) & 255);
      var $46=$2;
      var $47=(($46+4)|0);
      var $48=(($47)|0);
      var $49=(($48)|0);
      var $50=$49;
      var $51=(($50+1)|0);
      HEAP[$51]=$45;
      var $52=$result;
      var $53=(($52) & 255);
      var $54=$2;
      var $55=(($54+4)|0);
      var $56=(($55)|0);
      var $57=(($56)|0);
      var $58=$57;
      var $59=(($58)|0);
      HEAP[$59]=$53;
      var $60=$2;
      var $61=(($60+4)|0);
      var $62=(($61+96)|0);
      var $63=$62;
      var $64=HEAP[$63];
      var $65=$64 & -213;
      HEAP[$63]=$65;
      var $66=$3;
      $1=$66;
      __label__ = 6; break;
    case 6: 
      var $68=$1;
      ;
      return $68;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_div8["X"]=1;

function _op_div16($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $result;
      $2=$ctx;
      $3=$src;
      var $4=$3;
      var $5=(($4)&65535);
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$2;
      var $9=_softx86_int_sw_signal($8, 0);
      var $10=$3;
      $1=$10;
      __label__ = 6; break;
    case 3: 
      var $12=$2;
      var $13=(($12+4)|0);
      var $14=(($13)|0);
      var $15=(($14)|0);
      var $16=$15;
      var $17=(($16)|0);
      var $18=HEAP[$17];
      var $19=(($18)&65535);
      $result=$19;
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=(($21)|0);
      var $23=(($22+8)|0);
      var $24=$23;
      var $25=(($24)|0);
      var $26=HEAP[$25];
      var $27=(($26)&65535);
      var $28=$27 << 16;
      var $29=$result;
      var $30=$29 | $28;
      $result=$30;
      var $31=$3;
      var $32=(($31)&65535);
      var $33=$result;
      var $34=Math.floor((($33)>>>0)/(($32)>>>0));
      $result=$34;
      var $35=$result;
      var $36=(($35)>>>0) > 65535;
      if ($36) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $38=$2;
      var $39=_softx86_int_sw_signal($38, 0);
      var $40=$3;
      $1=$40;
      __label__ = 6; break;
    case 5: 
      var $42=$2;
      var $43=(($42+4)|0);
      var $44=(($43)|0);
      var $45=(($44)|0);
      var $46=$45;
      var $47=(($46)|0);
      var $48=HEAP[$47];
      var $49=(($48)&65535);
      var $50=$3;
      var $51=(($50)&65535);
      var $52=(($49)|0)%(($51)|0);
      var $53=(($52) & 65535);
      var $54=$2;
      var $55=(($54+4)|0);
      var $56=(($55)|0);
      var $57=(($56+8)|0);
      var $58=$57;
      var $59=(($58)|0);
      HEAP[$59]=$53;
      var $60=$result;
      var $61=(($60) & 65535);
      var $62=$2;
      var $63=(($62+4)|0);
      var $64=(($63)|0);
      var $65=(($64)|0);
      var $66=$65;
      var $67=(($66)|0);
      HEAP[$67]=$61;
      var $68=$2;
      var $69=(($68+4)|0);
      var $70=(($69+96)|0);
      var $71=$70;
      var $72=HEAP[$71];
      var $73=$72 & -213;
      HEAP[$71]=$73;
      var $74=$3;
      $1=$74;
      __label__ = 6; break;
    case 6: 
      var $76=$1;
      ;
      return $76;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_div16["X"]=1;

function _op_div32($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $result;
      $2=$ctx;
      $3=$src;
      var $4=$3;
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $7=$2;
      var $8=_softx86_int_sw_signal($7, 0);
      var $9=$3;
      $1=$9;
      __label__ = 6; break;
    case 3: 
      var $11=$2;
      var $12=(($11+4)|0);
      var $13=(($12)|0);
      var $14=(($13)|0);
      var $15=$14;
      var $16=HEAP[$15];
      var $17=(($16)>>>0);
      $result=$17;
      var $18=$2;
      var $19=(($18+4)|0);
      var $20=(($19)|0);
      var $21=(($20+8)|0);
      var $22=$21;
      var $23=HEAP[$22];
      var $24=(($23)>>>0);
      var $25=$24*4294967296;
      var $26=$result;
      var $27=Runtime.or64($26, $25);
      $result=$27;
      var $28=$3;
      var $29=(($28)>>>0);
      var $30=$result;
      var $31=Math.floor(($30 >= 0 ? $30 : 18446744073709552000+$30)/($29 >= 0 ? $29 : 18446744073709552000+$29));
      $result=$31;
      var $32=$result;
      var $33=($32 >= 0 ? $32 : 18446744073709552000+$32) > 4294967295;
      if ($33) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $35=$2;
      var $36=_softx86_int_sw_signal($35, 0);
      var $37=$3;
      $1=$37;
      __label__ = 6; break;
    case 5: 
      var $39=$2;
      var $40=(($39+4)|0);
      var $41=(($40)|0);
      var $42=(($41)|0);
      var $43=$42;
      var $44=HEAP[$43];
      var $45=$3;
      var $46=(($44)>>>0)%(($45)>>>0);
      var $47=$2;
      var $48=(($47+4)|0);
      var $49=(($48)|0);
      var $50=(($49+8)|0);
      var $51=$50;
      HEAP[$51]=$46;
      var $52=$result;
      var $53=(($52) & 4294967295);
      var $54=$2;
      var $55=(($54+4)|0);
      var $56=(($55)|0);
      var $57=(($56)|0);
      var $58=$57;
      HEAP[$58]=$53;
      var $59=$2;
      var $60=(($59+4)|0);
      var $61=(($60+96)|0);
      var $62=$61;
      var $63=HEAP[$62];
      var $64=$63 & -213;
      HEAP[$62]=$64;
      var $65=$3;
      $1=$65;
      __label__ = 6; break;
    case 6: 
      var $67=$1;
      ;
      return $67;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_div32["X"]=1;
// Warning: 64 bit OR - precision limit may be hit on llvm line 34002

function _op_idiv8($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $result;
      $2=$ctx;
      $3=$src;
      var $4=$3;
      var $5=(($4)&255);
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$2;
      var $9=_softx86_int_sw_signal($8, 0);
      var $10=$3;
      $1=$10;
      __label__ = 7; break;
    case 3: 
      var $12=$2;
      var $13=(($12+4)|0);
      var $14=(($13)|0);
      var $15=(($14)|0);
      var $16=$15;
      var $17=(($16)|0);
      var $18=HEAP[$17];
      var $19=(($18 << 16) >> 16);
      var $20=$3;
      var $21=(($20 << 24) >> 24);
      var $22=(((($19)|0)/(($21)|0))|0);
      var $23=(($22) & 65535);
      $result=$23;
      var $24=$result;
      var $25=(($24 << 16) >> 16);
      var $26=(($25)|0) < -128;
      if ($26) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $28=$result;
      var $29=(($28 << 16) >> 16);
      var $30=(($29)|0) >= 128;
      if ($30) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $32=$2;
      var $33=_softx86_int_sw_signal($32, 0);
      var $34=$3;
      $1=$34;
      __label__ = 7; break;
    case 6: 
      var $36=$2;
      var $37=(($36+4)|0);
      var $38=(($37)|0);
      var $39=(($38)|0);
      var $40=$39;
      var $41=(($40)|0);
      var $42=HEAP[$41];
      var $43=(($42 << 16) >> 16);
      var $44=$3;
      var $45=(($44 << 24) >> 24);
      var $46=(($43)|0)%(($45)|0);
      var $47=(($46) & 255);
      var $48=$2;
      var $49=(($48+4)|0);
      var $50=(($49)|0);
      var $51=(($50)|0);
      var $52=$51;
      var $53=(($52+1)|0);
      HEAP[$53]=$47;
      var $54=$result;
      var $55=(($54) & 255);
      var $56=$2;
      var $57=(($56+4)|0);
      var $58=(($57)|0);
      var $59=(($58)|0);
      var $60=$59;
      var $61=(($60)|0);
      HEAP[$61]=$55;
      var $62=$2;
      var $63=(($62+4)|0);
      var $64=(($63+96)|0);
      var $65=$64;
      var $66=HEAP[$65];
      var $67=$66 & -213;
      HEAP[$65]=$67;
      var $68=$3;
      $1=$68;
      __label__ = 7; break;
    case 7: 
      var $70=$1;
      ;
      return $70;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_idiv8["X"]=1;

function _op_idiv16($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $result;
      $2=$ctx;
      $3=$src;
      var $4=$3;
      var $5=(($4)&65535);
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$2;
      var $9=_softx86_int_sw_signal($8, 0);
      var $10=$3;
      $1=$10;
      __label__ = 7; break;
    case 3: 
      var $12=$2;
      var $13=(($12+4)|0);
      var $14=(($13)|0);
      var $15=(($14)|0);
      var $16=$15;
      var $17=(($16)|0);
      var $18=HEAP[$17];
      var $19=(($18)&65535);
      $result=$19;
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=(($21)|0);
      var $23=(($22+8)|0);
      var $24=$23;
      var $25=(($24)|0);
      var $26=HEAP[$25];
      var $27=(($26)&65535);
      var $28=$27 << 16;
      var $29=$result;
      var $30=$29 | $28;
      $result=$30;
      var $31=$3;
      var $32=(($31 << 16) >> 16);
      var $33=$result;
      var $34=(((($33)|0)/(($32)|0))|0);
      $result=$34;
      var $35=$result;
      var $36=(($35)|0) < -32768;
      if ($36) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $38=$result;
      var $39=(($38)|0) >= 32768;
      if ($39) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $41=$2;
      var $42=_softx86_int_sw_signal($41, 0);
      var $43=$3;
      $1=$43;
      __label__ = 7; break;
    case 6: 
      var $45=$2;
      var $46=(($45+4)|0);
      var $47=(($46)|0);
      var $48=(($47)|0);
      var $49=$48;
      var $50=(($49)|0);
      var $51=HEAP[$50];
      var $52=(($51 << 16) >> 16);
      var $53=$3;
      var $54=(($53 << 16) >> 16);
      var $55=(($52)|0)%(($54)|0);
      var $56=(($55) & 65535);
      var $57=$2;
      var $58=(($57+4)|0);
      var $59=(($58)|0);
      var $60=(($59+8)|0);
      var $61=$60;
      var $62=(($61)|0);
      HEAP[$62]=$56;
      var $63=$result;
      var $64=(($63) & 65535);
      var $65=$2;
      var $66=(($65+4)|0);
      var $67=(($66)|0);
      var $68=(($67)|0);
      var $69=$68;
      var $70=(($69)|0);
      HEAP[$70]=$64;
      var $71=$2;
      var $72=(($71+4)|0);
      var $73=(($72+96)|0);
      var $74=$73;
      var $75=HEAP[$74];
      var $76=$75 & -213;
      HEAP[$74]=$76;
      var $77=$3;
      $1=$77;
      __label__ = 7; break;
    case 7: 
      var $79=$1;
      ;
      return $79;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_idiv16["X"]=1;

function _op_idiv32($ctx, $src) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $result;
      $2=$ctx;
      $3=$src;
      var $4=$3;
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $7=$2;
      var $8=_softx86_int_sw_signal($7, 0);
      var $9=$3;
      $1=$9;
      __label__ = 7; break;
    case 3: 
      var $11=$2;
      var $12=(($11+4)|0);
      var $13=(($12)|0);
      var $14=(($13)|0);
      var $15=$14;
      var $16=HEAP[$15];
      var $17=(($16)>>>0);
      $result=$17;
      var $18=$2;
      var $19=(($18+4)|0);
      var $20=(($19)|0);
      var $21=(($20+8)|0);
      var $22=$21;
      var $23=HEAP[$22];
      var $24=(($23)>>>0);
      var $25=$24*4294967296;
      var $26=$result;
      var $27=Runtime.or64($26, $25);
      $result=$27;
      var $28=$3;
      var $29=(($28)>>>0);
      var $30=$result;
      var $31=(tempBigIntR=($30 >= 9223372036854776000 ? $30-18446744073709552000 : $30)/($29 >= 9223372036854776000 ? $29-18446744073709552000 : $29),tempBigIntR >= 0 ? Math.floor(tempBigIntR) : Math.ceil(tempBigIntR));
      $result=$31;
      var $32=$result;
      var $33=($32 >= 9223372036854776000 ? $32-18446744073709552000 : $32) < 2147483648;
      if ($33) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $35=$result;
      var $36=($35 >= 9223372036854776000 ? $35-18446744073709552000 : $35) >= 2147483648;
      if ($36) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $38=$2;
      var $39=_softx86_int_sw_signal($38, 0);
      var $40=$3;
      $1=$40;
      __label__ = 7; break;
    case 6: 
      var $42=$2;
      var $43=(($42+4)|0);
      var $44=(($43)|0);
      var $45=(($44)|0);
      var $46=$45;
      var $47=HEAP[$46];
      var $48=$3;
      var $49=(($47)|0)%(($48)|0);
      var $50=$2;
      var $51=(($50+4)|0);
      var $52=(($51)|0);
      var $53=(($52+8)|0);
      var $54=$53;
      HEAP[$54]=$49;
      var $55=$result;
      var $56=(($55) & 4294967295);
      var $57=$2;
      var $58=(($57+4)|0);
      var $59=(($58)|0);
      var $60=(($59)|0);
      var $61=$60;
      HEAP[$61]=$56;
      var $62=$2;
      var $63=(($62+4)|0);
      var $64=(($63+96)|0);
      var $65=$64;
      var $66=HEAP[$65];
      var $67=$66 & -213;
      HEAP[$65]=$67;
      var $68=$3;
      $1=$68;
      __label__ = 7; break;
    case 7: 
      var $70=$1;
      ;
      return $70;
    default: assert(0, "bad label: " + __label__);
  }
}
_op_idiv32["X"]=1;

function _Sfx86OpcodeExec_xor($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 252;
      var $7=(($6)|0)==48;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$2;
      var $14=(($13)&255);
      var $15=$14 & 2;
      var $16=$15 >> 1;
      var $17=(($16) & 255);
      $opswap=$17;
      var $18=$3;
      var $19=_softx86_fetch_exec_byte($18);
      $x=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 6;
      var $23=(($22) & 255);
      $mod=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 >> 3;
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $reg=$28;
      var $29=$x;
      var $30=(($29)&255);
      var $31=$30 & 7;
      var $32=(($31) & 255);
      $rm=$32;
      var $33=$3;
      var $34=$w16;
      var $35=$mod;
      var $36=$reg;
      var $37=$rm;
      var $38=$opswap;
      _sx86_exec_full_modregrm_rw($33, $34, 0, $35, $36, $37, $38, 78, 80, 82);
      $1=1;
      __label__ = 8; break;
    case 3: 
      var $40=$2;
      var $41=(($40)&255);
      var $42=(($41)|0)==52;
      if ($42) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $44=$3;
      var $45=_softx86_fetch_exec_byte($44);
      $x1=$45;
      var $46=$3;
      var $47=$3;
      var $48=(($47+4)|0);
      var $49=(($48)|0);
      var $50=(($49)|0);
      var $51=$50;
      var $52=(($51)|0);
      var $53=HEAP[$52];
      var $54=$x1;
      var $55=_op_xor8($46, $53, $54);
      $x1=$55;
      var $56=$x1;
      var $57=$3;
      var $58=(($57+4)|0);
      var $59=(($58)|0);
      var $60=(($59)|0);
      var $61=$60;
      var $62=(($61)|0);
      HEAP[$62]=$56;
      $1=1;
      __label__ = 8; break;
    case 5: 
      var $64=$2;
      var $65=(($64)&255);
      var $66=(($65)|0)==53;
      if ($66) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $68=$3;
      var $69=_softx86_fetch_exec_byte($68);
      var $70=(($69)&255);
      $x2=$70;
      var $71=$3;
      var $72=_softx86_fetch_exec_byte($71);
      var $73=(($72)&255);
      var $74=$73 << 8;
      var $75=$x2;
      var $76=(($75)&65535);
      var $77=$76 | $74;
      var $78=(($77) & 65535);
      $x2=$78;
      var $79=$3;
      var $80=$3;
      var $81=(($80+4)|0);
      var $82=(($81)|0);
      var $83=(($82)|0);
      var $84=$83;
      var $85=(($84)|0);
      var $86=HEAP[$85];
      var $87=$x2;
      var $88=_op_xor16($79, $86, $87);
      $x2=$88;
      var $89=$x2;
      var $90=$3;
      var $91=(($90+4)|0);
      var $92=(($91)|0);
      var $93=(($92)|0);
      var $94=$93;
      var $95=(($94)|0);
      HEAP[$95]=$89;
      $1=1;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $98=$1;
      ;
      return $98;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_xor["X"]=1;

function _Sfx86OpcodeDec_xor($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 252;
      var $8=(($7)|0)==48;
      if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$2;
      var $15=(($14)&255);
      var $16=$15 & 2;
      var $17=$16 >> 1;
      var $18=(($17) & 255);
      $opswap=$18;
      var $19=$3;
      var $20=_softx86_fetch_dec_byte($19);
      $x=$20;
      var $21=$x;
      var $22=(($21)&255);
      var $23=$22 >> 6;
      var $24=(($23) & 255);
      $mod=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 >> 3;
      var $28=$27 & 7;
      var $29=(($28) & 255);
      $reg=$29;
      var $30=$x;
      var $31=(($30)&255);
      var $32=$31 & 7;
      var $33=(($32) & 255);
      $rm=$33;
      var $34=$3;
      var $35=$w16;
      var $36=$mod;
      var $37=$reg;
      var $38=$rm;
      _sx86_dec_full_modregrm($34, $35, 0, $36, $37, $38, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $39=$opswap;
      var $40=(($39 << 24) >> 24)!=0;
      if ($40) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $42=$4;
      var $43=_sprintf($42, ((STRING_TABLE.__str265)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      __label__ = 5; break;
    case 4: 
      var $45=$4;
      var $46=_sprintf($45, ((STRING_TABLE.__str265)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=((_op2_tmp)|0),tempInt));
      __label__ = 5; break;
    case 5: 
      $1=1;
      __label__ = 11; break;
    case 6: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=(($50)|0)==52;
      if ($51) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $53=$3;
      var $54=_softx86_fetch_dec_byte($53);
      $x1=$54;
      var $55=$4;
      var $56=$x1;
      var $57=(($56)&255);
      var $58=_sprintf($55, ((STRING_TABLE.__str1266)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$57,tempInt));
      $1=1;
      __label__ = 11; break;
    case 8: 
      var $60=$2;
      var $61=(($60)&255);
      var $62=(($61)|0)==53;
      if ($62) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $64=$3;
      var $65=_softx86_fetch_dec_byte($64);
      var $66=(($65)&255);
      $x2=$66;
      var $67=$3;
      var $68=_softx86_fetch_dec_byte($67);
      var $69=(($68)&255);
      var $70=$69 << 8;
      var $71=$x2;
      var $72=(($71)&65535);
      var $73=$72 | $70;
      var $74=(($73) & 65535);
      $x2=$74;
      var $75=$4;
      var $76=$x2;
      var $77=(($76)&65535);
      var $78=_sprintf($75, ((STRING_TABLE.__str2267)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$77,tempInt));
      $1=1;
      __label__ = 11; break;
    case 10: 
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $81=$1;
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_xor["X"]=1;

function _Sfx86OpcodeExec_or($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 252;
      var $7=(($6)|0)==8;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$2;
      var $14=(($13)&255);
      var $15=$14 & 2;
      var $16=$15 >> 1;
      var $17=(($16) & 255);
      $opswap=$17;
      var $18=$3;
      var $19=_softx86_fetch_exec_byte($18);
      $x=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 6;
      var $23=(($22) & 255);
      $mod=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 >> 3;
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $reg=$28;
      var $29=$x;
      var $30=(($29)&255);
      var $31=$30 & 7;
      var $32=(($31) & 255);
      $rm=$32;
      var $33=$3;
      var $34=$w16;
      var $35=$mod;
      var $36=$reg;
      var $37=$rm;
      var $38=$opswap;
      _sx86_exec_full_modregrm_rw($33, $34, 0, $35, $36, $37, $38, 66, 68, 70);
      $1=1;
      __label__ = 8; break;
    case 3: 
      var $40=$2;
      var $41=(($40)&255);
      var $42=(($41)|0)==12;
      if ($42) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $44=$3;
      var $45=_softx86_fetch_exec_byte($44);
      $x1=$45;
      var $46=$3;
      var $47=$3;
      var $48=(($47+4)|0);
      var $49=(($48)|0);
      var $50=(($49)|0);
      var $51=$50;
      var $52=(($51)|0);
      var $53=HEAP[$52];
      var $54=$x1;
      var $55=_op_or8($46, $53, $54);
      $x1=$55;
      var $56=$x1;
      var $57=$3;
      var $58=(($57+4)|0);
      var $59=(($58)|0);
      var $60=(($59)|0);
      var $61=$60;
      var $62=(($61)|0);
      HEAP[$62]=$56;
      $1=1;
      __label__ = 8; break;
    case 5: 
      var $64=$2;
      var $65=(($64)&255);
      var $66=(($65)|0)==13;
      if ($66) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $68=$3;
      var $69=_softx86_fetch_exec_byte($68);
      var $70=(($69)&255);
      $x2=$70;
      var $71=$3;
      var $72=_softx86_fetch_exec_byte($71);
      var $73=(($72)&255);
      var $74=$73 << 8;
      var $75=$x2;
      var $76=(($75)&65535);
      var $77=$76 | $74;
      var $78=(($77) & 65535);
      $x2=$78;
      var $79=$3;
      var $80=$3;
      var $81=(($80+4)|0);
      var $82=(($81)|0);
      var $83=(($82)|0);
      var $84=$83;
      var $85=(($84)|0);
      var $86=HEAP[$85];
      var $87=$x2;
      var $88=_op_or16($79, $86, $87);
      $x2=$88;
      var $89=$x2;
      var $90=$3;
      var $91=(($90+4)|0);
      var $92=(($91)|0);
      var $93=(($92)|0);
      var $94=$93;
      var $95=(($94)|0);
      HEAP[$95]=$89;
      $1=1;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $98=$1;
      ;
      return $98;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_or["X"]=1;

function _Sfx86OpcodeDec_or($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 252;
      var $8=(($7)|0)==8;
      if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$2;
      var $15=(($14)&255);
      var $16=$15 & 2;
      var $17=$16 >> 1;
      var $18=(($17) & 255);
      $opswap=$18;
      var $19=$3;
      var $20=_softx86_fetch_dec_byte($19);
      $x=$20;
      var $21=$x;
      var $22=(($21)&255);
      var $23=$22 >> 6;
      var $24=(($23) & 255);
      $mod=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 >> 3;
      var $28=$27 & 7;
      var $29=(($28) & 255);
      $reg=$29;
      var $30=$x;
      var $31=(($30)&255);
      var $32=$31 & 7;
      var $33=(($32) & 255);
      $rm=$33;
      var $34=$3;
      var $35=$w16;
      var $36=$mod;
      var $37=$reg;
      var $38=$rm;
      _sx86_dec_full_modregrm($34, $35, 0, $36, $37, $38, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $39=$opswap;
      var $40=(($39 << 24) >> 24)!=0;
      if ($40) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $42=$4;
      var $43=_sprintf($42, ((STRING_TABLE.__str3268)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      __label__ = 5; break;
    case 4: 
      var $45=$4;
      var $46=_sprintf($45, ((STRING_TABLE.__str3268)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=((_op2_tmp)|0),tempInt));
      __label__ = 5; break;
    case 5: 
      $1=1;
      __label__ = 11; break;
    case 6: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=(($50)|0)==12;
      if ($51) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $53=$3;
      var $54=_softx86_fetch_dec_byte($53);
      $x1=$54;
      var $55=$4;
      var $56=$x1;
      var $57=(($56)&255);
      var $58=_sprintf($55, ((STRING_TABLE.__str4269)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$57,tempInt));
      $1=1;
      __label__ = 11; break;
    case 8: 
      var $60=$2;
      var $61=(($60)&255);
      var $62=(($61)|0)==13;
      if ($62) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $64=$3;
      var $65=_softx86_fetch_dec_byte($64);
      var $66=(($65)&255);
      $x2=$66;
      var $67=$3;
      var $68=_softx86_fetch_dec_byte($67);
      var $69=(($68)&255);
      var $70=$69 << 8;
      var $71=$x2;
      var $72=(($71)&65535);
      var $73=$72 | $70;
      var $74=(($73) & 65535);
      $x2=$74;
      var $75=$4;
      var $76=$x2;
      var $77=(($76)&65535);
      var $78=_sprintf($75, ((STRING_TABLE.__str5270)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$77,tempInt));
      $1=1;
      __label__ = 11; break;
    case 10: 
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $81=$1;
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_or["X"]=1;

function _Sfx86OpcodeExec_and($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 252;
      var $7=(($6)|0)==32;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$2;
      var $14=(($13)&255);
      var $15=$14 & 2;
      var $16=$15 >> 1;
      var $17=(($16) & 255);
      $opswap=$17;
      var $18=$3;
      var $19=_softx86_fetch_exec_byte($18);
      $x=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 6;
      var $23=(($22) & 255);
      $mod=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 >> 3;
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $reg=$28;
      var $29=$x;
      var $30=(($29)&255);
      var $31=$30 & 7;
      var $32=(($31) & 255);
      $rm=$32;
      var $33=$3;
      var $34=$w16;
      var $35=$mod;
      var $36=$reg;
      var $37=$rm;
      var $38=$opswap;
      _sx86_exec_full_modregrm_rw($33, $34, 0, $35, $36, $37, $38, 72, 74, 76);
      $1=1;
      __label__ = 8; break;
    case 3: 
      var $40=$2;
      var $41=(($40)&255);
      var $42=(($41)|0)==36;
      if ($42) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $44=$3;
      var $45=_softx86_fetch_exec_byte($44);
      $x1=$45;
      var $46=$3;
      var $47=$3;
      var $48=(($47+4)|0);
      var $49=(($48)|0);
      var $50=(($49)|0);
      var $51=$50;
      var $52=(($51)|0);
      var $53=HEAP[$52];
      var $54=$x1;
      var $55=_op_and8($46, $53, $54);
      $x1=$55;
      var $56=$x1;
      var $57=$3;
      var $58=(($57+4)|0);
      var $59=(($58)|0);
      var $60=(($59)|0);
      var $61=$60;
      var $62=(($61)|0);
      HEAP[$62]=$56;
      $1=1;
      __label__ = 8; break;
    case 5: 
      var $64=$2;
      var $65=(($64)&255);
      var $66=(($65)|0)==37;
      if ($66) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $68=$3;
      var $69=_softx86_fetch_exec_byte($68);
      var $70=(($69)&255);
      $x2=$70;
      var $71=$3;
      var $72=_softx86_fetch_exec_byte($71);
      var $73=(($72)&255);
      var $74=$73 << 8;
      var $75=$x2;
      var $76=(($75)&65535);
      var $77=$76 | $74;
      var $78=(($77) & 65535);
      $x2=$78;
      var $79=$3;
      var $80=$3;
      var $81=(($80+4)|0);
      var $82=(($81)|0);
      var $83=(($82)|0);
      var $84=$83;
      var $85=(($84)|0);
      var $86=HEAP[$85];
      var $87=$x2;
      var $88=_op_and16($79, $86, $87);
      $x2=$88;
      var $89=$x2;
      var $90=$3;
      var $91=(($90+4)|0);
      var $92=(($91)|0);
      var $93=(($92)|0);
      var $94=$93;
      var $95=(($94)|0);
      HEAP[$95]=$89;
      $1=1;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $98=$1;
      ;
      return $98;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_and["X"]=1;

function _Sfx86OpcodeDec_and($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 252;
      var $8=(($7)|0)==32;
      if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$2;
      var $15=(($14)&255);
      var $16=$15 & 2;
      var $17=$16 >> 1;
      var $18=(($17) & 255);
      $opswap=$18;
      var $19=$3;
      var $20=_softx86_fetch_dec_byte($19);
      $x=$20;
      var $21=$x;
      var $22=(($21)&255);
      var $23=$22 >> 6;
      var $24=(($23) & 255);
      $mod=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 >> 3;
      var $28=$27 & 7;
      var $29=(($28) & 255);
      $reg=$29;
      var $30=$x;
      var $31=(($30)&255);
      var $32=$31 & 7;
      var $33=(($32) & 255);
      $rm=$33;
      var $34=$3;
      var $35=$w16;
      var $36=$mod;
      var $37=$reg;
      var $38=$rm;
      _sx86_dec_full_modregrm($34, $35, 0, $36, $37, $38, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $39=$opswap;
      var $40=(($39 << 24) >> 24)!=0;
      if ($40) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $42=$4;
      var $43=_sprintf($42, ((STRING_TABLE.__str6271)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      __label__ = 5; break;
    case 4: 
      var $45=$4;
      var $46=_sprintf($45, ((STRING_TABLE.__str6271)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=((_op2_tmp)|0),tempInt));
      __label__ = 5; break;
    case 5: 
      $1=1;
      __label__ = 11; break;
    case 6: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=(($50)|0)==36;
      if ($51) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $53=$3;
      var $54=_softx86_fetch_dec_byte($53);
      $x1=$54;
      var $55=$4;
      var $56=$x1;
      var $57=(($56)&255);
      var $58=_sprintf($55, ((STRING_TABLE.__str7272)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$57,tempInt));
      $1=1;
      __label__ = 11; break;
    case 8: 
      var $60=$2;
      var $61=(($60)&255);
      var $62=(($61)|0)==37;
      if ($62) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $64=$3;
      var $65=_softx86_fetch_dec_byte($64);
      var $66=(($65)&255);
      $x2=$66;
      var $67=$3;
      var $68=_softx86_fetch_dec_byte($67);
      var $69=(($68)&255);
      var $70=$69 << 8;
      var $71=$x2;
      var $72=(($71)&65535);
      var $73=$72 | $70;
      var $74=(($73) & 65535);
      $x2=$74;
      var $75=$4;
      var $76=$x2;
      var $77=(($76)&65535);
      var $78=_sprintf($75, ((STRING_TABLE.__str8273)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$77,tempInt));
      $1=1;
      __label__ = 11; break;
    case 10: 
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $81=$1;
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_and["X"]=1;

function _Sfx86OpcodeExec_test($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 254;
      var $7=(($6)|0)==132;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$2;
      var $14=(($13)&255);
      var $15=$14 & 2;
      var $16=$15 >> 1;
      var $17=(($16) & 255);
      $opswap=$17;
      var $18=$3;
      var $19=_softx86_fetch_exec_byte($18);
      $x=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 6;
      var $23=(($22) & 255);
      $mod=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 >> 3;
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $reg=$28;
      var $29=$x;
      var $30=(($29)&255);
      var $31=$30 & 7;
      var $32=(($31) & 255);
      $rm=$32;
      var $33=$3;
      var $34=$w16;
      var $35=$mod;
      var $36=$reg;
      var $37=$rm;
      var $38=$opswap;
      _sx86_exec_full_modregrm_ro($33, $34, 0, $35, $36, $37, $38, 270, 272, 274);
      $1=1;
      __label__ = 8; break;
    case 3: 
      var $40=$2;
      var $41=(($40)&255);
      var $42=(($41)|0)==168;
      if ($42) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $44=$3;
      var $45=_softx86_fetch_exec_byte($44);
      $x1=$45;
      var $46=$3;
      var $47=$3;
      var $48=(($47+4)|0);
      var $49=(($48)|0);
      var $50=(($49)|0);
      var $51=$50;
      var $52=(($51)|0);
      var $53=HEAP[$52];
      var $54=$x1;
      var $55=_op_test8($46, $53, $54);
      $1=1;
      __label__ = 8; break;
    case 5: 
      var $57=$2;
      var $58=(($57)&255);
      var $59=(($58)|0)==169;
      if ($59) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $61=$3;
      var $62=_softx86_fetch_exec_byte($61);
      var $63=(($62)&255);
      $x2=$63;
      var $64=$3;
      var $65=_softx86_fetch_exec_byte($64);
      var $66=(($65)&255);
      var $67=$66 << 8;
      var $68=$x2;
      var $69=(($68)&65535);
      var $70=$69 | $67;
      var $71=(($70) & 65535);
      $x2=$71;
      var $72=$3;
      var $73=$3;
      var $74=(($73+4)|0);
      var $75=(($74)|0);
      var $76=(($75)|0);
      var $77=$76;
      var $78=(($77)|0);
      var $79=HEAP[$78];
      var $80=$x2;
      var $81=_op_test16($72, $79, $80);
      $1=1;
      __label__ = 8; break;
    case 7: 
      $1=0;
      __label__ = 8; break;
    case 8: 
      var $84=$1;
      ;
      return $84;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_test["X"]=1;

function _Sfx86OpcodeDec_test($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $opswap;
      var $mod;
      var $reg;
      var $rm;
      var $x1;
      var $x2;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 254;
      var $8=(($7)|0)==132;
      if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$2;
      var $15=(($14)&255);
      var $16=$15 & 2;
      var $17=$16 >> 1;
      var $18=(($17) & 255);
      $opswap=$18;
      var $19=$3;
      var $20=_softx86_fetch_dec_byte($19);
      $x=$20;
      var $21=$x;
      var $22=(($21)&255);
      var $23=$22 >> 6;
      var $24=(($23) & 255);
      $mod=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 >> 3;
      var $28=$27 & 7;
      var $29=(($28) & 255);
      $reg=$29;
      var $30=$x;
      var $31=(($30)&255);
      var $32=$31 & 7;
      var $33=(($32) & 255);
      $rm=$33;
      var $34=$3;
      var $35=$w16;
      var $36=$mod;
      var $37=$reg;
      var $38=$rm;
      _sx86_dec_full_modregrm($34, $35, 0, $36, $37, $38, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $39=$opswap;
      var $40=(($39 << 24) >> 24)!=0;
      if ($40) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $42=$4;
      var $43=_sprintf($42, ((STRING_TABLE.__str9274)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      __label__ = 5; break;
    case 4: 
      var $45=$4;
      var $46=_sprintf($45, ((STRING_TABLE.__str9274)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=((_op2_tmp)|0),tempInt));
      __label__ = 5; break;
    case 5: 
      $1=1;
      __label__ = 11; break;
    case 6: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=(($50)|0)==168;
      if ($51) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $53=$3;
      var $54=_softx86_fetch_dec_byte($53);
      $x1=$54;
      var $55=$4;
      var $56=$x1;
      var $57=(($56)&255);
      var $58=_sprintf($55, ((STRING_TABLE.__str10275)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$57,tempInt));
      $1=1;
      __label__ = 11; break;
    case 8: 
      var $60=$2;
      var $61=(($60)&255);
      var $62=(($61)|0)==169;
      if ($62) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $64=$3;
      var $65=_softx86_fetch_dec_byte($64);
      var $66=(($65)&255);
      $x2=$66;
      var $67=$3;
      var $68=_softx86_fetch_dec_byte($67);
      var $69=(($68)&255);
      var $70=$69 << 8;
      var $71=$x2;
      var $72=(($71)&65535);
      var $73=$72 | $70;
      var $74=(($73) & 65535);
      $x2=$74;
      var $75=$4;
      var $76=$x2;
      var $77=(($76)&65535);
      var $78=_sprintf($75, ((STRING_TABLE.__str11276)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$77,tempInt));
      $1=1;
      __label__ = 11; break;
    case 10: 
      $1=0;
      __label__ = 11; break;
    case 11: 
      var $81=$1;
      ;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_test["X"]=1;

function _Sfx86OpcodeExec_xchg($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      var $tmp;
      var $ro;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 254;
      var $7=(($6)|0)==134;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11) & 255);
      $w16=$12;
      var $13=$3;
      var $14=_softx86_fetch_exec_byte($13);
      $x=$14;
      var $15=$x;
      var $16=(($15)&255);
      var $17=$16 >> 6;
      var $18=(($17) & 255);
      $mod=$18;
      var $19=$x;
      var $20=(($19)&255);
      var $21=$20 >> 3;
      var $22=$21 & 7;
      var $23=(($22) & 255);
      $reg=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 & 7;
      var $27=(($26) & 255);
      $rm=$27;
      var $28=$3;
      var $29=$w16;
      var $30=$mod;
      var $31=$reg;
      var $32=$rm;
      _sx86_exec_full_modregrm_xchg($28, $29, 0, $30, $31, $32);
      $1=1;
      __label__ = 6; break;
    case 3: 
      var $34=$2;
      var $35=(($34)&255);
      var $36=$35 & 248;
      var $37=(($36)|0)==144;
      if ($37) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $39=$2;
      var $40=(($39)&255);
      var $41=(($40-144)|0);
      $ro=$41;
      var $42=$ro;
      var $43=$3;
      var $44=(($43+4)|0);
      var $45=(($44)|0);
      var $46=(($45+($42<<2))|0);
      var $47=$46;
      var $48=(($47)|0);
      var $49=HEAP[$48];
      $tmp=$49;
      var $50=$3;
      var $51=(($50+4)|0);
      var $52=(($51)|0);
      var $53=(($52)|0);
      var $54=$53;
      var $55=(($54)|0);
      var $56=HEAP[$55];
      var $57=$ro;
      var $58=$3;
      var $59=(($58+4)|0);
      var $60=(($59)|0);
      var $61=(($60+($57<<2))|0);
      var $62=$61;
      var $63=(($62)|0);
      HEAP[$63]=$56;
      var $64=$tmp;
      var $65=$3;
      var $66=(($65+4)|0);
      var $67=(($66)|0);
      var $68=(($67)|0);
      var $69=$68;
      var $70=(($69)|0);
      HEAP[$70]=$64;
      $1=1;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $73=$1;
      ;
      return $73;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_xchg["X"]=1;

function _Sfx86OpcodeDec_xchg($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $w16;
      var $mod;
      var $reg;
      var $rm;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=$6 & 254;
      var $8=(($7)|0)==134;
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)&255);
      var $12=$11 & 1;
      var $13=(($12) & 255);
      $w16=$13;
      var $14=$3;
      var $15=_softx86_fetch_dec_byte($14);
      $x=$15;
      var $16=$x;
      var $17=(($16)&255);
      var $18=$17 >> 6;
      var $19=(($18) & 255);
      $mod=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 3;
      var $23=$22 & 7;
      var $24=(($23) & 255);
      $reg=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $rm=$28;
      var $29=$3;
      var $30=$w16;
      var $31=$mod;
      var $32=$reg;
      var $33=$rm;
      _sx86_dec_full_modregrm($29, $30, 0, $31, $32, $33, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $34=$4;
      var $35=_sprintf($34, ((STRING_TABLE.__str12277)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op1_tmp)|0),HEAP[tempInt+4]=((_op2_tmp)|0),tempInt));
      $1=1;
      __label__ = 6; break;
    case 3: 
      var $37=$2;
      var $38=(($37)&255);
      var $39=$38 & 248;
      var $40=(($39)|0)==144;
      if ($40) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $42=$4;
      var $43=$2;
      var $44=(($43)&255);
      var $45=(($44-144)|0);
      var $46=((_sx86_regs16+($45<<2))|0);
      var $47=HEAP[$46];
      var $48=_sprintf($42, ((STRING_TABLE.__str13278)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$47,tempInt));
      $1=1;
      __label__ = 6; break;
    case 5: 
      $1=0;
      __label__ = 6; break;
    case 6: 
      var $51=$1;
      ;
      return $51;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_xchg["X"]=1;

function _Sfx86OpcodeExec_lea($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $mod;
      var $reg;
      var $rm;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==141;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$3;
      var $9=_softx86_fetch_exec_byte($8);
      $x=$9;
      var $10=$x;
      var $11=(($10)&255);
      var $12=$11 >> 6;
      var $13=(($12) & 255);
      $mod=$13;
      var $14=$x;
      var $15=(($14)&255);
      var $16=$15 >> 3;
      var $17=$16 & 7;
      var $18=(($17) & 255);
      $reg=$18;
      var $19=$x;
      var $20=(($19)&255);
      var $21=$20 & 7;
      var $22=(($21) & 255);
      $rm=$22;
      var $23=$3;
      var $24=$mod;
      var $25=$reg;
      var $26=$rm;
      _sx86_exec_full_modregrm_lea($23, 0, $24, $25, $26);
      $1=1;
      __label__ = 4; break;
    case 3: 
      $1=0;
      __label__ = 4; break;
    case 4: 
      var $29=$1;
      ;
      return $29;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeDec_lea($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $mod;
      var $reg;
      var $rm;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==141;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$3;
      var $10=_softx86_fetch_dec_byte($9);
      $x=$10;
      var $11=$x;
      var $12=(($11)&255);
      var $13=$12 >> 6;
      var $14=(($13) & 255);
      $mod=$14;
      var $15=$x;
      var $16=(($15)&255);
      var $17=$16 >> 3;
      var $18=$17 & 7;
      var $19=(($18) & 255);
      $reg=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 & 7;
      var $23=(($22) & 255);
      $rm=$23;
      var $24=$3;
      var $25=$mod;
      var $26=$reg;
      var $27=$rm;
      _sx86_dec_full_modregrm($24, 1, 0, $25, $26, $27, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $28=$4;
      var $29=_sprintf($28, ((STRING_TABLE.__str14279)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      $1=1;
      __label__ = 4; break;
    case 3: 
      $1=0;
      __label__ = 4; break;
    case 4: 
      var $32=$1;
      ;
      return $32;
    default: assert(0, "bad label: " + __label__);
  }
}


function _op_bound16($ctx, $idx, $upper, $lower) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $2=$ctx;
      $3=$idx;
      $4=$upper;
      $5=$lower;
      var $6=$3;
      var $7=(($6 << 16) >> 16);
      var $8=$5;
      var $9=(($8 << 16) >> 16);
      var $10=(($7)|0) >= (($9)|0);
      if ($10) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $12=$3;
      var $13=(($12 << 16) >> 16);
      var $14=$4;
      var $15=(($14 << 16) >> 16);
      var $16=(($15+2)|0);
      var $17=(($13)|0) <= (($16)|0);
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $19=$5;
      $1=$19;
      __label__ = 6; break;
    case 4: 
      var $21=$2;
      var $22=$2;
      var $23=(($22+4)|0);
      var $24=(($23+108)|0);
      var $25=HEAP[$24];
      var $26=_softx86_set_near_instruction_ptr($21, $25);
      var $27=$2;
      var $28=_softx86_int_sw_signal($27, 5);
      __label__ = 5; break;
    case 5: 
      var $30=$5;
      $1=$30;
      __label__ = 6; break;
    case 6: 
      var $32=$1;
      ;
      return $32;
    default: assert(0, "bad label: " + __label__);
  }
}


function _op_bound32($ctx, $idx, $upper, $lower) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $2=$ctx;
      $3=$idx;
      $4=$upper;
      $5=$lower;
      var $6=$3;
      var $7=$5;
      var $8=(($6)|0) >= (($7)|0);
      if ($8) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $10=$3;
      var $11=$4;
      var $12=(($11+4)|0);
      var $13=(($10)|0) <= (($12)|0);
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $15=$5;
      $1=$15;
      __label__ = 6; break;
    case 4: 
      var $17=$2;
      var $18=$2;
      var $19=(($18+4)|0);
      var $20=(($19+108)|0);
      var $21=HEAP[$20];
      var $22=_softx86_set_near_instruction_ptr($17, $21);
      var $23=$2;
      var $24=_softx86_int_sw_signal($23, 5);
      __label__ = 5; break;
    case 5: 
      var $26=$5;
      $1=$26;
      __label__ = 6; break;
    case 6: 
      var $28=$1;
      ;
      return $28;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeExec_bound($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $x;
      var $mod;
      var $reg;
      var $rm;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==98;
      if ($6) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $8=$3;
      var $9=(($8+200)|0);
      var $10=HEAP[$9];
      var $11=(($10)|0) >= 1;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$3;
      var $14=_softx86_fetch_exec_byte($13);
      $x=$14;
      var $15=$x;
      var $16=(($15)&255);
      var $17=$16 >> 6;
      var $18=(($17) & 255);
      $mod=$18;
      var $19=$x;
      var $20=(($19)&255);
      var $21=$20 >> 3;
      var $22=$21 & 7;
      var $23=(($22) & 255);
      $reg=$23;
      var $24=$x;
      var $25=(($24)&255);
      var $26=$25 & 7;
      var $27=(($26) & 255);
      $rm=$27;
      var $28=$3;
      var $29=$mod;
      var $30=$reg;
      var $31=$rm;
      _sx86_exec_full_modregrm_far_ro3($28, 0, $29, $30, $31, 288, 290);
      $1=1;
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $34=$1;
      ;
      return $34;
    default: assert(0, "bad label: " + __label__);
  }
}


function _Sfx86OpcodeDec_bound($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $x;
      var $mod;
      var $reg;
      var $rm;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==98;
      if ($7) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $9=$3;
      var $10=(($9+200)|0);
      var $11=HEAP[$10];
      var $12=(($11)|0) >= 1;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$3;
      var $15=_softx86_fetch_dec_byte($14);
      $x=$15;
      var $16=$x;
      var $17=(($16)&255);
      var $18=$17 >> 6;
      var $19=(($18) & 255);
      $mod=$19;
      var $20=$x;
      var $21=(($20)&255);
      var $22=$21 >> 3;
      var $23=$22 & 7;
      var $24=(($23) & 255);
      $reg=$24;
      var $25=$x;
      var $26=(($25)&255);
      var $27=$26 & 7;
      var $28=(($27) & 255);
      $rm=$28;
      var $29=$3;
      var $30=$mod;
      var $31=$reg;
      var $32=$rm;
      _sx86_dec_full_modregrm($29, 1, 0, $30, $31, $32, ((_op1_tmp)|0), ((_op2_tmp)|0));
      var $33=$4;
      var $34=_sprintf($33, ((STRING_TABLE.__str15280)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=((_op2_tmp)|0),HEAP[tempInt+4]=((_op1_tmp)|0),tempInt));
      $1=1;
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $37=$1;
      ;
      return $37;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_bound["X"]=1;

function _Sfx86OpcodeExec_jc($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $tf;
      var $rel;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==227;
      if ($6) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      var $8=$2;
      var $9=(($8)&255);
      var $10=$9 & 240;
      var $11=(($10)|0)==112;
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=0;
      __label__ = 68; break;
    case 4: 
      var $14=$3;
      var $15=_softx86_fetch_exec_byte($14);
      var $16=(($15)&255);
      $rel=$16;
      var $17=$rel;
      var $18=$17 & 128;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $21=$rel;
      var $22=$21 | -256;
      $rel=$22;
      __label__ = 6; break;
    case 6: 
      var $24=$3;
      var $25=(($24+4)|0);
      var $26=(($25+100)|0);
      var $27=HEAP[$26];
      var $28=$rel;
      var $29=(($28+$27)|0);
      $rel=$29;
      var $30=$rel;
      var $31=$30 & 65535;
      $rel=$31;
      var $32=$2;
      var $33=(($32)&255);
      var $34=(($33)|0)==227;
      if ($34) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $36=$3;
      var $37=(($36+4)|0);
      var $38=(($37)|0);
      var $39=(($38+4)|0);
      var $40=$39;
      var $41=(($40)|0);
      var $42=HEAP[$41];
      var $43=(($42)&65535);
      var $44=(($43)|0)==0;
      var $45=(($44)&1);
      $tf=$45;
      __label__ = 65; break;
    case 8: 
      var $47=$2;
      var $48=(($47)&255);
      var $49=(($48)|0)==112;
      if ($49) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $51=$3;
      var $52=(($51+4)|0);
      var $53=(($52+96)|0);
      var $54=$53;
      var $55=HEAP[$54];
      var $56=$55 & 2048;
      $tf=$56;
      __label__ = 64; break;
    case 10: 
      var $58=$2;
      var $59=(($58)&255);
      var $60=(($59)|0)==113;
      if ($60) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $62=$3;
      var $63=(($62+4)|0);
      var $64=(($63+96)|0);
      var $65=$64;
      var $66=HEAP[$65];
      var $67=$66 & 2048;
      var $68=(($67)|0)!=0;
      var $69=$68 ^ 1;
      var $70=(($69)&1);
      $tf=$70;
      __label__ = 63; break;
    case 12: 
      var $72=$2;
      var $73=(($72)&255);
      var $74=(($73)|0)==114;
      if ($74) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $76=$3;
      var $77=(($76+4)|0);
      var $78=(($77+96)|0);
      var $79=$78;
      var $80=HEAP[$79];
      var $81=$80 & 1;
      $tf=$81;
      __label__ = 62; break;
    case 14: 
      var $83=$2;
      var $84=(($83)&255);
      var $85=(($84)|0)==115;
      if ($85) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $87=$3;
      var $88=(($87+4)|0);
      var $89=(($88+96)|0);
      var $90=$89;
      var $91=HEAP[$90];
      var $92=$91 & 1;
      var $93=(($92)|0)!=0;
      var $94=$93 ^ 1;
      var $95=(($94)&1);
      $tf=$95;
      __label__ = 61; break;
    case 16: 
      var $97=$2;
      var $98=(($97)&255);
      var $99=(($98)|0)==116;
      if ($99) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $101=$3;
      var $102=(($101+4)|0);
      var $103=(($102+96)|0);
      var $104=$103;
      var $105=HEAP[$104];
      var $106=$105 & 64;
      $tf=$106;
      __label__ = 60; break;
    case 18: 
      var $108=$2;
      var $109=(($108)&255);
      var $110=(($109)|0)==117;
      if ($110) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $112=$3;
      var $113=(($112+4)|0);
      var $114=(($113+96)|0);
      var $115=$114;
      var $116=HEAP[$115];
      var $117=$116 & 64;
      var $118=(($117)|0)!=0;
      var $119=$118 ^ 1;
      var $120=(($119)&1);
      $tf=$120;
      __label__ = 59; break;
    case 20: 
      var $122=$2;
      var $123=(($122)&255);
      var $124=(($123)|0)==118;
      if ($124) { __label__ = 21; break; } else { __label__ = 24; break; }
    case 21: 
      var $126=$3;
      var $127=(($126+4)|0);
      var $128=(($127+96)|0);
      var $129=$128;
      var $130=HEAP[$129];
      var $131=$130 & 64;
      var $132=(($131)|0)!=0;
      if ($132) { var $142 = 1;__label__ = 23; break; } else { __label__ = 22; break; }
    case 22: 
      var $134=$3;
      var $135=(($134+4)|0);
      var $136=(($135+96)|0);
      var $137=$136;
      var $138=HEAP[$137];
      var $139=$138 & 1;
      var $140=(($139)|0)!=0;
      var $142 = $140;__label__ = 23; break;
    case 23: 
      var $142;
      var $143=(($142)&1);
      $tf=$143;
      __label__ = 58; break;
    case 24: 
      var $145=$2;
      var $146=(($145)&255);
      var $147=(($146)|0)==119;
      if ($147) { __label__ = 25; break; } else { __label__ = 28; break; }
    case 25: 
      var $149=$3;
      var $150=(($149+4)|0);
      var $151=(($150+96)|0);
      var $152=$151;
      var $153=HEAP[$152];
      var $154=$153 & 64;
      var $155=(($154)|0)!=0;
      if ($155) { var $166 = 0;__label__ = 27; break; } else { __label__ = 26; break; }
    case 26: 
      var $157=$3;
      var $158=(($157+4)|0);
      var $159=(($158+96)|0);
      var $160=$159;
      var $161=HEAP[$160];
      var $162=$161 & 1;
      var $163=(($162)|0)!=0;
      var $164=$163 ^ 1;
      var $166 = $164;__label__ = 27; break;
    case 27: 
      var $166;
      var $167=(($166)&1);
      $tf=$167;
      __label__ = 57; break;
    case 28: 
      var $169=$2;
      var $170=(($169)&255);
      var $171=(($170)|0)==120;
      if ($171) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $173=$3;
      var $174=(($173+4)|0);
      var $175=(($174+96)|0);
      var $176=$175;
      var $177=HEAP[$176];
      var $178=$177 & 128;
      $tf=$178;
      __label__ = 56; break;
    case 30: 
      var $180=$2;
      var $181=(($180)&255);
      var $182=(($181)|0)==121;
      if ($182) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $184=$3;
      var $185=(($184+4)|0);
      var $186=(($185+96)|0);
      var $187=$186;
      var $188=HEAP[$187];
      var $189=$188 & 128;
      var $190=(($189)|0)!=0;
      var $191=$190 ^ 1;
      var $192=(($191)&1);
      $tf=$192;
      __label__ = 55; break;
    case 32: 
      var $194=$2;
      var $195=(($194)&255);
      var $196=(($195)|0)==122;
      if ($196) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $198=$3;
      var $199=(($198+4)|0);
      var $200=(($199+96)|0);
      var $201=$200;
      var $202=HEAP[$201];
      var $203=$202 & 4;
      $tf=$203;
      __label__ = 54; break;
    case 34: 
      var $205=$2;
      var $206=(($205)&255);
      var $207=(($206)|0)==123;
      if ($207) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $209=$3;
      var $210=(($209+4)|0);
      var $211=(($210+96)|0);
      var $212=$211;
      var $213=HEAP[$212];
      var $214=$213 & 4;
      var $215=(($214)|0)!=0;
      var $216=$215 ^ 1;
      var $217=(($216)&1);
      $tf=$217;
      __label__ = 53; break;
    case 36: 
      var $219=$2;
      var $220=(($219)&255);
      var $221=(($220)|0)==124;
      if ($221) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $223=$3;
      var $224=(($223+4)|0);
      var $225=(($224+96)|0);
      var $226=$225;
      var $227=HEAP[$226];
      var $228=$227 & 128;
      var $229=$3;
      var $230=(($229+4)|0);
      var $231=(($230+96)|0);
      var $232=$231;
      var $233=HEAP[$232];
      var $234=$233 & 2048;
      var $235=(($228)|0)!=(($234)|0);
      var $236=(($235)&1);
      $tf=$236;
      __label__ = 52; break;
    case 38: 
      var $238=$2;
      var $239=(($238)&255);
      var $240=(($239)|0)==125;
      if ($240) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $242=$3;
      var $243=(($242+4)|0);
      var $244=(($243+96)|0);
      var $245=$244;
      var $246=HEAP[$245];
      var $247=$246 & 128;
      var $248=$3;
      var $249=(($248+4)|0);
      var $250=(($249+96)|0);
      var $251=$250;
      var $252=HEAP[$251];
      var $253=$252 & 2048;
      var $254=(($247)|0)==(($253)|0);
      var $255=(($254)&1);
      $tf=$255;
      __label__ = 51; break;
    case 40: 
      var $257=$2;
      var $258=(($257)&255);
      var $259=(($258)|0)==126;
      if ($259) { __label__ = 41; break; } else { __label__ = 44; break; }
    case 41: 
      var $261=$3;
      var $262=(($261+4)|0);
      var $263=(($262+96)|0);
      var $264=$263;
      var $265=HEAP[$264];
      var $266=$265 & 128;
      var $267=$3;
      var $268=(($267+4)|0);
      var $269=(($268+96)|0);
      var $270=$269;
      var $271=HEAP[$270];
      var $272=$271 & 2048;
      var $273=(($266)|0)!=(($272)|0);
      if ($273) { var $283 = 1;__label__ = 43; break; } else { __label__ = 42; break; }
    case 42: 
      var $275=$3;
      var $276=(($275+4)|0);
      var $277=(($276+96)|0);
      var $278=$277;
      var $279=HEAP[$278];
      var $280=$279 & 64;
      var $281=(($280)|0)!=0;
      var $283 = $281;__label__ = 43; break;
    case 43: 
      var $283;
      var $284=(($283)&1);
      $tf=$284;
      __label__ = 50; break;
    case 44: 
      var $286=$2;
      var $287=(($286)&255);
      var $288=(($287)|0)==127;
      if ($288) { __label__ = 45; break; } else { __label__ = 48; break; }
    case 45: 
      var $290=$3;
      var $291=(($290+4)|0);
      var $292=(($291+96)|0);
      var $293=$292;
      var $294=HEAP[$293];
      var $295=$294 & 128;
      var $296=$3;
      var $297=(($296+4)|0);
      var $298=(($297+96)|0);
      var $299=$298;
      var $300=HEAP[$299];
      var $301=$300 & 2048;
      var $302=(($295)|0)==(($301)|0);
      if ($302) { __label__ = 46; break; } else { var $313 = 0;__label__ = 47; break; }
    case 46: 
      var $304=$3;
      var $305=(($304+4)|0);
      var $306=(($305+96)|0);
      var $307=$306;
      var $308=HEAP[$307];
      var $309=$308 & 64;
      var $310=(($309)|0)!=0;
      var $311=$310 ^ 1;
      var $313 = $311;__label__ = 47; break;
    case 47: 
      var $313;
      var $314=(($313)&1);
      $tf=$314;
      __label__ = 49; break;
    case 48: 
      $1=0;
      __label__ = 68; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      __label__ = 51; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $333=$tf;
      var $334=(($333)|0)!=0;
      if ($334) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $336=$3;
      var $337=$3;
      var $338=(($337+4)|0);
      var $339=(($338+32)|0);
      var $340=(($339+8)|0);
      var $341=(($340)|0);
      var $342=HEAP[$341];
      var $343=(($342)&65535);
      var $344=$rel;
      var $345=_softx86_set_instruction_ptr($336, $343, $344);
      __label__ = 67; break;
    case 67: 
      $1=1;
      __label__ = 68; break;
    case 68: 
      var $348=$1;
      ;
      return $348;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_jc["X"]=1;

function _Sfx86OpcodeDec_jc($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $rel;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==227;
      if ($7) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 240;
      var $12=(($11)|0)==112;
      if ($12) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=0;
      __label__ = 58; break;
    case 4: 
      var $15=$3;
      var $16=_softx86_fetch_dec_byte($15);
      var $17=(($16)&255);
      $rel=$17;
      var $18=$rel;
      var $19=$18 & 128;
      var $20=(($19)|0)!=0;
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $22=$rel;
      var $23=$22 | -256;
      $rel=$23;
      __label__ = 6; break;
    case 6: 
      var $25=$3;
      var $26=(($25+4)|0);
      var $27=(($26+116)|0);
      var $28=HEAP[$27];
      var $29=$rel;
      var $30=(($29+$28)|0);
      $rel=$30;
      var $31=$rel;
      var $32=$31 & 65535;
      $rel=$32;
      var $33=$2;
      var $34=(($33)&255);
      var $35=(($34)|0)==227;
      if ($35) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $37=$4;
      var $38=$rel;
      var $39=_sprintf($37, ((STRING_TABLE.__str495)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$38,tempInt));
      __label__ = 57; break;
    case 8: 
      var $41=$2;
      var $42=(($41)&255);
      var $43=(($42)|0)==112;
      if ($43) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $45=$4;
      var $46=$rel;
      var $47=_sprintf($45, ((STRING_TABLE.__str1496)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$46,tempInt));
      __label__ = 56; break;
    case 10: 
      var $49=$2;
      var $50=(($49)&255);
      var $51=(($50)|0)==113;
      if ($51) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $53=$4;
      var $54=$rel;
      var $55=_sprintf($53, ((STRING_TABLE.__str2497)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$54,tempInt));
      __label__ = 55; break;
    case 12: 
      var $57=$2;
      var $58=(($57)&255);
      var $59=(($58)|0)==114;
      if ($59) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $61=$4;
      var $62=$rel;
      var $63=_sprintf($61, ((STRING_TABLE.__str3498)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$62,tempInt));
      __label__ = 54; break;
    case 14: 
      var $65=$2;
      var $66=(($65)&255);
      var $67=(($66)|0)==115;
      if ($67) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $69=$4;
      var $70=$rel;
      var $71=_sprintf($69, ((STRING_TABLE.__str4499)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$70,tempInt));
      __label__ = 53; break;
    case 16: 
      var $73=$2;
      var $74=(($73)&255);
      var $75=(($74)|0)==116;
      if ($75) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $77=$4;
      var $78=$rel;
      var $79=_sprintf($77, ((STRING_TABLE.__str5500)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$78,tempInt));
      __label__ = 52; break;
    case 18: 
      var $81=$2;
      var $82=(($81)&255);
      var $83=(($82)|0)==117;
      if ($83) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $85=$4;
      var $86=$rel;
      var $87=_sprintf($85, ((STRING_TABLE.__str6501)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$86,tempInt));
      __label__ = 51; break;
    case 20: 
      var $89=$2;
      var $90=(($89)&255);
      var $91=(($90)|0)==118;
      if ($91) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $93=$4;
      var $94=$rel;
      var $95=_sprintf($93, ((STRING_TABLE.__str7502)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$94,tempInt));
      __label__ = 50; break;
    case 22: 
      var $97=$2;
      var $98=(($97)&255);
      var $99=(($98)|0)==119;
      if ($99) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $101=$4;
      var $102=$rel;
      var $103=_sprintf($101, ((STRING_TABLE.__str8503)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$102,tempInt));
      __label__ = 49; break;
    case 24: 
      var $105=$2;
      var $106=(($105)&255);
      var $107=(($106)|0)==120;
      if ($107) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $109=$4;
      var $110=$rel;
      var $111=_sprintf($109, ((STRING_TABLE.__str9504)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$110,tempInt));
      __label__ = 48; break;
    case 26: 
      var $113=$2;
      var $114=(($113)&255);
      var $115=(($114)|0)==121;
      if ($115) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $117=$4;
      var $118=$rel;
      var $119=_sprintf($117, ((STRING_TABLE.__str10505)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$118,tempInt));
      __label__ = 47; break;
    case 28: 
      var $121=$2;
      var $122=(($121)&255);
      var $123=(($122)|0)==122;
      if ($123) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $125=$4;
      var $126=$rel;
      var $127=_sprintf($125, ((STRING_TABLE.__str11506)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$126,tempInt));
      __label__ = 46; break;
    case 30: 
      var $129=$2;
      var $130=(($129)&255);
      var $131=(($130)|0)==123;
      if ($131) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $133=$4;
      var $134=$rel;
      var $135=_sprintf($133, ((STRING_TABLE.__str12507)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$134,tempInt));
      __label__ = 45; break;
    case 32: 
      var $137=$2;
      var $138=(($137)&255);
      var $139=(($138)|0)==124;
      if ($139) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $141=$4;
      var $142=$rel;
      var $143=_sprintf($141, ((STRING_TABLE.__str13508)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$142,tempInt));
      __label__ = 44; break;
    case 34: 
      var $145=$2;
      var $146=(($145)&255);
      var $147=(($146)|0)==125;
      if ($147) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $149=$4;
      var $150=$rel;
      var $151=_sprintf($149, ((STRING_TABLE.__str14509)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$150,tempInt));
      __label__ = 43; break;
    case 36: 
      var $153=$2;
      var $154=(($153)&255);
      var $155=(($154)|0)==126;
      if ($155) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $157=$4;
      var $158=$rel;
      var $159=_sprintf($157, ((STRING_TABLE.__str15510)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$158,tempInt));
      __label__ = 42; break;
    case 38: 
      var $161=$2;
      var $162=(($161)&255);
      var $163=(($162)|0)==127;
      if ($163) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $165=$4;
      var $166=$rel;
      var $167=_sprintf($165, ((STRING_TABLE.__str16511)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$166,tempInt));
      __label__ = 41; break;
    case 40: 
      $1=0;
      __label__ = 58; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      __label__ = 51; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      $1=1;
      __label__ = 58; break;
    case 58: 
      var $187=$1;
      ;
      return $187;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_jc["X"]=1;

function _Sfx86OpcodeExec_call($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $seg;
      var $ofs;
      var $ofs1;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==154;
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$3;
      var $9=_softx86_fetch_exec_byte($8);
      var $10=(($9)&255);
      $ofs=$10;
      var $11=$3;
      var $12=_softx86_fetch_exec_byte($11);
      var $13=(($12)&255);
      var $14=(($13)&65535);
      var $15=$14 << 8;
      var $16=$ofs;
      var $17=(($16)&65535);
      var $18=$17 | $15;
      var $19=(($18) & 65535);
      $ofs=$19;
      var $20=$3;
      var $21=_softx86_fetch_exec_byte($20);
      var $22=(($21)&255);
      $seg=$22;
      var $23=$3;
      var $24=_softx86_fetch_exec_byte($23);
      var $25=(($24)&255);
      var $26=(($25)&65535);
      var $27=$26 << 8;
      var $28=$seg;
      var $29=(($28)&65535);
      var $30=$29 | $27;
      var $31=(($30) & 65535);
      $seg=$31;
      var $32=$3;
      var $33=$3;
      var $34=(($33+4)|0);
      var $35=(($34+32)|0);
      var $36=(($35+8)|0);
      var $37=(($36)|0);
      var $38=HEAP[$37];
      _softx86_stack_pushw($32, $38);
      var $39=$3;
      var $40=$3;
      var $41=(($40+4)|0);
      var $42=(($41+100)|0);
      var $43=HEAP[$42];
      var $44=(($43) & 65535);
      _softx86_stack_pushw($39, $44);
      var $45=$3;
      var $46=$seg;
      var $47=(($46)&65535);
      var $48=$ofs;
      var $49=(($48)&65535);
      var $50=_softx86_set_instruction_ptr($45, $47, $49);
      $1=1;
      __label__ = 9; break;
    case 3: 
      var $52=$2;
      var $53=(($52)&255);
      var $54=(($53)|0)==232;
      if ($54) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $56=$3;
      var $57=_softx86_fetch_exec_byte($56);
      var $58=(($57)&255);
      $ofs1=$58;
      var $59=$3;
      var $60=_softx86_fetch_exec_byte($59);
      var $61=(($60)&255);
      var $62=$61 << 8;
      var $63=$ofs1;
      var $64=$63 | $62;
      $ofs1=$64;
      var $65=$ofs1;
      var $66=$65 & 32768;
      var $67=(($66)|0)!=0;
      if ($67) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $69=$ofs1;
      var $70=(($69-65536)|0);
      $ofs1=$70;
      __label__ = 6; break;
    case 6: 
      var $72=$3;
      var $73=(($72+4)|0);
      var $74=(($73+100)|0);
      var $75=HEAP[$74];
      var $76=$ofs1;
      var $77=(($76+$75)|0);
      $ofs1=$77;
      var $78=$ofs1;
      var $79=$78 & 65535;
      $ofs1=$79;
      var $80=$3;
      var $81=$3;
      var $82=(($81+4)|0);
      var $83=(($82+100)|0);
      var $84=HEAP[$83];
      var $85=(($84) & 65535);
      _softx86_stack_pushw($80, $85);
      var $86=$3;
      var $87=$ofs1;
      var $88=_softx86_set_near_instruction_ptr($86, $87);
      $1=1;
      __label__ = 9; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      $1=0;
      __label__ = 9; break;
    case 9: 
      var $92=$1;
      ;
      return $92;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_call["X"]=1;

function _Sfx86OpcodeDec_call($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $seg;
      var $ofs;
      var $ofs1;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==154;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$3;
      var $10=_softx86_fetch_dec_byte($9);
      var $11=(($10)&255);
      $ofs=$11;
      var $12=$3;
      var $13=_softx86_fetch_dec_byte($12);
      var $14=(($13)&255);
      var $15=(($14)&65535);
      var $16=$15 << 8;
      var $17=$ofs;
      var $18=(($17)&65535);
      var $19=$18 | $16;
      var $20=(($19) & 65535);
      $ofs=$20;
      var $21=$3;
      var $22=_softx86_fetch_dec_byte($21);
      var $23=(($22)&255);
      $seg=$23;
      var $24=$3;
      var $25=_softx86_fetch_dec_byte($24);
      var $26=(($25)&255);
      var $27=(($26)&65535);
      var $28=$27 << 8;
      var $29=$seg;
      var $30=(($29)&65535);
      var $31=$30 | $28;
      var $32=(($31) & 65535);
      $seg=$32;
      var $33=$4;
      var $34=$seg;
      var $35=(($34)&65535);
      var $36=$ofs;
      var $37=(($36)&65535);
      var $38=_sprintf($33, ((STRING_TABLE.__str17512)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$35,HEAP[tempInt+4]=$37,tempInt));
      $1=1;
      __label__ = 9; break;
    case 3: 
      var $40=$2;
      var $41=(($40)&255);
      var $42=(($41)|0)==232;
      if ($42) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $44=$3;
      var $45=_softx86_fetch_dec_byte($44);
      var $46=(($45)&255);
      $ofs1=$46;
      var $47=$3;
      var $48=_softx86_fetch_dec_byte($47);
      var $49=(($48)&255);
      var $50=$49 << 8;
      var $51=$ofs1;
      var $52=$51 | $50;
      $ofs1=$52;
      var $53=$ofs1;
      var $54=$53 & 32768;
      var $55=(($54)|0)!=0;
      if ($55) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $57=$ofs1;
      var $58=(($57-65536)|0);
      $ofs1=$58;
      __label__ = 6; break;
    case 6: 
      var $60=$3;
      var $61=(($60+4)|0);
      var $62=(($61+116)|0);
      var $63=HEAP[$62];
      var $64=$ofs1;
      var $65=(($64+$63)|0);
      $ofs1=$65;
      var $66=$ofs1;
      var $67=$66 & 65535;
      $ofs1=$67;
      var $68=$4;
      var $69=$ofs1;
      var $70=_sprintf($68, ((STRING_TABLE.__str18513)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$69,tempInt));
      $1=1;
      __label__ = 9; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      $1=0;
      __label__ = 9; break;
    case 9: 
      var $74=$1;
      ;
      return $74;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_call["X"]=1;

function _Sfx86OpcodeExec_jmp($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ofs;
      var $seg;
      var $ofs1;
      var $ofs2;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0)==233;
      if ($6) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $8=$3;
      var $9=_softx86_fetch_exec_byte($8);
      var $10=(($9)&255);
      $ofs=$10;
      var $11=$3;
      var $12=_softx86_fetch_exec_byte($11);
      var $13=(($12)&255);
      var $14=$13 << 8;
      var $15=$ofs;
      var $16=$15 | $14;
      $ofs=$16;
      var $17=$ofs;
      var $18=$17 & 32768;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $21=$ofs;
      var $22=(($21-65536)|0);
      $ofs=$22;
      __label__ = 4; break;
    case 4: 
      var $24=$3;
      var $25=(($24+4)|0);
      var $26=(($25+100)|0);
      var $27=HEAP[$26];
      var $28=$ofs;
      var $29=(($28+$27)|0);
      $ofs=$29;
      var $30=$ofs;
      var $31=$30 & 65535;
      $ofs=$31;
      var $32=$3;
      var $33=$ofs;
      var $34=_softx86_set_near_instruction_ptr($32, $33);
      $1=1;
      __label__ = 14; break;
    case 5: 
      var $36=$2;
      var $37=(($36)&255);
      var $38=(($37)|0)==234;
      if ($38) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $40=$3;
      var $41=_softx86_fetch_exec_byte($40);
      var $42=(($41)&255);
      $ofs1=$42;
      var $43=$3;
      var $44=_softx86_fetch_exec_byte($43);
      var $45=(($44)&255);
      var $46=(($45)&65535);
      var $47=$46 << 8;
      var $48=$ofs1;
      var $49=(($48)&65535);
      var $50=$49 | $47;
      var $51=(($50) & 65535);
      $ofs1=$51;
      var $52=$3;
      var $53=_softx86_fetch_exec_byte($52);
      var $54=(($53)&255);
      $seg=$54;
      var $55=$3;
      var $56=_softx86_fetch_exec_byte($55);
      var $57=(($56)&255);
      var $58=(($57)&65535);
      var $59=$58 << 8;
      var $60=$seg;
      var $61=(($60)&65535);
      var $62=$61 | $59;
      var $63=(($62) & 65535);
      $seg=$63;
      var $64=$3;
      var $65=$seg;
      var $66=(($65)&65535);
      var $67=$ofs1;
      var $68=(($67)&65535);
      var $69=_softx86_set_instruction_ptr($64, $66, $68);
      $1=1;
      __label__ = 14; break;
    case 7: 
      var $71=$2;
      var $72=(($71)&255);
      var $73=(($72)|0)==235;
      if ($73) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $75=$3;
      var $76=_softx86_fetch_exec_byte($75);
      var $77=(($76)&255);
      $ofs2=$77;
      var $78=$ofs2;
      var $79=$78 & 128;
      var $80=(($79)|0)!=0;
      if ($80) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $82=$ofs2;
      var $83=(($82-256)|0);
      $ofs2=$83;
      __label__ = 10; break;
    case 10: 
      var $85=$3;
      var $86=(($85+4)|0);
      var $87=(($86+100)|0);
      var $88=HEAP[$87];
      var $89=$ofs2;
      var $90=(($89+$88)|0);
      $ofs2=$90;
      var $91=$ofs2;
      var $92=$91 & 65535;
      $ofs2=$92;
      var $93=$3;
      var $94=$ofs2;
      var $95=_softx86_set_near_instruction_ptr($93, $94);
      $1=1;
      __label__ = 14; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      $1=0;
      __label__ = 14; break;
    case 14: 
      var $100=$1;
      ;
      return $100;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_jmp["X"]=1;

function _Sfx86OpcodeDec_jmp($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ofs;
      var $seg;
      var $ofs1;
      var $ofs2;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==233;
      if ($7) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $9=$3;
      var $10=_softx86_fetch_dec_byte($9);
      var $11=(($10)&255);
      $ofs=$11;
      var $12=$3;
      var $13=_softx86_fetch_dec_byte($12);
      var $14=(($13)&255);
      var $15=$14 << 8;
      var $16=$ofs;
      var $17=$16 | $15;
      $ofs=$17;
      var $18=$ofs;
      var $19=$18 & 32768;
      var $20=(($19)|0)!=0;
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $22=$ofs;
      var $23=(($22-65536)|0);
      $ofs=$23;
      __label__ = 4; break;
    case 4: 
      var $25=$3;
      var $26=(($25+4)|0);
      var $27=(($26+116)|0);
      var $28=HEAP[$27];
      var $29=$ofs;
      var $30=(($29+$28)|0);
      $ofs=$30;
      var $31=$ofs;
      var $32=$31 & 65535;
      $ofs=$32;
      var $33=$4;
      var $34=$ofs;
      var $35=_sprintf($33, ((STRING_TABLE.__str19514)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$34,tempInt));
      $1=1;
      __label__ = 14; break;
    case 5: 
      var $37=$2;
      var $38=(($37)&255);
      var $39=(($38)|0)==234;
      if ($39) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $41=$3;
      var $42=_softx86_fetch_dec_byte($41);
      var $43=(($42)&255);
      $ofs1=$43;
      var $44=$3;
      var $45=_softx86_fetch_dec_byte($44);
      var $46=(($45)&255);
      var $47=(($46)&65535);
      var $48=$47 << 8;
      var $49=$ofs1;
      var $50=(($49)&65535);
      var $51=$50 | $48;
      var $52=(($51) & 65535);
      $ofs1=$52;
      var $53=$3;
      var $54=_softx86_fetch_dec_byte($53);
      var $55=(($54)&255);
      $seg=$55;
      var $56=$3;
      var $57=_softx86_fetch_dec_byte($56);
      var $58=(($57)&255);
      var $59=(($58)&65535);
      var $60=$59 << 8;
      var $61=$seg;
      var $62=(($61)&65535);
      var $63=$62 | $60;
      var $64=(($63) & 65535);
      $seg=$64;
      var $65=$4;
      var $66=$seg;
      var $67=(($66)&65535);
      var $68=$ofs1;
      var $69=(($68)&65535);
      var $70=_sprintf($65, ((STRING_TABLE.__str20515)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$67,HEAP[tempInt+4]=$69,tempInt));
      $1=1;
      __label__ = 14; break;
    case 7: 
      var $72=$2;
      var $73=(($72)&255);
      var $74=(($73)|0)==235;
      if ($74) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $76=$3;
      var $77=_softx86_fetch_dec_byte($76);
      var $78=(($77)&255);
      $ofs2=$78;
      var $79=$ofs2;
      var $80=$79 & 128;
      var $81=(($80)|0)!=0;
      if ($81) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $83=$ofs2;
      var $84=(($83-256)|0);
      $ofs2=$84;
      __label__ = 10; break;
    case 10: 
      var $86=$3;
      var $87=(($86+4)|0);
      var $88=(($87+116)|0);
      var $89=HEAP[$88];
      var $90=$ofs2;
      var $91=(($90+$89)|0);
      $ofs2=$91;
      var $92=$ofs2;
      var $93=$92 & 65535;
      $ofs2=$93;
      var $94=$4;
      var $95=$ofs2;
      var $96=_sprintf($94, ((STRING_TABLE.__str19514)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$95,tempInt));
      $1=1;
      __label__ = 14; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      $1=0;
      __label__ = 14; break;
    case 14: 
      var $101=$1;
      ;
      return $101;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_jmp["X"]=1;

function _Sfx86OpcodeExec_loop($opcode, $ctx) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $tf;
      var $rel;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=(($5)|0) < 224;
      if ($6) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $8=$2;
      var $9=(($8)&255);
      var $10=(($9)|0) > 226;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 22; break;
    case 4: 
      var $13=$3;
      var $14=_softx86_fetch_exec_byte($13);
      var $15=(($14)&255);
      $rel=$15;
      var $16=$rel;
      var $17=$16 & 128;
      var $18=(($17)|0)!=0;
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $20=$rel;
      var $21=$20 | -256;
      $rel=$21;
      __label__ = 6; break;
    case 6: 
      var $23=$3;
      var $24=(($23+4)|0);
      var $25=(($24+100)|0);
      var $26=HEAP[$25];
      var $27=$rel;
      var $28=(($27+$26)|0);
      $rel=$28;
      var $29=$rel;
      var $30=$29 & 65535;
      $rel=$30;
      var $31=$3;
      var $32=(($31+4)|0);
      var $33=(($32)|0);
      var $34=(($33+4)|0);
      var $35=$34;
      var $36=(($35)|0);
      var $37=HEAP[$36];
      var $38=(($37-1)&65535);
      HEAP[$36]=$38;
      var $39=$2;
      var $40=(($39)&255);
      var $41=(($40)|0)==226;
      if ($41) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $43=$3;
      var $44=(($43+4)|0);
      var $45=(($44)|0);
      var $46=(($45+4)|0);
      var $47=$46;
      var $48=(($47)|0);
      var $49=HEAP[$48];
      var $50=(($49)&65535);
      var $51=(($50)|0)!=0;
      var $52=(($51)&1);
      $tf=$52;
      __label__ = 19; break;
    case 8: 
      var $54=$2;
      var $55=(($54)&255);
      var $56=(($55)|0)==225;
      if ($56) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $58=$3;
      var $59=(($58+4)|0);
      var $60=(($59+96)|0);
      var $61=$60;
      var $62=HEAP[$61];
      var $63=$62 & 64;
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 10; break; } else { var $76 = 0;__label__ = 11; break; }
    case 10: 
      var $66=$3;
      var $67=(($66+4)|0);
      var $68=(($67)|0);
      var $69=(($68+4)|0);
      var $70=$69;
      var $71=(($70)|0);
      var $72=HEAP[$71];
      var $73=(($72)&65535);
      var $74=(($73)|0)!=0;
      var $76 = $74;__label__ = 11; break;
    case 11: 
      var $76;
      var $77=(($76)&1);
      $tf=$77;
      __label__ = 18; break;
    case 12: 
      var $79=$2;
      var $80=(($79)&255);
      var $81=(($80)|0)==224;
      if ($81) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $83=$3;
      var $84=(($83+4)|0);
      var $85=(($84+96)|0);
      var $86=$85;
      var $87=HEAP[$86];
      var $88=$87 & 64;
      var $89=(($88)|0)==0;
      if ($89) { __label__ = 14; break; } else { var $101 = 0;__label__ = 15; break; }
    case 14: 
      var $91=$3;
      var $92=(($91+4)|0);
      var $93=(($92)|0);
      var $94=(($93+4)|0);
      var $95=$94;
      var $96=(($95)|0);
      var $97=HEAP[$96];
      var $98=(($97)&65535);
      var $99=(($98)|0)!=0;
      var $101 = $99;__label__ = 15; break;
    case 15: 
      var $101;
      var $102=(($101)&1);
      $tf=$102;
      __label__ = 17; break;
    case 16: 
      $1=0;
      __label__ = 22; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $107=$tf;
      var $108=(($107)|0)!=0;
      if ($108) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $110=$3;
      var $111=$3;
      var $112=(($111+4)|0);
      var $113=(($112+32)|0);
      var $114=(($113+8)|0);
      var $115=(($114)|0);
      var $116=HEAP[$115];
      var $117=(($116)&65535);
      var $118=$rel;
      var $119=_softx86_set_instruction_ptr($110, $117, $118);
      __label__ = 21; break;
    case 21: 
      $1=1;
      __label__ = 22; break;
    case 22: 
      var $122=$1;
      ;
      return $122;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_loop["X"]=1;

function _Sfx86OpcodeDec_loop($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $rel;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$3;
      var $6=_softx86_fetch_dec_byte($5);
      var $7=(($6)&255);
      $rel=$7;
      var $8=$rel;
      var $9=$8 & 128;
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $12=$rel;
      var $13=$12 | -256;
      $rel=$13;
      __label__ = 3; break;
    case 3: 
      var $15=$3;
      var $16=(($15+4)|0);
      var $17=(($16+116)|0);
      var $18=HEAP[$17];
      var $19=$rel;
      var $20=(($19+$18)|0);
      $rel=$20;
      var $21=$rel;
      var $22=$21 & 65535;
      $rel=$22;
      var $23=$2;
      var $24=(($23)&255);
      var $25=(($24)|0)==226;
      if ($25) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $27=$4;
      var $28=$rel;
      var $29=_sprintf($27, ((STRING_TABLE.__str21516)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$28,tempInt));
      __label__ = 12; break;
    case 5: 
      var $31=$2;
      var $32=(($31)&255);
      var $33=(($32)|0)==225;
      if ($33) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $35=$4;
      var $36=$rel;
      var $37=_sprintf($35, ((STRING_TABLE.__str22517)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$36,tempInt));
      __label__ = 11; break;
    case 7: 
      var $39=$2;
      var $40=(($39)&255);
      var $41=(($40)|0)==224;
      if ($41) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $43=$4;
      var $44=$rel;
      var $45=_sprintf($43, ((STRING_TABLE.__str23518)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP[tempInt]=$44,tempInt));
      __label__ = 10; break;
    case 9: 
      $1=0;
      __label__ = 13; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      $1=1;
      __label__ = 13; break;
    case 13: 
      var $51=$1;
      ;
      return $51;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_loop["X"]=1;

function _Sfx86OpcodeExec_shovel($opcode, $ctx) {
  var __stackBase__  = STACKTOP; STACKTOP += 6; assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $sz;
      var $ecx_terminal;
      var $zflag_terminal;
      var $inc_esi;
      var $inc_edi;
      var $sto_edi;
      var $get_edi;
      var $df;
      var $si;
      var $di;
      var $addr;
      var $tmp8=__stackBase__;
      var $tmp16=__stackBase__+1;
      var $tmp8dst=__stackBase__+3;
      var $tmp16dst=__stackBase__+4;
      var $seg;
      $2=$opcode;
      $3=$ctx;
      var $4=$2;
      var $5=(($4)&255);
      var $6=$5 & 254;
      var $7=(($6)|0)==164;
      if ($7) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)&255);
      var $11=$10 & 1;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $sz=2;
      __label__ = 5; break;
    case 4: 
      $sz=1;
      __label__ = 5; break;
    case 5: 
      $inc_esi=1;
      $inc_edi=1;
      $sto_edi=1;
      $get_edi=0;
      __label__ = 31; break;
    case 6: 
      var $17=$2;
      var $18=(($17)&255);
      var $19=$18 & 254;
      var $20=(($19)|0)==166;
      if ($20) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $22=$2;
      var $23=(($22)&255);
      var $24=$23 & 1;
      var $25=(($24)|0)!=0;
      if ($25) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $sz=2;
      __label__ = 10; break;
    case 9: 
      $sz=1;
      __label__ = 10; break;
    case 10: 
      $inc_esi=1;
      $inc_edi=1;
      $sto_edi=0;
      $get_edi=1;
      __label__ = 30; break;
    case 11: 
      var $30=$2;
      var $31=(($30)&255);
      var $32=$31 & 254;
      var $33=(($32)|0)==170;
      if ($33) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $35=$2;
      var $36=(($35)&255);
      var $37=$36 & 1;
      var $38=(($37)|0)!=0;
      if ($38) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $sz=2;
      __label__ = 15; break;
    case 14: 
      $sz=1;
      __label__ = 15; break;
    case 15: 
      $inc_esi=0;
      $inc_edi=1;
      $sto_edi=1;
      $get_edi=0;
      __label__ = 29; break;
    case 16: 
      var $43=$2;
      var $44=(($43)&255);
      var $45=$44 & 254;
      var $46=(($45)|0)==172;
      if ($46) { __label__ = 17; break; } else { __label__ = 21; break; }
    case 17: 
      var $48=$2;
      var $49=(($48)&255);
      var $50=$49 & 1;
      var $51=(($50)|0)!=0;
      if ($51) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $sz=2;
      __label__ = 20; break;
    case 19: 
      $sz=1;
      __label__ = 20; break;
    case 20: 
      $inc_esi=1;
      $inc_edi=0;
      $sto_edi=0;
      $get_edi=0;
      __label__ = 28; break;
    case 21: 
      var $56=$2;
      var $57=(($56)&255);
      var $58=$57 & 254;
      var $59=(($58)|0)==174;
      if ($59) { __label__ = 22; break; } else { __label__ = 26; break; }
    case 22: 
      var $61=$2;
      var $62=(($61)&255);
      var $63=$62 & 1;
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      $sz=2;
      __label__ = 25; break;
    case 24: 
      $sz=1;
      __label__ = 25; break;
    case 25: 
      $inc_esi=0;
      $inc_edi=1;
      $sto_edi=0;
      $get_edi=1;
      __label__ = 27; break;
    case 26: 
      $1=0;
      __label__ = 150; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $74=$3;
      var $75=(($74+4)|0);
      var $76=(($75)|0);
      var $77=(($76+24)|0);
      var $78=$77;
      var $79=(($78)|0);
      var $80=HEAP[$79];
      var $81=(($80)&65535);
      $si=$81;
      var $82=$3;
      var $83=(($82+4)|0);
      var $84=(($83)|0);
      var $85=(($84+28)|0);
      var $86=$85;
      var $87=(($86)|0);
      var $88=HEAP[$87];
      var $89=(($88)&65535);
      $di=$89;
      var $90=$3;
      var $91=(($90+240)|0);
      var $92=HEAP[$91];
      var $93=(($92)&255);
      var $94=(($93)|0) > 0;
      if ($94) { __label__ = 32; break; } else { __label__ = 42; break; }
    case 32: 
      var $96=$3;
      var $97=(($96+4)|0);
      var $98=(($97)|0);
      var $99=(($98+4)|0);
      var $100=$99;
      var $101=(($100)|0);
      var $102=HEAP[$101];
      var $103=(($102)&65535);
      var $104=(($103)|0)==0;
      var $105=(($104)&1);
      $ecx_terminal=$105;
      var $106=$2;
      var $107=(($106)&255);
      var $108=$107 & 254;
      var $109=(($108)|0)==164;
      if ($109) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      $zflag_terminal=0;
      __label__ = 41; break;
    case 34: 
      var $112=$2;
      var $113=(($112)&255);
      var $114=$113 & 254;
      var $115=(($114)|0)==170;
      if ($115) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      $zflag_terminal=0;
      __label__ = 40; break;
    case 36: 
      var $118=$2;
      var $119=(($118)&255);
      var $120=$119 & 254;
      var $121=(($120)|0)==172;
      if ($121) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      $zflag_terminal=0;
      __label__ = 39; break;
    case 38: 
      $zflag_terminal=0;
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      __label__ = 43; break;
    case 42: 
      $ecx_terminal=0;
      $zflag_terminal=0;
      __label__ = 43; break;
    case 43: 
      var $129=$ecx_terminal;
      var $130=(($129)|0)!=0;
      if ($130) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      $1=1;
      __label__ = 150; break;
    case 45: 
      var $133=$zflag_terminal;
      var $134=(($133)|0)!=0;
      if ($134) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      $1=1;
      __label__ = 150; break;
    case 47: 
      var $137=$3;
      var $138=(($137+4)|0);
      var $139=(($138+96)|0);
      var $140=$139;
      var $141=HEAP[$140];
      var $142=$141 & 1024;
      $df=$142;
      var $143=$inc_esi;
      var $144=(($143)|0)!=0;
      if ($144) { __label__ = 48; break; } else { __label__ = 63; break; }
    case 48: 
      var $146=$3;
      var $147=(($146+236)|0);
      var $148=HEAP[$147];
      var $149=(($148 << 24) >> 24)!=0;
      if ($149) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $151=$3;
      var $152=(($151+238)|0);
      var $153=HEAP[$152];
      $seg=$153;
      __label__ = 51; break;
    case 50: 
      var $155=$3;
      var $156=(($155+4)|0);
      var $157=(($156+32)|0);
      var $158=(($157+24)|0);
      var $159=(($158)|0);
      var $160=HEAP[$159];
      $seg=$160;
      __label__ = 51; break;
    case 51: 
      var $162=$seg;
      var $163=(($162)&65535);
      var $164=$163 << 4;
      var $165=$si;
      var $166=(($164+$165)|0);
      $addr=$166;
      var $167=$sz;
      var $168=(($167)|0)==2;
      if ($168) { __label__ = 52; break; } else { __label__ = 56; break; }
    case 52: 
      HEAP[$tmp16]=0;
      var $170=$3;
      var $171=$addr;
      var $172=$tmp16;
      var $173=_softx86_fetch($170, 0, $171, $172, 2);
      var $174=$df;
      var $175=(($174)|0)!=0;
      if ($175) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $177=$si;
      var $178=(($177-2)|0);
      $si=$178;
      __label__ = 55; break;
    case 54: 
      var $180=$si;
      var $181=(($180+2)|0);
      $si=$181;
      __label__ = 55; break;
    case 55: 
      __label__ = 62; break;
    case 56: 
      var $184=$sz;
      var $185=(($184)|0)==1;
      if ($185) { __label__ = 57; break; } else { __label__ = 61; break; }
    case 57: 
      HEAP[$tmp8]=0;
      var $187=$3;
      var $188=$addr;
      var $189=_softx86_fetch($187, 0, $188, $tmp8, 1);
      var $190=$df;
      var $191=(($190)|0)!=0;
      if ($191) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $193=$si;
      var $194=(($193-1)|0);
      $si=$194;
      __label__ = 60; break;
    case 59: 
      var $196=$si;
      var $197=(($196+1)|0);
      $si=$197;
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      var $202=$2;
      var $203=(($202)&255);
      var $204=$203 & 254;
      var $205=(($204)|0)==164;
      if ($205) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $207=HEAP[$tmp16];
      HEAP[$tmp16dst]=$207;
      var $208=HEAP[$tmp8];
      HEAP[$tmp8dst]=$208;
      __label__ = 77; break;
    case 65: 
      var $210=$2;
      var $211=(($210)&255);
      var $212=(($211)|0)==172;
      if ($212) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $214=HEAP[$tmp8];
      var $215=$3;
      var $216=(($215+4)|0);
      var $217=(($216)|0);
      var $218=(($217)|0);
      var $219=$218;
      var $220=(($219)|0);
      HEAP[$220]=$214;
      __label__ = 76; break;
    case 67: 
      var $222=$2;
      var $223=(($222)&255);
      var $224=(($223)|0)==173;
      if ($224) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $226=HEAP[$tmp16];
      var $227=$3;
      var $228=(($227+4)|0);
      var $229=(($228)|0);
      var $230=(($229)|0);
      var $231=$230;
      var $232=(($231)|0);
      HEAP[$232]=$226;
      __label__ = 75; break;
    case 69: 
      var $234=$2;
      var $235=(($234)&255);
      var $236=(($235)|0)==170;
      if ($236) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $238=$3;
      var $239=(($238+4)|0);
      var $240=(($239)|0);
      var $241=(($240)|0);
      var $242=$241;
      var $243=(($242)|0);
      var $244=HEAP[$243];
      HEAP[$tmp8dst]=$244;
      __label__ = 74; break;
    case 71: 
      var $246=$2;
      var $247=(($246)&255);
      var $248=(($247)|0)==171;
      if ($248) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      var $250=$3;
      var $251=(($250+4)|0);
      var $252=(($251)|0);
      var $253=(($252)|0);
      var $254=$253;
      var $255=(($254)|0);
      var $256=HEAP[$255];
      HEAP[$tmp16dst]=$256;
      __label__ = 73; break;
    case 73: 
      __label__ = 74; break;
    case 74: 
      __label__ = 75; break;
    case 75: 
      __label__ = 76; break;
    case 76: 
      __label__ = 77; break;
    case 77: 
      var $262=$inc_edi;
      var $263=(($262)|0)!=0;
      if ($263) { __label__ = 78; break; } else { __label__ = 110; break; }
    case 78: 
      var $265=$3;
      var $266=(($265+236)|0);
      var $267=HEAP[$266];
      var $268=(($267 << 24) >> 24)!=0;
      if ($268) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      var $270=$3;
      var $271=(($270+238)|0);
      var $272=HEAP[$271];
      $seg=$272;
      __label__ = 81; break;
    case 80: 
      var $274=$3;
      var $275=(($274+4)|0);
      var $276=(($275+32)|0);
      var $277=(($276)|0);
      var $278=(($277)|0);
      var $279=HEAP[$278];
      $seg=$279;
      __label__ = 81; break;
    case 81: 
      var $281=$seg;
      var $282=(($281)&65535);
      var $283=$282 << 4;
      var $284=$di;
      var $285=(($283+$284)|0);
      $addr=$285;
      var $286=$get_edi;
      var $287=(($286)|0)!=0;
      if ($287) { __label__ = 82; break; } else { __label__ = 88; break; }
    case 82: 
      var $289=$sz;
      var $290=(($289)|0)==2;
      if ($290) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      HEAP[$tmp16dst]=0;
      var $292=$3;
      var $293=$addr;
      var $294=$tmp16dst;
      var $295=_softx86_fetch($292, 0, $293, $294, 2);
      __label__ = 87; break;
    case 84: 
      var $297=$sz;
      var $298=(($297)|0)==1;
      if ($298) { __label__ = 85; break; } else { __label__ = 86; break; }
    case 85: 
      HEAP[$tmp8dst]=0;
      var $300=$3;
      var $301=$addr;
      var $302=_softx86_fetch($300, 0, $301, $tmp8dst, 1);
      __label__ = 86; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      __label__ = 96; break;
    case 88: 
      var $306=$sto_edi;
      var $307=(($306)|0)!=0;
      if ($307) { __label__ = 89; break; } else { __label__ = 95; break; }
    case 89: 
      var $309=$sz;
      var $310=(($309)|0)==2;
      if ($310) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: 
      var $312=$3;
      var $313=$addr;
      var $314=$tmp16dst;
      var $315=_softx86_write($312, 0, $313, $314, 2);
      __label__ = 94; break;
    case 91: 
      var $317=$sz;
      var $318=(($317)|0)==1;
      if ($318) { __label__ = 92; break; } else { __label__ = 93; break; }
    case 92: 
      var $320=$3;
      var $321=$addr;
      var $322=_softx86_write($320, 0, $321, $tmp8dst, 1);
      __label__ = 93; break;
    case 93: 
      __label__ = 94; break;
    case 94: 
      __label__ = 95; break;
    case 95: 
      __label__ = 96; break;
    case 96: 
      var $327=$df;
      var $328=(($327)|0)!=0;
      if ($328) { __label__ = 97; break; } else { __label__ = 103; break; }
    case 97: 
      var $330=$sz;
      var $331=(($330)|0)==2;
      if ($331) { __label__ = 98; break; } else { __label__ = 99; break; }
    case 98: 
      var $333=$di;
      var $334=(($333-2)|0);
      $di=$334;
      __label__ = 102; break;
    case 99: 
      var $336=$sz;
      var $337=(($336)|0)==1;
      if ($337) { __label__ = 100; break; } else { __label__ = 101; break; }
    case 100: 
      var $339=$di;
      var $340=(($339-1)|0);
      $di=$340;
      __label__ = 101; break;
    case 101: 
      __label__ = 102; break;
    case 102: 
      __label__ = 109; break;
    case 103: 
      var $344=$sz;
      var $345=(($344)|0)==2;
      if ($345) { __label__ = 104; break; } else { __label__ = 105; break; }
    case 104: 
      var $347=$di;
      var $348=(($347+2)|0);
      $di=$348;
      __label__ = 108; break;
    case 105: 
      var $350=$sz;
      var $351=(($350)|0)==1;
      if ($351) { __label__ = 106; break; } else { __label__ = 107; break; }
    case 106: 
      var $353=$di;
      var $354=(($353+1)|0);
      $di=$354;
      __label__ = 107; break;
    case 107: 
      __label__ = 108; break;
    case 108: 
      __label__ = 109; break;
    case 109: 
      __label__ = 110; break;
    case 110: 
      var $359=$2;
      var $360=(($359)&255);
      var $361=(($360)|0)==166;
      if ($361) { __label__ = 111; break; } else { __label__ = 117; break; }
    case 111: 
      var $363=$3;
      var $364=HEAP[$tmp8];
      var $365=HEAP[$tmp8dst];
      var $366=_op_sub8($363, $364, $365);
      var $367=$3;
      var $368=(($367+240)|0);
      var $369=HEAP[$368];
      var $370=(($369)&255);
      var $371=(($370)|0)==1;
      if ($371) { __label__ = 112; break; } else { __label__ = 113; break; }
    case 112: 
      var $373=$3;
      var $374=(($373+4)|0);
      var $375=(($374+96)|0);
      var $376=$375;
      var $377=HEAP[$376];
      var $378=$377 & 64;
      $zflag_terminal=$378;
      __label__ = 116; break;
    case 113: 
      var $380=$3;
      var $381=(($380+240)|0);
      var $382=HEAP[$381];
      var $383=(($382)&255);
      var $384=(($383)|0)==2;
      if ($384) { __label__ = 114; break; } else { __label__ = 115; break; }
    case 114: 
      var $386=$3;
      var $387=(($386+4)|0);
      var $388=(($387+96)|0);
      var $389=$388;
      var $390=HEAP[$389];
      var $391=$390 & 64;
      var $392=(($391)|0)!=0;
      var $393=$392 ^ 1;
      var $394=(($393)&1);
      $zflag_terminal=$394;
      __label__ = 115; break;
    case 115: 
      __label__ = 116; break;
    case 116: 
      __label__ = 141; break;
    case 117: 
      var $398=$2;
      var $399=(($398)&255);
      var $400=(($399)|0)==167;
      if ($400) { __label__ = 118; break; } else { __label__ = 124; break; }
    case 118: 
      var $402=$3;
      var $403=HEAP[$tmp16];
      var $404=HEAP[$tmp16dst];
      var $405=_op_sub16($402, $403, $404);
      var $406=$3;
      var $407=(($406+240)|0);
      var $408=HEAP[$407];
      var $409=(($408)&255);
      var $410=(($409)|0)==1;
      if ($410) { __label__ = 119; break; } else { __label__ = 120; break; }
    case 119: 
      var $412=$3;
      var $413=(($412+4)|0);
      var $414=(($413+96)|0);
      var $415=$414;
      var $416=HEAP[$415];
      var $417=$416 & 64;
      $zflag_terminal=$417;
      __label__ = 123; break;
    case 120: 
      var $419=$3;
      var $420=(($419+240)|0);
      var $421=HEAP[$420];
      var $422=(($421)&255);
      var $423=(($422)|0)==2;
      if ($423) { __label__ = 121; break; } else { __label__ = 122; break; }
    case 121: 
      var $425=$3;
      var $426=(($425+4)|0);
      var $427=(($426+96)|0);
      var $428=$427;
      var $429=HEAP[$428];
      var $430=$429 & 64;
      var $431=(($430)|0)!=0;
      var $432=$431 ^ 1;
      var $433=(($432)&1);
      $zflag_terminal=$433;
      __label__ = 122; break;
    case 122: 
      __label__ = 123; break;
    case 123: 
      __label__ = 140; break;
    case 124: 
      var $437=$2;
      var $438=(($437)&255);
      var $439=(($438)|0)==174;
      if ($439) { __label__ = 125; break; } else { __label__ = 131; break; }
    case 125: 
      var $441=$3;
      var $442=$3;
      var $443=(($442+4)|0);
      var $444=(($443)|0);
      var $445=(($444)|0);
      var $446=$445;
      var $447=(($446)|0);
      var $448=HEAP[$447];
      var $449=HEAP[$tmp8dst];
      var $450=_op_sub8($441, $448, $449);
      var $451=$3;
      var $452=(($451+240)|0);
      var $453=HEAP[$452];
      var $454=(($453)&255);
      var $455=(($454)|0)==1;
      if ($455) { __label__ = 126; break; } else { __label__ = 127; break; }
    case 126: 
      var $457=$3;
      var $458=(($457+4)|0);
      var $459=(($458+96)|0);
      var $460=$459;
      var $461=HEAP[$460];
      var $462=$461 & 64;
      $zflag_terminal=$462;
      __label__ = 130; break;
    case 127: 
      var $464=$3;
      var $465=(($464+240)|0);
      var $466=HEAP[$465];
      var $467=(($466)&255);
      var $468=(($467)|0)==2;
      if ($468) { __label__ = 128; break; } else { __label__ = 129; break; }
    case 128: 
      var $470=$3;
      var $471=(($470+4)|0);
      var $472=(($471+96)|0);
      var $473=$472;
      var $474=HEAP[$473];
      var $475=$474 & 64;
      var $476=(($475)|0)!=0;
      var $477=$476 ^ 1;
      var $478=(($477)&1);
      $zflag_terminal=$478;
      __label__ = 129; break;
    case 129: 
      __label__ = 130; break;
    case 130: 
      __label__ = 139; break;
    case 131: 
      var $482=$2;
      var $483=(($482)&255);
      var $484=(($483)|0)==175;
      if ($484) { __label__ = 132; break; } else { __label__ = 138; break; }
    case 132: 
      var $486=$3;
      var $487=$3;
      var $488=(($487+4)|0);
      var $489=(($488)|0);
      var $490=(($489)|0);
      var $491=$490;
      var $492=(($491)|0);
      var $493=HEAP[$492];
      var $494=HEAP[$tmp16dst];
      var $495=_op_sub16($486, $493, $494);
      var $496=$3;
      var $497=(($496+240)|0);
      var $498=HEAP[$497];
      var $499=(($498)&255);
      var $500=(($499)|0)==1;
      if ($500) { __label__ = 133; break; } else { __label__ = 134; break; }
    case 133: 
      var $502=$3;
      var $503=(($502+4)|0);
      var $504=(($503+96)|0);
      var $505=$504;
      var $506=HEAP[$505];
      var $507=$506 & 64;
      $zflag_terminal=$507;
      __label__ = 137; break;
    case 134: 
      var $509=$3;
      var $510=(($509+240)|0);
      var $511=HEAP[$510];
      var $512=(($511)&255);
      var $513=(($512)|0)==2;
      if ($513) { __label__ = 135; break; } else { __label__ = 136; break; }
    case 135: 
      var $515=$3;
      var $516=(($515+4)|0);
      var $517=(($516+96)|0);
      var $518=$517;
      var $519=HEAP[$518];
      var $520=$519 & 64;
      var $521=(($520)|0)!=0;
      var $522=$521 ^ 1;
      var $523=(($522)&1);
      $zflag_terminal=$523;
      __label__ = 136; break;
    case 136: 
      __label__ = 137; break;
    case 137: 
      __label__ = 138; break;
    case 138: 
      __label__ = 139; break;
    case 139: 
      __label__ = 140; break;
    case 140: 
      __label__ = 141; break;
    case 141: 
      var $530=$si;
      var $531=(($530) & 65535);
      var $532=$3;
      var $533=(($532+4)|0);
      var $534=(($533)|0);
      var $535=(($534+24)|0);
      var $536=$535;
      var $537=(($536)|0);
      HEAP[$537]=$531;
      var $538=$di;
      var $539=(($538) & 65535);
      var $540=$3;
      var $541=(($540+4)|0);
      var $542=(($541)|0);
      var $543=(($542+28)|0);
      var $544=$543;
      var $545=(($544)|0);
      HEAP[$545]=$539;
      var $546=$3;
      var $547=(($546+240)|0);
      var $548=HEAP[$547];
      var $549=(($548)&255);
      var $550=(($549)|0) > 0;
      if ($550) { __label__ = 142; break; } else { __label__ = 143; break; }
    case 142: 
      var $552=$3;
      var $553=(($552+4)|0);
      var $554=(($553)|0);
      var $555=(($554+4)|0);
      var $556=$555;
      var $557=(($556)|0);
      var $558=HEAP[$557];
      var $559=(($558-1)&65535);
      HEAP[$557]=$559;
      __label__ = 143; break;
    case 143: 
      var $561=$3;
      var $562=(($561+240)|0);
      var $563=HEAP[$562];
      var $564=(($563)&255);
      var $565=(($564)|0) > 0;
      if ($565) { __label__ = 144; break; } else { __label__ = 149; break; }
    case 144: 
      var $567=$3;
      var $568=(($567+4)|0);
      var $569=(($568)|0);
      var $570=(($569+4)|0);
      var $571=$570;
      var $572=(($571)|0);
      var $573=HEAP[$572];
      var $574=(($573)&65535);
      var $575=(($574)|0)==0;
      var $576=(($575)&1);
      $ecx_terminal=$576;
      var $577=$ecx_terminal;
      var $578=(($577)|0)!=0;
      if ($578) { __label__ = 145; break; } else { __label__ = 146; break; }
    case 145: 
      $1=1;
      __label__ = 150; break;
    case 146: 
      var $581=$zflag_terminal;
      var $582=(($581)|0)!=0;
      if ($582) { __label__ = 147; break; } else { __label__ = 148; break; }
    case 147: 
      $1=1;
      __label__ = 150; break;
    case 148: 
      $1=3;
      __label__ = 150; break;
    case 149: 
      $1=1;
      __label__ = 150; break;
    case 150: 
      var $587=$1;
      STACKTOP = __stackBase__;
      return $587;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeExec_shovel["X"]=1;

function _Sfx86OpcodeDec_shovel($opcode, $ctx, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$opcode;
      $3=$ctx;
      $4=$buf;
      var $5=$2;
      var $6=(($5)&255);
      var $7=(($6)|0)==164;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$4;
      var $10=_strcpy($9, ((STRING_TABLE.__str535)|0));
      $1=1;
      __label__ = 22; break;
    case 3: 
      var $12=$2;
      var $13=(($12)&255);
      var $14=(($13)|0)==165;
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$4;
      var $17=_strcpy($16, ((STRING_TABLE.__str1536)|0));
      $1=1;
      __label__ = 22; break;
    case 5: 
      var $19=$2;
      var $20=(($19)&255);
      var $21=(($20)|0)==166;
      if ($21) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $23=$4;
      var $24=_strcpy($23, ((STRING_TABLE.__str2537)|0));
      $1=1;
      __label__ = 22; break;
    case 7: 
      var $26=$2;
      var $27=(($26)&255);
      var $28=(($27)|0)==167;
      if ($28) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $30=$4;
      var $31=_strcpy($30, ((STRING_TABLE.__str3538)|0));
      $1=1;
      __label__ = 22; break;
    case 9: 
      var $33=$2;
      var $34=(($33)&255);
      var $35=(($34)|0)==170;
      if ($35) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $37=$4;
      var $38=_strcpy($37, ((STRING_TABLE.__str4539)|0));
      $1=1;
      __label__ = 22; break;
    case 11: 
      var $40=$2;
      var $41=(($40)&255);
      var $42=(($41)|0)==171;
      if ($42) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $44=$4;
      var $45=_strcpy($44, ((STRING_TABLE.__str5540)|0));
      $1=1;
      __label__ = 22; break;
    case 13: 
      var $47=$2;
      var $48=(($47)&255);
      var $49=(($48)|0)==172;
      if ($49) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $51=$4;
      var $52=_strcpy($51, ((STRING_TABLE.__str6541)|0));
      $1=1;
      __label__ = 22; break;
    case 15: 
      var $54=$2;
      var $55=(($54)&255);
      var $56=(($55)|0)==173;
      if ($56) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $58=$4;
      var $59=_strcpy($58, ((STRING_TABLE.__str7542)|0));
      $1=1;
      __label__ = 22; break;
    case 17: 
      var $61=$2;
      var $62=(($61)&255);
      var $63=(($62)|0)==174;
      if ($63) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $65=$4;
      var $66=_strcpy($65, ((STRING_TABLE.__str8543)|0));
      $1=1;
      __label__ = 22; break;
    case 19: 
      var $68=$2;
      var $69=(($68)&255);
      var $70=(($69)|0)==175;
      if ($70) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $72=$4;
      var $73=_strcpy($72, ((STRING_TABLE.__str9544)|0));
      $1=1;
      __label__ = 22; break;
    case 21: 
      $1=0;
      __label__ = 22; break;
    case 22: 
      var $76=$1;
      ;
      return $76;
    default: assert(0, "bad label: " + __label__);
  }
}
_Sfx86OpcodeDec_shovel["X"]=1;

function _Sfx86OpcodeExec_fpuhandoff($opcode, $ctx) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$opcode;
  $2=$ctx;
  var $3=$2;
  var $4=(($3+128)|0);
  var $5=(($4+44)|0);
  var $6=HEAP[$5];
  var $7=$2;
  var $8=$7;
  var $9=$2;
  var $10=(($9+244)|0);
  var $11=HEAP[$10];
  var $12=$1;
  var $13=FUNCTION_TABLE[$6]($8, $11, $12);
  ;
  return $13;
}


function _Sfx86OpcodeDec_fpuhandoff($opcode, $ctx, $buf) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$opcode;
  $2=$ctx;
  $3=$buf;
  var $4=$2;
  var $5=(($4+128)|0);
  var $6=(($5+48)|0);
  var $7=HEAP[$6];
  var $8=$2;
  var $9=$8;
  var $10=$2;
  var $11=(($10+244)|0);
  var $12=HEAP[$11];
  var $13=$1;
  var $14=$3;
  var $15=FUNCTION_TABLE[$7]($9, $12, $13, $14);
  ;
  return $15;
}


  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP[pdest+i]=HEAP[psrc+i];
        i ++;
      } while (HEAP[psrc+i-1] != 0);
      return pdest;
    }

  
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAP[varargs+argIndex];
        } else if (type == 'i64') {
          ret = HEAP[varargs+argIndex];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP[varargs+argIndex];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP[textIndex];
        if (curr === 0) break;
        next = HEAP[textIndex+1];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP[textIndex+1];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP[textIndex+1];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP[textIndex+1];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP[textIndex+1];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP[textIndex+1];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP[textIndex+1];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP[textIndex+2];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP[textIndex+2];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP[textIndex+1];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var argText;
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*');
            var copiedString;
            if (arg) {
              copiedString = String_copy(arg);
              if (precisionSet && copiedString.length > precision) {
                copiedString = copiedString.slice(0, precision);
              }
            } else {
              copiedString = intArrayFromString('(null)', true);
            }
            if (!flagLeftAlign) {
              while (copiedString.length < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            ret = ret.concat(copiedString);
            if (flagLeftAlign) {
              while (copiedString.length < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP[ptr]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP[i]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, n - 1);
      for (var i = 0; i < limit; i++) {
        HEAP[s+i]=result[i];
      }
      HEAP[s+i]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _strlen(ptr) {
      return String_len(ptr);
    }

  
  function _memset(ptr, value, num, align) {
      for (var $$dest = ptr, $$stop = $$dest + num; $$dest < $$stop; $$dest++) {
  HEAP[$$dest]=value
  };
    }var _llvm_memset_p0i8_i32=_memset;

  function _memcpy(dest, src, num, align) {
      assert(num % 1 === 0, 'memcpy given ' + num + ' bytes to copy. Problem with quantum=1 corrections perhaps?');
      for (var $$src = src, $$dest = dest, $$stop = $$src + num; $$src < $$stop; $$src++, $$dest++) {
  HEAP[$$dest]=HEAP[$$src] };
    }


  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      ptr = Runtime.staticAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;

  function _free(){}
  Module["_free"] = _free;

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);

  return _main(argc, argv, 0);
}












































var _sx86_regs8;








var _sx86_regs16;








var _sx86_regs32;




var _sx86_regsaddr16_16;








var _sx86_segregs;

var _optab8086;
var _op1_tmp;
var _op2_tmp;






















































































































































STRING_TABLE.__str=allocate([68,65,65,0] /* DAA\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1=allocate([68,65,83,0] /* DAS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2=allocate([65,65,65,0] /* AAA\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3=allocate([65,65,83,0] /* AAS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4=allocate([65,65,77,0] /* AAM\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5=allocate([65,65,77,32,37,100,0] /* AAM %d\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6=allocate([65,65,68,0] /* AAD\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7=allocate([65,65,68,32,37,100,0] /* AAD %d\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8=allocate([65,68,68,32,37,115,44,37,115,0] /* ADD %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19=allocate([65,68,68,32,65,76,44,37,48,50,88,104,0] /* ADD AL,%02Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str210=allocate([65,68,68,32,65,88,44,37,48,52,88,104,0] /* ADD AX,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str311=allocate([65,68,67,32,37,115,44,37,115,0] /* ADC %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str412=allocate([65,68,67,32,65,76,44,37,48,50,88,104,0] /* ADC AL,%02Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str513=allocate([65,68,67,32,65,88,44,37,48,52,88,104,0] /* ADC AX,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str614=allocate([83,85,66,32,37,115,44,37,115,0] /* SUB %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str715=allocate([83,85,66,32,65,76,44,37,48,50,88,104,0] /* SUB AL,%02Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str816=allocate([83,85,66,32,65,88,44,37,48,52,88,104,0] /* SUB AX,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9=allocate([83,66,66,32,37,115,44,37,115,0] /* SBB %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10=allocate([83,66,66,32,65,76,44,37,48,50,88,104,0] /* SBB AL,%02Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11=allocate([83,66,66,32,65,88,44,37,48,52,88,104,0] /* SBB AX,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12=allocate([67,77,80,32,37,115,44,37,115,0] /* CMP %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13=allocate([67,77,80,32,65,76,44,37,48,50,88,104,0] /* CMP AL,%02Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14=allocate([67,77,80,32,65,88,44,37,48,52,88,104,0] /* CMP AX,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17=allocate([67,66,87,0] /* CBW\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str118=allocate([67,87,68,0] /* CWD\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20=allocate([67,77,67,0] /* CMC\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str121=allocate([67,76,67,0] /* CLC\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str222=allocate([83,84,67,0] /* STC\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str323=allocate([67,76,73,0] /* CLI\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str424=allocate([83,84,73,0] /* STI\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str525=allocate([67,76,68,0] /* CLD\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str626=allocate([83,84,68,0] /* STD\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27=allocate([87,65,73,84,0] /* WAIT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str128=allocate([72,76,84,0] /* HLT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29=allocate([65,76,0] /* AL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str130=allocate([67,76,0] /* CL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str231=allocate([68,76,0] /* DL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str332=allocate([66,76,0] /* BL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str433=allocate([65,72,0] /* AH\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str534=allocate([67,72,0] /* CH\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str635=allocate([68,72,0] /* DH\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str736=allocate([66,72,0] /* BH\00 */, "i8", ALLOC_STATIC);
_sx86_regs8=allocate(32, "*", ALLOC_STATIC);
STRING_TABLE.__str837=allocate([65,88,0] /* AX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str938=allocate([67,88,0] /* CX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1039=allocate([68,88,0] /* DX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1140=allocate([66,88,0] /* BX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1241=allocate([83,80,0] /* SP\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1342=allocate([66,80,0] /* BP\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1443=allocate([83,73,0] /* SI\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15=allocate([68,73,0] /* DI\00 */, "i8", ALLOC_STATIC);
_sx86_regs16=allocate(32, "*", ALLOC_STATIC);
STRING_TABLE.__str16=allocate([69,65,88,0] /* EAX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1744=allocate([69,67,88,0] /* ECX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18=allocate([69,68,88,0] /* EDX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1945=allocate([69,66,88,0] /* EBX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2046=allocate([69,83,80,0] /* ESP\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21=allocate([69,66,80,0] /* EBP\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22=allocate([69,83,73,0] /* ESI\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23=allocate([69,68,73,0] /* EDI\00 */, "i8", ALLOC_STATIC);
_sx86_regs32=allocate(32, "*", ALLOC_STATIC);
STRING_TABLE.__str24=allocate([66,88,43,83,73,0] /* BX+SI\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25=allocate([66,88,43,68,73,0] /* BX+DI\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26=allocate([66,80,43,83,73,0] /* BP+SI\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2747=allocate([66,80,43,68,73,0] /* BP+DI\00 */, "i8", ALLOC_STATIC);
_sx86_regsaddr16_16=allocate(32, "*", ALLOC_STATIC);
STRING_TABLE.__str28=allocate([69,83,0] /* ES\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2948=allocate([67,83,0] /* CS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30=allocate([83,83,0] /* SS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31=allocate([68,83,0] /* DS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32=allocate([63,52,0] /* ?4\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33=allocate([63,53,0] /* ?5\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34=allocate([63,54,0] /* ?6\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35=allocate([63,55,0] /* ?7\00 */, "i8", ALLOC_STATIC);
_sx86_segregs=allocate(32, "*", ALLOC_STATIC);
STRING_TABLE.__str36=allocate([78,79,80,0] /* NOP\00 */, "i8", ALLOC_STATIC);
_optab8086=allocate([292, 0, 0, 0, 294, 0, 0, 0, 292, 0, 0, 0, 294, 0, 0, 0, 292, 0, 0, 0, 294, 0, 0, 0, 292, 0, 0, 0, 294, 0, 0, 0, 292, 0, 0, 0, 294, 0, 0, 0, 292, 0, 0, 0, 294, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 304, 0, 0, 0, 306, 0, 0, 0, 304, 0, 0, 0, 306, 0, 0, 0, 304, 0, 0, 0, 306, 0, 0, 0, 304, 0, 0, 0, 306, 0, 0, 0, 304, 0, 0, 0, 306, 0, 0, 0, 304, 0, 0, 0, 306, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 308, 0, 0, 0, 310, 0, 0, 0, 308, 0, 0, 0, 310, 0, 0, 0, 308, 0, 0, 0, 310, 0, 0, 0, 308, 0, 0, 0, 310, 0, 0, 0, 308, 0, 0, 0, 310, 0, 0, 0, 308, 0, 0, 0, 310, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 312, 0, 0, 0, 314, 0, 0, 0, 312, 0, 0, 0, 314, 0, 0, 0, 312, 0, 0, 0, 314, 0, 0, 0, 312, 0, 0, 0, 314, 0, 0, 0, 312, 0, 0, 0, 314, 0, 0, 0, 312, 0, 0, 0, 314, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 316, 0, 0, 0, 318, 0, 0, 0, 316, 0, 0, 0, 318, 0, 0, 0, 316, 0, 0, 0, 318, 0, 0, 0, 316, 0, 0, 0, 318, 0, 0, 0, 316, 0, 0, 0, 318, 0, 0, 0, 316, 0, 0, 0, 318, 0, 0, 0, 320, 0, 0, 0, 322, 0, 0, 0, 324, 0, 0, 0, 326, 0, 0, 0, 328, 0, 0, 0, 330, 0, 0, 0, 328, 0, 0, 0, 330, 0, 0, 0, 328, 0, 0, 0, 330, 0, 0, 0, 328, 0, 0, 0, 330, 0, 0, 0, 328, 0, 0, 0, 330, 0, 0, 0, 328, 0, 0, 0, 330, 0, 0, 0, 320, 0, 0, 0, 322, 0, 0, 0, 324, 0, 0, 0, 326, 0, 0, 0, 332, 0, 0, 0, 334, 0, 0, 0, 332, 0, 0, 0, 334, 0, 0, 0, 332, 0, 0, 0, 334, 0, 0, 0, 332, 0, 0, 0, 334, 0, 0, 0, 332, 0, 0, 0, 334, 0, 0, 0, 332, 0, 0, 0, 334, 0, 0, 0, 320, 0, 0, 0, 322, 0, 0, 0, 324, 0, 0, 0, 326, 0, 0, 0, 336, 0, 0, 0, 338, 0, 0, 0, 336, 0, 0, 0, 338, 0, 0, 0, 336, 0, 0, 0, 338, 0, 0, 0, 336, 0, 0, 0, 338, 0, 0, 0, 336, 0, 0, 0, 338, 0, 0, 0, 336, 0, 0, 0, 338, 0, 0, 0, 320, 0, 0, 0, 322, 0, 0, 0, 324, 0, 0, 0, 326, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 344, 0, 0, 0, 346, 0, 0, 0, 348, 0, 0, 0, 350, 0, 0, 0, 352, 0, 0, 0, 354, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 364, 0, 0, 0, 366, 0, 0, 0, 364, 0, 0, 0, 366, 0, 0, 0, 364, 0, 0, 0, 366, 0, 0, 0, 364, 0, 0, 0, 366, 0, 0, 0, 368, 0, 0, 0, 370, 0, 0, 0, 368, 0, 0, 0, 370, 0, 0, 0, 372, 0, 0, 0, 374, 0, 0, 0, 372, 0, 0, 0, 374, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 380, 0, 0, 0, 382, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 384, 0, 0, 0, 386, 0, 0, 0, 388, 0, 0, 0, 390, 0, 0, 0, 372, 0, 0, 0, 374, 0, 0, 0, 372, 0, 0, 0, 374, 0, 0, 0, 372, 0, 0, 0, 374, 0, 0, 0, 372, 0, 0, 0, 374, 0, 0, 0, 372, 0, 0, 0, 374, 0, 0, 0, 372, 0, 0, 0, 374, 0, 0, 0, 372, 0, 0, 0, 374, 0, 0, 0, 392, 0, 0, 0, 394, 0, 0, 0, 392, 0, 0, 0, 394, 0, 0, 0, 396, 0, 0, 0, 398, 0, 0, 0, 400, 0, 0, 0, 402, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 404, 0, 0, 0, 406, 0, 0, 0, 404, 0, 0, 0, 406, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 408, 0, 0, 0, 410, 0, 0, 0, 408, 0, 0, 0, 410, 0, 0, 0, 408, 0, 0, 0, 410, 0, 0, 0, 408, 0, 0, 0, 410, 0, 0, 0, 368, 0, 0, 0, 370, 0, 0, 0, 368, 0, 0, 0, 370, 0, 0, 0, 408, 0, 0, 0, 410, 0, 0, 0, 408, 0, 0, 0, 410, 0, 0, 0, 408, 0, 0, 0, 410, 0, 0, 0, 408, 0, 0, 0, 410, 0, 0, 0, 408, 0, 0, 0, 410, 0, 0, 0, 408, 0, 0, 0, 410, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 412, 0, 0, 0, 414, 0, 0, 0, 412, 0, 0, 0, 414, 0, 0, 0, 416, 0, 0, 0, 418, 0, 0, 0, 416, 0, 0, 0, 418, 0, 0, 0, 420, 0, 0, 0, 422, 0, 0, 0, 420, 0, 0, 0, 422, 0, 0, 0, 424, 0, 0, 0, 426, 0, 0, 0, 424, 0, 0, 0, 426, 0, 0, 0, 428, 0, 0, 0, 430, 0, 0, 0, 428, 0, 0, 0, 430, 0, 0, 0, 416, 0, 0, 0, 418, 0, 0, 0, 416, 0, 0, 0, 418, 0, 0, 0, 432, 0, 0, 0, 434, 0, 0, 0, 432, 0, 0, 0, 434, 0, 0, 0, 432, 0, 0, 0, 434, 0, 0, 0, 416, 0, 0, 0, 418, 0, 0, 0, 436, 0, 0, 0, 438, 0, 0, 0, 436, 0, 0, 0, 438, 0, 0, 0, 436, 0, 0, 0, 438, 0, 0, 0, 436, 0, 0, 0, 438, 0, 0, 0, 324, 0, 0, 0, 326, 0, 0, 0, 324, 0, 0, 0, 326, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 440, 0, 0, 0, 442, 0, 0, 0, 444, 0, 0, 0, 446, 0, 0, 0, 444, 0, 0, 0, 446, 0, 0, 0, 444, 0, 0, 0, 446, 0, 0, 0, 444, 0, 0, 0, 446, 0, 0, 0, 444, 0, 0, 0, 446, 0, 0, 0, 444, 0, 0, 0, 446, 0, 0, 0, 444, 0, 0, 0, 446, 0, 0, 0, 444, 0, 0, 0, 446, 0, 0, 0, 448, 0, 0, 0, 450, 0, 0, 0, 448, 0, 0, 0, 450, 0, 0, 0, 448, 0, 0, 0, 450, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 452, 0, 0, 0, 454, 0, 0, 0, 452, 0, 0, 0, 454, 0, 0, 0, 452, 0, 0, 0, 454, 0, 0, 0, 452, 0, 0, 0, 454, 0, 0, 0, 396, 0, 0, 0, 398, 0, 0, 0, 456, 0, 0, 0, 458, 0, 0, 0, 456, 0, 0, 0, 458, 0, 0, 0, 456, 0, 0, 0, 458, 0, 0, 0, 452, 0, 0, 0, 454, 0, 0, 0, 452, 0, 0, 0, 454, 0, 0, 0, 452, 0, 0, 0, 454, 0, 0, 0, 452, 0, 0, 0, 454, 0, 0, 0, 460, 0, 0, 0, 462, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 464, 0, 0, 0, 466, 0, 0, 0, 464, 0, 0, 0, 466, 0, 0, 0, 400, 0, 0, 0, 402, 0, 0, 0, 468, 0, 0, 0, 470, 0, 0, 0, 472, 0, 0, 0, 474, 0, 0, 0, 472, 0, 0, 0, 474, 0, 0, 0, 468, 0, 0, 0, 470, 0, 0, 0, 468, 0, 0, 0, 470, 0, 0, 0, 468, 0, 0, 0, 470, 0, 0, 0, 468, 0, 0, 0, 470, 0, 0, 0, 468, 0, 0, 0, 470, 0, 0, 0, 468, 0, 0, 0, 470, 0, 0, 0, 476, 0, 0, 0, 478, 0, 0, 0, 476, 0, 0, 0, 478, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
_op1_tmp=allocate(32, "i8", ALLOC_STATIC);
_op2_tmp=allocate(32, "i8", ALLOC_STATIC);
STRING_TABLE.__str53=allocate([69,83,58,32,0] /* ES: \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str154=allocate([67,83,58,32,0] /* CS: \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str255=allocate([83,83,58,32,0] /* SS: \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str356=allocate([68,83,58,32,0] /* DS: \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str457=allocate([82,69,80,32,0] /* REP \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str558=allocate([82,69,80,78,90,32,0] /* REPNZ \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str659=allocate([76,79,67,75,32,0] /* LOCK \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str72=allocate([82,69,84,32,48,120,37,48,50,88,0] /* RET 0x%02X\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str173=allocate([82,69,84,0] /* RET\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str274=allocate([82,69,84,70,32,48,120,37,48,50,88,0] /* RETF 0x%02X\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str375=allocate([82,69,84,70,0] /* RETF\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str476=allocate([73,82,69,84,0] /* IRET\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str577=allocate([69,78,84,69,82,32,48,120,37,48,52,88,44,48,120,37,48,50,88,0] /* ENTER 0x%04X,0x%02X\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str678=allocate([76,69,65,86,69,0] /* LEAVE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str87=allocate([80,79,80,32,32,32,32,32,37,115,0] /* POP     %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str188=allocate([80,79,80,32,32,32,32,32,68,83,0] /* POP     DS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str289=allocate([80,79,80,32,32,32,32,32,69,83,0] /* POP     ES\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str390=allocate([80,79,80,32,32,32,32,32,83,83,0] /* POP     SS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str491=allocate([80,79,80,32,32,32,32,32,67,83,0] /* POP     CS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str592=allocate([80,79,80,70,0] /* POPF\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str693=allocate([80,85,83,72,32,32,32,32,37,115,0] /* PUSH    %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str794=allocate([80,85,83,72,32,32,32,32,68,83,0] /* PUSH    DS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str895=allocate([80,85,83,72,32,32,32,32,69,83,0] /* PUSH    ES\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str996=allocate([80,85,83,72,32,32,32,32,83,83,0] /* PUSH    SS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1097=allocate([80,85,83,72,32,32,32,32,67,83,0] /* PUSH    CS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1198=allocate([80,85,83,72,70,0] /* PUSHF\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1299=allocate([83,65,72,70,0] /* SAHF\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13100=allocate([76,65,72,70,0] /* LAHF\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14101=allocate([80,85,83,72,65,0] /* PUSHA\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15102=allocate([80,79,80,65,0] /* POPA\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str123=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1124=allocate([91,37,48,52,88,104,93,0] /* [%04Xh]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2125=allocate([91,37,115,93,0] /* [%s]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3126=allocate([91,37,115,43,37,48,52,88,104,93,0] /* [%s+%04Xh]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str155=allocate([77,79,86,32,37,115,44,37,115,0] /* MOV %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1156=allocate([77,79,86,32,37,115,44,91,37,48,52,88,104,93,0] /* MOV %s,[%04Xh]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2157=allocate([65,88,0] /* AX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3158=allocate([65,76,0] /* AL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4159=allocate([77,79,86,32,91,37,48,52,88,104,93,44,37,115,0] /* MOV [%04Xh],%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5160=allocate([77,79,86,32,37,115,44,37,48,50,88,104,0] /* MOV %s,%02Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6161=allocate([77,79,86,32,37,115,44,37,48,52,88,104,0] /* MOV %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7162=allocate([88,76,65,84,0] /* XLAT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8163=allocate([76,69,83,32,37,115,44,37,115,0] /* LES %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9164=allocate([76,68,83,32,37,115,44,37,115,0] /* LDS %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str177=allocate([73,78,32,37,115,44,37,48,50,88,104,0] /* IN %s,%02Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1178=allocate([65,88,0] /* AX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2179=allocate([65,76,0] /* AL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3180=allocate([73,78,32,37,115,44,68,88,0] /* IN %s,DX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4181=allocate([79,85,84,32,37,48,50,88,104,44,37,115,0] /* OUT %02Xh,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5182=allocate([79,85,84,32,68,88,44,37,115,0] /* OUT DX,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str187=allocate([73,78,67,32,37,115,0] /* INC %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1188=allocate([68,69,67,32,37,115,0] /* DEC %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str193=allocate([65,68,68,32,37,115,44,37,48,52,88,104,0] /* ADD %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1194=allocate([79,82,32,37,115,44,37,48,52,88,104,0] /* OR %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2195=allocate([65,68,67,32,37,115,44,37,48,52,88,104,0] /* ADC %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3196=allocate([83,66,66,32,37,115,44,37,48,52,88,104,0] /* SBB %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4197=allocate([65,78,68,32,37,115,44,37,48,52,88,104,0] /* AND %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5198=allocate([83,85,66,32,37,115,44,37,48,52,88,104,0] /* SUB %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6199=allocate([88,79,82,32,37,115,44,37,48,52,88,104,0] /* XOR %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7200=allocate([67,77,80,32,37,115,44,37,48,52,88,104,0] /* CMP %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8201=allocate([82,79,76,32,37,115,44,37,48,52,88,104,0] /* ROL %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9202=allocate([82,79,82,32,37,115,44,37,48,52,88,104,0] /* ROR %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10203=allocate([82,67,76,32,37,115,44,37,48,52,88,104,0] /* RCL %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11204=allocate([82,67,82,32,37,115,44,37,48,52,88,104,0] /* RCR %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12205=allocate([83,72,76,32,37,115,44,37,48,52,88,104,0] /* SHL %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13206=allocate([83,72,82,32,37,115,44,37,48,52,88,104,0] /* SHR %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14207=allocate([83,65,82,32,37,115,44,37,48,52,88,104,0] /* SAR %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15208=allocate([82,79,76,32,37,115,44,67,76,0] /* ROL %s,CL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16209=allocate([82,79,82,32,37,115,44,67,76,0] /* ROR %s,CL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17210=allocate([82,67,76,32,37,115,44,67,76,0] /* RCL %s,CL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18211=allocate([82,67,82,32,37,115,44,67,76,0] /* RCR %s,CL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19212=allocate([83,72,76,32,37,115,44,67,76,0] /* SHL %s,CL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20213=allocate([83,72,82,32,37,115,44,67,76,0] /* SHR %s,CL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21214=allocate([83,65,82,32,37,115,44,67,76,0] /* SAR %s,CL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22215=allocate([82,79,76,32,37,115,44,49,0] /* ROL %s,1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23216=allocate([82,79,82,32,37,115,44,49,0] /* ROR %s,1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24217=allocate([82,67,76,32,37,115,44,49,0] /* RCL %s,1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25218=allocate([82,67,82,32,37,115,44,49,0] /* RCR %s,1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26219=allocate([83,72,76,32,37,115,44,49,0] /* SHL %s,1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27220=allocate([83,72,82,32,37,115,44,49,0] /* SHR %s,1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28221=allocate([83,65,82,32,37,115,44,49,0] /* SAR %s,1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29222=allocate([77,79,86,32,37,115,44,37,48,52,88,104,0] /* MOV %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30223=allocate([73,78,67,32,37,115,0] /* INC %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31224=allocate([68,69,67,32,37,115,0] /* DEC %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32225=allocate([67,65,76,76,32,37,115,0] /* CALL %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33226=allocate([67,65,76,76,32,70,65,82,32,37,115,0] /* CALL FAR %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34227=allocate([74,77,80,32,37,115,0] /* JMP %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35228=allocate([74,77,80,32,70,65,82,32,37,115,0] /* JMP FAR %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36229=allocate([80,85,83,72,32,37,115,0] /* PUSH %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37=allocate([80,79,80,32,37,115,0] /* POP %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38=allocate([84,69,83,84,32,37,115,44,37,48,52,88,104,0] /* TEST %s,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39=allocate([78,79,84,32,37,115,0] /* NOT %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40=allocate([78,69,71,32,37,115,0] /* NEG %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41=allocate([77,85,76,32,37,115,0] /* MUL %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42=allocate([73,77,85,76,32,37,115,0] /* IMUL %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43=allocate([68,73,86,32,37,115,0] /* DIV %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44=allocate([73,68,73,86,32,37,115,0] /* IDIV %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str258=allocate([73,78,84,32,51,0] /* INT 3\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1259=allocate([73,78,84,32,37,48,50,88,104,0] /* INT %02Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2260=allocate([73,78,84,79,0] /* INTO\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str265=allocate([88,79,82,32,37,115,44,37,115,0] /* XOR %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1266=allocate([88,79,82,32,65,76,44,37,48,50,88,104,0] /* XOR AL,%02Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2267=allocate([88,79,82,32,65,88,44,37,48,52,88,104,0] /* XOR AX,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3268=allocate([79,82,32,37,115,44,37,115,0] /* OR %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4269=allocate([79,82,32,65,76,44,37,48,50,88,104,0] /* OR AL,%02Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5270=allocate([79,82,32,65,88,44,37,48,52,88,104,0] /* OR AX,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6271=allocate([65,78,68,32,37,115,44,37,115,0] /* AND %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7272=allocate([65,78,68,32,65,76,44,37,48,50,88,104,0] /* AND AL,%02Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8273=allocate([65,78,68,32,65,88,44,37,48,52,88,104,0] /* AND AX,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9274=allocate([84,69,83,84,32,37,115,44,37,115,0] /* TEST %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10275=allocate([84,69,83,84,32,65,76,44,37,48,50,88,104,0] /* TEST AL,%02Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11276=allocate([84,69,83,84,32,65,88,44,37,48,52,88,104,0] /* TEST AX,%04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12277=allocate([88,67,72,71,32,37,115,44,37,115,0] /* XCHG %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13278=allocate([88,67,72,71,32,37,115,44,65,88,0] /* XCHG %s,AX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14279=allocate([76,69,65,32,37,115,44,37,115,0] /* LEA %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15280=allocate([66,79,85,78,68,32,37,115,44,37,115,0] /* BOUND %s,%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str495=allocate([74,67,88,90,32,37,48,52,88,104,0] /* JCXZ %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1496=allocate([74,79,32,37,48,52,88,104,0] /* JO %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2497=allocate([74,78,79,32,37,48,52,88,104,0] /* JNO %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3498=allocate([74,67,32,37,48,52,88,104,0] /* JC %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4499=allocate([74,78,67,32,37,48,52,88,104,0] /* JNC %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5500=allocate([74,90,32,37,48,52,88,104,0] /* JZ %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6501=allocate([74,78,90,32,37,48,52,88,104,0] /* JNZ %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7502=allocate([74,66,69,32,37,48,52,88,104,0] /* JBE %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8503=allocate([74,65,32,37,48,52,88,104,0] /* JA %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9504=allocate([74,83,32,37,48,52,88,104,0] /* JS %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10505=allocate([74,78,83,32,37,48,52,88,104,0] /* JNS %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11506=allocate([74,80,32,37,48,52,88,104,0] /* JP %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12507=allocate([74,78,80,32,37,48,52,88,104,0] /* JNP %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13508=allocate([74,76,32,37,48,52,88,104,0] /* JL %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14509=allocate([74,71,69,32,37,48,52,88,104,0] /* JGE %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15510=allocate([74,76,69,32,37,48,52,88,104,0] /* JLE %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16511=allocate([74,71,32,37,48,52,88,104,0] /* JG %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17512=allocate([67,65,76,76,32,70,65,82,32,37,48,52,88,58,37,48,52,88,0] /* CALL FAR %04X:%04X\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18513=allocate([67,65,76,76,32,37,48,52,88,0] /* CALL %04X\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19514=allocate([74,77,80,32,37,48,52,88,0] /* JMP %04X\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20515=allocate([74,77,80,32,70,65,82,32,37,48,52,88,58,37,48,52,88,0] /* JMP FAR %04X:%04X\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21516=allocate([76,79,79,80,32,37,48,52,88,104,0] /* LOOP %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22517=allocate([76,79,79,80,90,32,37,48,52,88,104,0] /* LOOPZ %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23518=allocate([76,79,79,80,78,90,32,37,48,52,88,104,0] /* LOOPNZ %04Xh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str535=allocate([77,79,86,83,66,32,0] /* MOVSB \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1536=allocate([77,79,86,83,87,32,0] /* MOVSW \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2537=allocate([67,77,80,83,66,32,0] /* CMPSB \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3538=allocate([67,77,80,83,87,32,0] /* CMPSW \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4539=allocate([83,84,79,83,66,32,0] /* STOSB \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5540=allocate([83,84,79,83,87,32,0] /* STOSW \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6541=allocate([76,79,68,83,66,32,0] /* LODSB \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7542=allocate([76,79,68,83,87,32,0] /* LODSW \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8543=allocate([83,67,65,83,66,32,0] /* SCASB \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9544=allocate([83,67,65,83,87,32,0] /* SCASW \00 */, "i8", ALLOC_STATIC);
HEAP[_sx86_regs8]=((STRING_TABLE.__str29)|0);
HEAP[_sx86_regs8+4]=((STRING_TABLE.__str130)|0);
HEAP[_sx86_regs8+8]=((STRING_TABLE.__str231)|0);
HEAP[_sx86_regs8+12]=((STRING_TABLE.__str332)|0);
HEAP[_sx86_regs8+16]=((STRING_TABLE.__str433)|0);
HEAP[_sx86_regs8+20]=((STRING_TABLE.__str534)|0);
HEAP[_sx86_regs8+24]=((STRING_TABLE.__str635)|0);
HEAP[_sx86_regs8+28]=((STRING_TABLE.__str736)|0);
HEAP[_sx86_regs16]=((STRING_TABLE.__str837)|0);
HEAP[_sx86_regs16+4]=((STRING_TABLE.__str938)|0);
HEAP[_sx86_regs16+8]=((STRING_TABLE.__str1039)|0);
HEAP[_sx86_regs16+12]=((STRING_TABLE.__str1140)|0);
HEAP[_sx86_regs16+16]=((STRING_TABLE.__str1241)|0);
HEAP[_sx86_regs16+20]=((STRING_TABLE.__str1342)|0);
HEAP[_sx86_regs16+24]=((STRING_TABLE.__str1443)|0);
HEAP[_sx86_regs16+28]=((STRING_TABLE.__str15)|0);
HEAP[_sx86_regs32]=((STRING_TABLE.__str16)|0);
HEAP[_sx86_regs32+4]=((STRING_TABLE.__str1744)|0);
HEAP[_sx86_regs32+8]=((STRING_TABLE.__str18)|0);
HEAP[_sx86_regs32+12]=((STRING_TABLE.__str1945)|0);
HEAP[_sx86_regs32+16]=((STRING_TABLE.__str2046)|0);
HEAP[_sx86_regs32+20]=((STRING_TABLE.__str21)|0);
HEAP[_sx86_regs32+24]=((STRING_TABLE.__str22)|0);
HEAP[_sx86_regs32+28]=((STRING_TABLE.__str23)|0);
HEAP[_sx86_regsaddr16_16]=((STRING_TABLE.__str24)|0);
HEAP[_sx86_regsaddr16_16+4]=((STRING_TABLE.__str25)|0);
HEAP[_sx86_regsaddr16_16+8]=((STRING_TABLE.__str26)|0);
HEAP[_sx86_regsaddr16_16+12]=((STRING_TABLE.__str2747)|0);
HEAP[_sx86_regsaddr16_16+16]=((STRING_TABLE.__str1443)|0);
HEAP[_sx86_regsaddr16_16+20]=((STRING_TABLE.__str15)|0);
HEAP[_sx86_regsaddr16_16+24]=((STRING_TABLE.__str1342)|0);
HEAP[_sx86_regsaddr16_16+28]=((STRING_TABLE.__str1140)|0);
HEAP[_sx86_segregs]=((STRING_TABLE.__str28)|0);
HEAP[_sx86_segregs+4]=((STRING_TABLE.__str2948)|0);
HEAP[_sx86_segregs+8]=((STRING_TABLE.__str30)|0);
HEAP[_sx86_segregs+12]=((STRING_TABLE.__str31)|0);
HEAP[_sx86_segregs+16]=((STRING_TABLE.__str32)|0);
HEAP[_sx86_segregs+20]=((STRING_TABLE.__str33)|0);
HEAP[_sx86_segregs+24]=((STRING_TABLE.__str34)|0);
HEAP[_sx86_segregs+28]=((STRING_TABLE.__str35)|0);
FUNCTION_TABLE = [0,0,_op_add8,0,_op_add16,0,_op_add32,0,_op_adc8,0,_op_adc16,0,_op_adc32,0,_op_sub8,0,_op_sub16,0,_op_sub32,0,_op_sbb8,0,_op_sbb16,0,_op_sbb32,0,_softx86_step_def_on_read_io,0,_softx86_step_def_on_read_memory,0,_softx86_step_def_on_write_io,0,_softx86_step_def_on_write_memory,0,_softx86_step_def_on_hw_int,0,_softx86_step_def_on_hw_int_ack,0,_softx86_step_def_on_sw_int,0,_softx86_step_def_on_idle_cycle,0,_softx86_step_def_on_nmi_int,0,_softx86_step_def_on_nmi_int_ack,0,_softx86_step_def_on_fpu_opcode_dec,0,_softx86_step_def_on_fpu_opcode_exec,0,_softx86_step_def_on_reset,0,_op_mov8,0,_op_mov16,0,_op_mov32,0,_op_les16,0,_op_les32,0,_op_lds16,0,_op_lds32,0,_op_or8,0,_op_or16,0,_op_or32,0,_op_and8,0,_op_and16,0,_op_and32,0,_op_xor8,0,_op_xor16,0,_op_xor32,0,_op_rol8,0,_op_rol16,0,_op_rol32,0,_op_ror8,0,_op_ror16,0,_op_ror32,0,_op_rcl8,0,_op_rcl16,0,_op_rcl32,0,_op_rcr8,0,_op_rcr16,0,_op_rcr32,0,_op_shl8,0,_op_shl16,0,_op_shl32,0,_op_shr8,0,_op_shr16,0,_op_shr32,0,_op_sar8,0,_op_sar16,0,_op_sar32,0,_op_rol_cl_8,0,_op_rol_cl_16,0,_op_rol_cl_32,0,_op_rol1_8,0,_op_rol1_16,0,_op_rol1_32,0,_op_ror_cl_8,0,_op_ror_cl_16,0,_op_ror_cl_32,0,_op_ror1_8,0,_op_ror1_16,0,_op_ror1_32,0,_op_rcl_cl_8,0,_op_rcl_cl_16,0,_op_rcl_cl_32,0,_op_rcl1_8,0,_op_rcl1_16,0,_op_rcl1_32,0,_op_rcr_cl_8,0,_op_rcr_cl_16,0,_op_rcr_cl_32,0,_op_rcr1_8,0,_op_rcr1_16,0,_op_rcr1_32,0,_op_shl_cl_8,0,_op_shl_cl_16,0,_op_shl_cl_32,0,_op_shl1_8,0,_op_shl1_16,0,_op_shl1_32,0,_op_shr_cl_8,0,_op_shr_cl_16,0,_op_shr_cl_32,0,_op_shr1_8,0,_op_shr1_16,0,_op_shr1_32,0,_op_sar_cl_8,0,_op_sar_cl_16,0,_op_sar_cl_32,0,_op_sar1_8,0,_op_sar1_16,0,_op_sar1_32,0,_op_fcall16,0,_op_fcall32,0,_op_fjmp16,0,_op_fjmp32,0,_op_ncall16,0,_op_ncall32,0,_op_njmp16,0,_op_njmp32,0,_op_pushmem16,0,_op_pushmem32,0,_op_inc8,0,_op_inc16,0,_op_inc32,0,_op_dec8,0,_op_dec16,0,_op_dec32,0,_op_popmem16,0,_op_popmem32,0,_op_mul8,0,_op_mul16,0,_op_mul32,0,_op_imul8,0,_op_imul16,0,_op_imul32,0,_op_div8,0,_op_div16,0,_op_div32,0,_op_idiv8,0,_op_idiv16,0,_op_idiv32,0,_op_test8,0,_op_test16,0,_op_test32,0,_op_not8,0,_op_not16,0,_op_not32,0,_op_neg8,0,_op_neg16,0,_op_neg32,0,_op_bound16,0,_op_bound32,0,_Sfx86OpcodeExec_add,0,_Sfx86OpcodeDec_add,0,_Sfx86OpcodeExec_push,0,_Sfx86OpcodeDec_push,0,_Sfx86OpcodeExec_pop,0,_Sfx86OpcodeDec_pop,0,_Sfx86OpcodeExec_or,0,_Sfx86OpcodeDec_or,0,_Sfx86OpcodeExec_adc,0,_Sfx86OpcodeDec_adc,0,_Sfx86OpcodeExec_sbb,0,_Sfx86OpcodeDec_sbb,0,_Sfx86OpcodeExec_and,0,_Sfx86OpcodeDec_and,0,_Sfx86OpcodeExec_segover,0,_Sfx86OpcodeDec_segover,0,_Sfx86OpcodeExec_aaaseries,0,_Sfx86OpcodeDec_aaaseries,0,_Sfx86OpcodeExec_sub,0,_Sfx86OpcodeDec_sub,0,_Sfx86OpcodeExec_xor,0,_Sfx86OpcodeDec_xor,0,_Sfx86OpcodeExec_cmp,0,_Sfx86OpcodeDec_cmp,0,_Sfx86OpcodeExec_inc,0,_Sfx86OpcodeDec_inc,0,_Sfx86OpcodeExec_pusha,0,_Sfx86OpcodeDec_pusha,0,_Sfx86OpcodeExec_popa,0,_Sfx86OpcodeDec_popa,0,_Sfx86OpcodeExec_bound,0,_Sfx86OpcodeDec_bound,0,_Sfx86OpcodeExec_default,0,_Sfx86OpcodeDec_default,0,_Sfx86OpcodeExec_jc,0,_Sfx86OpcodeDec_jc,0,_Sfx86OpcodeExec_group80,0,_Sfx86OpcodeDec_group80,0,_Sfx86OpcodeExec_test,0,_Sfx86OpcodeDec_test,0,_Sfx86OpcodeExec_xchg,0,_Sfx86OpcodeDec_xchg,0,_Sfx86OpcodeExec_mov,0,_Sfx86OpcodeDec_mov,0,_Sfx86OpcodeExec_lea,0,_Sfx86OpcodeDec_lea,0,_Sfx86OpcodeExec_group8F,0,_Sfx86OpcodeDec_group8F,0,_Sfx86OpcodeExec_nop,0,_Sfx86OpcodeDec_nop,0,_Sfx86OpcodeExec_cxex,0,_Sfx86OpcodeDec_cxex,0,_Sfx86OpcodeExec_call,0,_Sfx86OpcodeDec_call,0,_Sfx86OpcodeExec_duhhh,0,_Sfx86OpcodeDec_duhhh,0,_Sfx86OpcodeExec_ahf,0,_Sfx86OpcodeDec_ahf,0,_Sfx86OpcodeExec_shovel,0,_Sfx86OpcodeDec_shovel,0,_Sfx86OpcodeExec_groupC0,0,_Sfx86OpcodeDec_groupC0,0,_Sfx86OpcodeExec_returns,0,_Sfx86OpcodeDec_returns,0,_Sfx86OpcodeExec_les,0,_Sfx86OpcodeDec_les,0,_Sfx86OpcodeExec_groupC6,0,_Sfx86OpcodeDec_groupC6,0,_Sfx86OpcodeExec_enterleave,0,_Sfx86OpcodeDec_enterleave,0,_Sfx86OpcodeExec_int,0,_Sfx86OpcodeDec_int,0,_Sfx86OpcodeExec_groupD0,0,_Sfx86OpcodeDec_groupD0,0,_Sfx86OpcodeExec_xlat,0,_Sfx86OpcodeDec_xlat,0,_Sfx86OpcodeExec_fpuhandoff,0,_Sfx86OpcodeDec_fpuhandoff,0,_Sfx86OpcodeExec_loop,0,_Sfx86OpcodeDec_loop,0,_Sfx86OpcodeExec_io,0,_Sfx86OpcodeDec_io,0,_Sfx86OpcodeExec_jmp,0,_Sfx86OpcodeDec_jmp,0,_Sfx86OpcodeExec_lock,0,_Sfx86OpcodeDec_lock,0,_Sfx86OpcodeExec_repetition,0,_Sfx86OpcodeDec_repetition,0,_Sfx86OpcodeExec_clx,0,_Sfx86OpcodeDec_clx,0,_Sfx86OpcodeExec_groupF6,0,_Sfx86OpcodeDec_groupF6,0,_Sfx86OpcodeExec_groupFE,0,_Sfx86OpcodeDec_groupFE,0]; Module["FUNCTION_TABLE"] = FUNCTION_TABLE;


function run(args) {
  args = args || Module['arguments'];

  initRuntime();

  var ret = null;
  if (Module['_main']) {
    ret = Module.callMain(args);
    if (!Module['noExitRuntime']) {
      exitRuntime();
    }
  }
  return ret;
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preRun']) {
  Module['preRun']();
}


if (runDependencies == 0) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}

if (Module['postRun']) {
  Module['postRun']();
}





  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_Sfx86OpcodeExec_aaaseries","_Sfx86OpcodeDec_aaaseries","_op_add8","_op_add16","_op_add32","_op_adc8","_op_adc16","_op_adc32","_op_sub8","_op_sub16","_op_sub32","_op_sbb8","_op_sbb16","_op_sbb32","_Sfx86OpcodeExec_add","_Sfx86OpcodeDec_add","_Sfx86OpcodeExec_adc","_Sfx86OpcodeDec_adc","_Sfx86OpcodeExec_cxex","_Sfx86OpcodeExec_sub","_Sfx86OpcodeDec_sub","_Sfx86OpcodeExec_sbb","_Sfx86OpcodeDec_sbb","_Sfx86OpcodeExec_cmp","_Sfx86OpcodeDec_cmp","_Sfx86OpcodeDec_cxex","_Sfx86OpcodeExec_default","_Sfx86OpcodeExec_nop","_Sfx86OpcodeExec_lock","_Sfx86OpcodeExec_clx","_Sfx86OpcodeExec_duhhh","_Sfx86OpcodeDec_default","_Sfx86OpcodeExec_segover","_Sfx86OpcodeExec_repetition","_Sfx86OpcodeDec_clx","_Sfx86OpcodeDec_duhhh","_Sfx86OpcodeDec_nop","_Sfx86OpcodeDec_segover","_Sfx86OpcodeDec_repetition","_Sfx86OpcodeDec_lock","_Sfx86OpcodeExec_returns","_Sfx86OpcodeDec_returns","_Sfx86OpcodeExec_ahf","_Sfx86OpcodeExec_enterleave","_Sfx86OpcodeDec_enterleave","_Sfx86OpcodeExec_pop","_Sfx86OpcodeDec_pop","_Sfx86OpcodeExec_push","_Sfx86OpcodeDec_push","_Sfx86OpcodeDec_ahf","_softx86_step_def_on_hw_int","_softx86_step_def_on_hw_int_ack","_softx86_step_def_on_sw_int","_softx86_step_def_on_idle_cycle","_softx86_step_def_on_nmi_int","_softx86_step_def_on_nmi_int_ack","_softx86_step_def_on_fpu_opcode_dec","_softx86_step_def_on_fpu_opcode_exec","_softx86_step_def_on_reset","_softx86_getversion","_softx86_free","_softx86_step_def_on_write_io","_softx86_step_def_on_write_memory","_softx86_setsegval","_Sfx86OpcodeExec_pusha","_Sfx86OpcodeDec_pusha","_Sfx86OpcodeExec_popa","_Sfx86OpcodeDec_popa","_softx86_reset","_softx86_init","_softx86_step_def_on_read_io","_softx86_step_def_on_read_memory","_softx86_stack_discard_n","_softx86_stack_add_n","_softx86_set_near_instruction_ptr","_softx86_set_instruction_dec_ptr","_softx86_setbug","_softx86_fetch_exec_byte","_softx86_fetch","_softx86_fetch_dec_byte","_softx86_stack_popw","_softx86_stack_pushw","_softx86_write","_softx86_set_stack_ptr","_softx86_set_instruction_ptr","_softx86_get_intvect","_softx86_go_int_frame","_softx86_ext_hw_signal","_softx86_ext_hw_nmi_signal","_softx86_int_sw_signal","_softx86_ext_hw_ack","_softx86_ext_hw_nmi_ack","_softx86_decompile_exec_cs_ip","_softx86_bswap2","_softx86_bswap4","_softx86_step","_softx86_decompile","_sx86_exec_full_modregrm_lea","_sx86_exec_full_modregrm_rw","_sx86_exec_full_modregrm_ro","_sx86_exec_full_modregrm_far","_sx86_exec_full_modregrm_far_ro3","_sx86_exec_full_modrmonly_rw_imm","_sx86_exec_full_modrmonly_rw_imm8","_sx86_exec_full_modrmonly_ro_imm","_sx86_exec_full_modrmonly_rw","_sx86_exec_full_modrmonly_ro","_sx86_exec_full_modrmonly_wo","_sx86_exec_full_modrmonly_callfar","_softx86_parity8","_softx86_parity16","_softx86_parity32","_softx86_parity64","_sx86_exec_full_modregrm_xchg","_sx86_exec_full_modrmonly_memx","_sx86_exec_full_modsregrm_rw","_sx86_dec_full_modregrm","_op_mov8","_op_mov16","_op_mov32","_sx86_dec_full_modrmonly","_sx86_dec_full_modsregrm","_Sfx86OpcodeExec_mov","_Sfx86OpcodeDec_mov","_Sfx86OpcodeExec_xlat","_Sfx86OpcodeDec_xlat","_op_les16","_op_les32","_op_lds16","_op_lds32","_Sfx86OpcodeExec_les","_Sfx86OpcodeDec_les","_Sfx86OpcodeExec_io","_Sfx86OpcodeDec_io","_op_dec8","_op_dec16","_op_dec32","_op_inc8","_op_inc16","_op_inc32","_Sfx86OpcodeExec_inc","_Sfx86OpcodeDec_inc","_op_ncall16","_op_ncall32","_op_popmem16","_op_popmem32","_op_pushmem16","_op_pushmem32","_op_njmp16","_op_njmp32","_op_fcall16","_op_fcall32","_op_fjmp16","_op_fjmp32","_Sfx86OpcodeExec_group80","_Sfx86OpcodeDec_group80","_Sfx86OpcodeExec_groupC0","_Sfx86OpcodeDec_groupC0","_Sfx86OpcodeExec_groupD0","_Sfx86OpcodeDec_groupD0","_Sfx86OpcodeExec_groupC6","_Sfx86OpcodeDec_groupC6","_Sfx86OpcodeExec_groupFE","_Sfx86OpcodeDec_groupFE","_Sfx86OpcodeExec_group8F","_Sfx86OpcodeDec_group8F","_Sfx86OpcodeExec_groupF6","_Sfx86OpcodeDec_groupF6","_Sfx86OpcodeExec_int","_Sfx86OpcodeDec_int","_op_sar8","_op_sar1_8","_op_sar_cl_8","_op_sar16","_op_sar1_16","_op_sar_cl_16","_op_sar32","_op_sar1_32","_op_sar_cl_32","_op_shr8","_op_shr1_8","_op_shr_cl_8","_op_shr16","_op_shr1_16","_op_shr_cl_16","_op_shr32","_op_shr1_32","_op_shr_cl_32","_op_shl8","_op_shl1_8","_op_shl_cl_8","_op_shl16","_op_shl1_16","_op_shl_cl_16","_op_shl32","_op_shl1_32","_op_shl_cl_32","_op_ror8","_op_ror1_8","_op_ror_cl_8","_op_ror16","_op_ror1_16","_op_ror_cl_16","_op_ror32","_op_ror1_32","_op_ror_cl_32","_op_rol8","_op_rol1_8","_op_rol_cl_8","_op_rol16","_op_rol1_16","_op_rol_cl_16","_op_rol32","_op_rol1_32","_op_rol_cl_32","_op_rcl8","_op_rcl1_8","_op_rcl_cl_8","_op_rcl16","_op_rcl1_16","_op_rcl_cl_16","_op_rcl32","_op_rcl1_32","_op_rcl_cl_32","_op_rcr8","_op_rcr1_8","_op_rcr_cl_8","_op_rcr16","_op_rcr1_16","_op_rcr_cl_16","_op_rcr32","_op_rcr1_32","_op_rcr_cl_32","_op_xor8","_op_xor16","_op_xor32","_op_or8","_op_or16","_op_or32","_op_and8","_op_and16","_op_and32","_op_test8","_op_not8","_op_not16","_op_not32","_op_test16","_op_test32","_op_neg8","_op_neg16","_op_neg32","_op_mul8","_op_mul16","_op_mul32","_op_imul8","_op_imul16","_op_imul32","_op_div8","_op_div16","_op_div32","_op_idiv8","_op_idiv16","_op_idiv32","_Sfx86OpcodeExec_xor","_Sfx86OpcodeDec_xor","_Sfx86OpcodeExec_or","_Sfx86OpcodeDec_or","_Sfx86OpcodeExec_and","_Sfx86OpcodeDec_and","_Sfx86OpcodeExec_test","_Sfx86OpcodeDec_test","_Sfx86OpcodeExec_xchg","_Sfx86OpcodeDec_xchg","_Sfx86OpcodeExec_lea","_Sfx86OpcodeDec_lea","_op_bound16","_op_bound32","_Sfx86OpcodeExec_bound","_Sfx86OpcodeDec_bound","_Sfx86OpcodeExec_jc","_Sfx86OpcodeDec_jc","_Sfx86OpcodeExec_call","_Sfx86OpcodeDec_call","_Sfx86OpcodeExec_jmp","_Sfx86OpcodeDec_jmp","_Sfx86OpcodeExec_loop","_Sfx86OpcodeDec_loop","_Sfx86OpcodeExec_shovel","_Sfx86OpcodeDec_shovel","_Sfx86OpcodeExec_fpuhandoff","_Sfx86OpcodeDec_fpuhandoff"]

